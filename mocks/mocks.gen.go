// Code generated by MockGen. DO NOT EDIT.
// Source: ../client.gen.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	http "net/http"
	url "net/url"
	os "os"
	reflect "reflect"
	time "time"

	gogithubmockable "github.com/connormckelvey/go-github-mockable"
	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v48/github"
)

// MockClientAPI is a mock of ClientAPI interface.
type MockClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockClientAPIMockRecorder
}

// MockClientAPIMockRecorder is the mock recorder for MockClientAPI.
type MockClientAPIMockRecorder struct {
	mock *MockClientAPI
}

// NewMockClientAPI creates a new mock instance.
func NewMockClientAPI(ctrl *gomock.Controller) *MockClientAPI {
	mock := &MockClientAPI{ctrl: ctrl}
	mock.recorder = &MockClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientAPI) EXPECT() *MockClientAPIMockRecorder {
	return m.recorder
}

// APIMeta mocks base method.
func (m *MockClientAPI) APIMeta(ctx context.Context) (*github.APIMeta, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIMeta", ctx)
	ret0, _ := ret[0].(*github.APIMeta)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// APIMeta indicates an expected call of APIMeta.
func (mr *MockClientAPIMockRecorder) APIMeta(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIMeta", reflect.TypeOf((*MockClientAPI)(nil).APIMeta), ctx)
}

// Actions mocks base method.
func (m *MockClientAPI) Actions() gogithubmockable.ActionsService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Actions")
	ret0, _ := ret[0].(gogithubmockable.ActionsService)
	return ret0
}

// Actions indicates an expected call of Actions.
func (mr *MockClientAPIMockRecorder) Actions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Actions", reflect.TypeOf((*MockClientAPI)(nil).Actions))
}

// Activity mocks base method.
func (m *MockClientAPI) Activity() gogithubmockable.ActivityService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Activity")
	ret0, _ := ret[0].(gogithubmockable.ActivityService)
	return ret0
}

// Activity indicates an expected call of Activity.
func (mr *MockClientAPIMockRecorder) Activity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Activity", reflect.TypeOf((*MockClientAPI)(nil).Activity))
}

// Admin mocks base method.
func (m *MockClientAPI) Admin() gogithubmockable.AdminService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Admin")
	ret0, _ := ret[0].(gogithubmockable.AdminService)
	return ret0
}

// Admin indicates an expected call of Admin.
func (mr *MockClientAPIMockRecorder) Admin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Admin", reflect.TypeOf((*MockClientAPI)(nil).Admin))
}

// Apps mocks base method.
func (m *MockClientAPI) Apps() gogithubmockable.AppsService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apps")
	ret0, _ := ret[0].(gogithubmockable.AppsService)
	return ret0
}

// Apps indicates an expected call of Apps.
func (mr *MockClientAPIMockRecorder) Apps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apps", reflect.TypeOf((*MockClientAPI)(nil).Apps))
}

// Authorizations mocks base method.
func (m *MockClientAPI) Authorizations() gogithubmockable.AuthorizationsService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorizations")
	ret0, _ := ret[0].(gogithubmockable.AuthorizationsService)
	return ret0
}

// Authorizations indicates an expected call of Authorizations.
func (mr *MockClientAPIMockRecorder) Authorizations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorizations", reflect.TypeOf((*MockClientAPI)(nil).Authorizations))
}

// BareDo mocks base method.
func (m *MockClientAPI) BareDo(ctx context.Context, req *http.Request) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BareDo", ctx, req)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BareDo indicates an expected call of BareDo.
func (mr *MockClientAPIMockRecorder) BareDo(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BareDo", reflect.TypeOf((*MockClientAPI)(nil).BareDo), ctx, req)
}

// Billing mocks base method.
func (m *MockClientAPI) Billing() gogithubmockable.BillingService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Billing")
	ret0, _ := ret[0].(gogithubmockable.BillingService)
	return ret0
}

// Billing indicates an expected call of Billing.
func (mr *MockClientAPIMockRecorder) Billing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Billing", reflect.TypeOf((*MockClientAPI)(nil).Billing))
}

// Checks mocks base method.
func (m *MockClientAPI) Checks() gogithubmockable.ChecksService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checks")
	ret0, _ := ret[0].(gogithubmockable.ChecksService)
	return ret0
}

// Checks indicates an expected call of Checks.
func (mr *MockClientAPIMockRecorder) Checks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checks", reflect.TypeOf((*MockClientAPI)(nil).Checks))
}

// Client mocks base method.
func (m *MockClientAPI) Client() *http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(*http.Client)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockClientAPIMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockClientAPI)(nil).Client))
}

// CodeScanning mocks base method.
func (m *MockClientAPI) CodeScanning() gogithubmockable.CodeScanningService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CodeScanning")
	ret0, _ := ret[0].(gogithubmockable.CodeScanningService)
	return ret0
}

// CodeScanning indicates an expected call of CodeScanning.
func (mr *MockClientAPIMockRecorder) CodeScanning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CodeScanning", reflect.TypeOf((*MockClientAPI)(nil).CodeScanning))
}

// Dependabot mocks base method.
func (m *MockClientAPI) Dependabot() gogithubmockable.DependabotService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dependabot")
	ret0, _ := ret[0].(gogithubmockable.DependabotService)
	return ret0
}

// Dependabot indicates an expected call of Dependabot.
func (mr *MockClientAPIMockRecorder) Dependabot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dependabot", reflect.TypeOf((*MockClientAPI)(nil).Dependabot))
}

// Do mocks base method.
func (m *MockClientAPI) Do(ctx context.Context, req *http.Request, v interface{}) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, req, v)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockClientAPIMockRecorder) Do(ctx, req, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockClientAPI)(nil).Do), ctx, req, v)
}

// Enterprise mocks base method.
func (m *MockClientAPI) Enterprise() gogithubmockable.EnterpriseService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enterprise")
	ret0, _ := ret[0].(gogithubmockable.EnterpriseService)
	return ret0
}

// Enterprise indicates an expected call of Enterprise.
func (mr *MockClientAPIMockRecorder) Enterprise() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enterprise", reflect.TypeOf((*MockClientAPI)(nil).Enterprise))
}

// GetBaseURL mocks base method.
func (m *MockClientAPI) GetBaseURL() *url.URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseURL")
	ret0, _ := ret[0].(*url.URL)
	return ret0
}

// GetBaseURL indicates an expected call of GetBaseURL.
func (mr *MockClientAPIMockRecorder) GetBaseURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseURL", reflect.TypeOf((*MockClientAPI)(nil).GetBaseURL))
}

// GetCodeOfConduct mocks base method.
func (m *MockClientAPI) GetCodeOfConduct(ctx context.Context, key string) (*github.CodeOfConduct, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeOfConduct", ctx, key)
	ret0, _ := ret[0].(*github.CodeOfConduct)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCodeOfConduct indicates an expected call of GetCodeOfConduct.
func (mr *MockClientAPIMockRecorder) GetCodeOfConduct(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeOfConduct", reflect.TypeOf((*MockClientAPI)(nil).GetCodeOfConduct), ctx, key)
}

// GetUploadURL mocks base method.
func (m *MockClientAPI) GetUploadURL() *url.URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploadURL")
	ret0, _ := ret[0].(*url.URL)
	return ret0
}

// GetUploadURL indicates an expected call of GetUploadURL.
func (mr *MockClientAPIMockRecorder) GetUploadURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadURL", reflect.TypeOf((*MockClientAPI)(nil).GetUploadURL))
}

// GetUserAgent mocks base method.
func (m *MockClientAPI) GetUserAgent() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAgent")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUserAgent indicates an expected call of GetUserAgent.
func (mr *MockClientAPIMockRecorder) GetUserAgent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAgent", reflect.TypeOf((*MockClientAPI)(nil).GetUserAgent))
}

// Gists mocks base method.
func (m *MockClientAPI) Gists() gogithubmockable.GistsService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gists")
	ret0, _ := ret[0].(gogithubmockable.GistsService)
	return ret0
}

// Gists indicates an expected call of Gists.
func (mr *MockClientAPIMockRecorder) Gists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gists", reflect.TypeOf((*MockClientAPI)(nil).Gists))
}

// Git mocks base method.
func (m *MockClientAPI) Git() gogithubmockable.GitService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Git")
	ret0, _ := ret[0].(gogithubmockable.GitService)
	return ret0
}

// Git indicates an expected call of Git.
func (mr *MockClientAPIMockRecorder) Git() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Git", reflect.TypeOf((*MockClientAPI)(nil).Git))
}

// Gitignores mocks base method.
func (m *MockClientAPI) Gitignores() gogithubmockable.GitignoresService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gitignores")
	ret0, _ := ret[0].(gogithubmockable.GitignoresService)
	return ret0
}

// Gitignores indicates an expected call of Gitignores.
func (mr *MockClientAPIMockRecorder) Gitignores() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gitignores", reflect.TypeOf((*MockClientAPI)(nil).Gitignores))
}

// Interactions mocks base method.
func (m *MockClientAPI) Interactions() gogithubmockable.InteractionsService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Interactions")
	ret0, _ := ret[0].(gogithubmockable.InteractionsService)
	return ret0
}

// Interactions indicates an expected call of Interactions.
func (mr *MockClientAPIMockRecorder) Interactions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Interactions", reflect.TypeOf((*MockClientAPI)(nil).Interactions))
}

// IssueImport mocks base method.
func (m *MockClientAPI) IssueImport() gogithubmockable.IssueImportService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueImport")
	ret0, _ := ret[0].(gogithubmockable.IssueImportService)
	return ret0
}

// IssueImport indicates an expected call of IssueImport.
func (mr *MockClientAPIMockRecorder) IssueImport() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueImport", reflect.TypeOf((*MockClientAPI)(nil).IssueImport))
}

// Issues mocks base method.
func (m *MockClientAPI) Issues() gogithubmockable.IssuesService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Issues")
	ret0, _ := ret[0].(gogithubmockable.IssuesService)
	return ret0
}

// Issues indicates an expected call of Issues.
func (mr *MockClientAPIMockRecorder) Issues() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Issues", reflect.TypeOf((*MockClientAPI)(nil).Issues))
}

// Licenses mocks base method.
func (m *MockClientAPI) Licenses() gogithubmockable.LicensesService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Licenses")
	ret0, _ := ret[0].(gogithubmockable.LicensesService)
	return ret0
}

// Licenses indicates an expected call of Licenses.
func (mr *MockClientAPIMockRecorder) Licenses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Licenses", reflect.TypeOf((*MockClientAPI)(nil).Licenses))
}

// ListCodesOfConduct mocks base method.
func (m *MockClientAPI) ListCodesOfConduct(ctx context.Context) ([]*github.CodeOfConduct, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCodesOfConduct", ctx)
	ret0, _ := ret[0].([]*github.CodeOfConduct)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCodesOfConduct indicates an expected call of ListCodesOfConduct.
func (mr *MockClientAPIMockRecorder) ListCodesOfConduct(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCodesOfConduct", reflect.TypeOf((*MockClientAPI)(nil).ListCodesOfConduct), ctx)
}

// ListEmojis mocks base method.
func (m *MockClientAPI) ListEmojis(ctx context.Context) (map[string]string, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmojis", ctx)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEmojis indicates an expected call of ListEmojis.
func (mr *MockClientAPIMockRecorder) ListEmojis(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmojis", reflect.TypeOf((*MockClientAPI)(nil).ListEmojis), ctx)
}

// ListServiceHooks mocks base method.
func (m *MockClientAPI) ListServiceHooks(ctx context.Context) ([]*github.ServiceHook, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceHooks", ctx)
	ret0, _ := ret[0].([]*github.ServiceHook)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListServiceHooks indicates an expected call of ListServiceHooks.
func (mr *MockClientAPIMockRecorder) ListServiceHooks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceHooks", reflect.TypeOf((*MockClientAPI)(nil).ListServiceHooks), ctx)
}

// Markdown mocks base method.
func (m *MockClientAPI) Markdown(ctx context.Context, text string, opts *github.MarkdownOptions) (string, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Markdown", ctx, text, opts)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Markdown indicates an expected call of Markdown.
func (mr *MockClientAPIMockRecorder) Markdown(ctx, text, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Markdown", reflect.TypeOf((*MockClientAPI)(nil).Markdown), ctx, text, opts)
}

// Marketplace mocks base method.
func (m *MockClientAPI) Marketplace() gogithubmockable.MarketplaceService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marketplace")
	ret0, _ := ret[0].(gogithubmockable.MarketplaceService)
	return ret0
}

// Marketplace indicates an expected call of Marketplace.
func (mr *MockClientAPIMockRecorder) Marketplace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marketplace", reflect.TypeOf((*MockClientAPI)(nil).Marketplace))
}

// Migrations mocks base method.
func (m *MockClientAPI) Migrations() gogithubmockable.MigrationsService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrations")
	ret0, _ := ret[0].(gogithubmockable.MigrationsService)
	return ret0
}

// Migrations indicates an expected call of Migrations.
func (mr *MockClientAPIMockRecorder) Migrations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrations", reflect.TypeOf((*MockClientAPI)(nil).Migrations))
}

// NewFormRequest mocks base method.
func (m *MockClientAPI) NewFormRequest(urlStr string, body io.Reader) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewFormRequest", urlStr, body)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewFormRequest indicates an expected call of NewFormRequest.
func (mr *MockClientAPIMockRecorder) NewFormRequest(urlStr, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFormRequest", reflect.TypeOf((*MockClientAPI)(nil).NewFormRequest), urlStr, body)
}

// NewRequest mocks base method.
func (m *MockClientAPI) NewRequest(method, urlStr string, body interface{}) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRequest", method, urlStr, body)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRequest indicates an expected call of NewRequest.
func (mr *MockClientAPIMockRecorder) NewRequest(method, urlStr, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRequest", reflect.TypeOf((*MockClientAPI)(nil).NewRequest), method, urlStr, body)
}

// NewUploadRequest mocks base method.
func (m *MockClientAPI) NewUploadRequest(urlStr string, reader io.Reader, size int64, mediaType string) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUploadRequest", urlStr, reader, size, mediaType)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewUploadRequest indicates an expected call of NewUploadRequest.
func (mr *MockClientAPIMockRecorder) NewUploadRequest(urlStr, reader, size, mediaType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUploadRequest", reflect.TypeOf((*MockClientAPI)(nil).NewUploadRequest), urlStr, reader, size, mediaType)
}

// Octocat mocks base method.
func (m *MockClientAPI) Octocat(ctx context.Context, message string) (string, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Octocat", ctx, message)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Octocat indicates an expected call of Octocat.
func (mr *MockClientAPIMockRecorder) Octocat(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Octocat", reflect.TypeOf((*MockClientAPI)(nil).Octocat), ctx, message)
}

// Organizations mocks base method.
func (m *MockClientAPI) Organizations() gogithubmockable.OrganizationsService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Organizations")
	ret0, _ := ret[0].(gogithubmockable.OrganizationsService)
	return ret0
}

// Organizations indicates an expected call of Organizations.
func (mr *MockClientAPIMockRecorder) Organizations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Organizations", reflect.TypeOf((*MockClientAPI)(nil).Organizations))
}

// Projects mocks base method.
func (m *MockClientAPI) Projects() gogithubmockable.ProjectsService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Projects")
	ret0, _ := ret[0].(gogithubmockable.ProjectsService)
	return ret0
}

// Projects indicates an expected call of Projects.
func (mr *MockClientAPIMockRecorder) Projects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Projects", reflect.TypeOf((*MockClientAPI)(nil).Projects))
}

// PullRequests mocks base method.
func (m *MockClientAPI) PullRequests() gogithubmockable.PullRequestsService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullRequests")
	ret0, _ := ret[0].(gogithubmockable.PullRequestsService)
	return ret0
}

// PullRequests indicates an expected call of PullRequests.
func (mr *MockClientAPIMockRecorder) PullRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullRequests", reflect.TypeOf((*MockClientAPI)(nil).PullRequests))
}

// RateLimits mocks base method.
func (m *MockClientAPI) RateLimits(ctx context.Context) (*github.RateLimits, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RateLimits", ctx)
	ret0, _ := ret[0].(*github.RateLimits)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RateLimits indicates an expected call of RateLimits.
func (mr *MockClientAPIMockRecorder) RateLimits(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RateLimits", reflect.TypeOf((*MockClientAPI)(nil).RateLimits), ctx)
}

// Reactions mocks base method.
func (m *MockClientAPI) Reactions() gogithubmockable.ReactionsService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reactions")
	ret0, _ := ret[0].(gogithubmockable.ReactionsService)
	return ret0
}

// Reactions indicates an expected call of Reactions.
func (mr *MockClientAPIMockRecorder) Reactions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reactions", reflect.TypeOf((*MockClientAPI)(nil).Reactions))
}

// Repositories mocks base method.
func (m *MockClientAPI) Repositories() gogithubmockable.RepositoriesService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Repositories")
	ret0, _ := ret[0].(gogithubmockable.RepositoriesService)
	return ret0
}

// Repositories indicates an expected call of Repositories.
func (mr *MockClientAPIMockRecorder) Repositories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Repositories", reflect.TypeOf((*MockClientAPI)(nil).Repositories))
}

// SCIM mocks base method.
func (m *MockClientAPI) SCIM() gogithubmockable.SCIMService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SCIM")
	ret0, _ := ret[0].(gogithubmockable.SCIMService)
	return ret0
}

// SCIM indicates an expected call of SCIM.
func (mr *MockClientAPIMockRecorder) SCIM() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SCIM", reflect.TypeOf((*MockClientAPI)(nil).SCIM))
}

// Search mocks base method.
func (m *MockClientAPI) Search() gogithubmockable.SearchService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search")
	ret0, _ := ret[0].(gogithubmockable.SearchService)
	return ret0
}

// Search indicates an expected call of Search.
func (mr *MockClientAPIMockRecorder) Search() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockClientAPI)(nil).Search))
}

// SecretScanning mocks base method.
func (m *MockClientAPI) SecretScanning() gogithubmockable.SecretScanningService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretScanning")
	ret0, _ := ret[0].(gogithubmockable.SecretScanningService)
	return ret0
}

// SecretScanning indicates an expected call of SecretScanning.
func (mr *MockClientAPIMockRecorder) SecretScanning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretScanning", reflect.TypeOf((*MockClientAPI)(nil).SecretScanning))
}

// SetBaseURL mocks base method.
func (m *MockClientAPI) SetBaseURL(arg0 *url.URL) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBaseURL", arg0)
}

// SetBaseURL indicates an expected call of SetBaseURL.
func (mr *MockClientAPIMockRecorder) SetBaseURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBaseURL", reflect.TypeOf((*MockClientAPI)(nil).SetBaseURL), arg0)
}

// SetUploadURL mocks base method.
func (m *MockClientAPI) SetUploadURL(arg0 *url.URL) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUploadURL", arg0)
}

// SetUploadURL indicates an expected call of SetUploadURL.
func (mr *MockClientAPIMockRecorder) SetUploadURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUploadURL", reflect.TypeOf((*MockClientAPI)(nil).SetUploadURL), arg0)
}

// SetUserAgent mocks base method.
func (m *MockClientAPI) SetUserAgent(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUserAgent", arg0)
}

// SetUserAgent indicates an expected call of SetUserAgent.
func (mr *MockClientAPIMockRecorder) SetUserAgent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserAgent", reflect.TypeOf((*MockClientAPI)(nil).SetUserAgent), arg0)
}

// Teams mocks base method.
func (m *MockClientAPI) Teams() gogithubmockable.TeamsService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Teams")
	ret0, _ := ret[0].(gogithubmockable.TeamsService)
	return ret0
}

// Teams indicates an expected call of Teams.
func (mr *MockClientAPIMockRecorder) Teams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Teams", reflect.TypeOf((*MockClientAPI)(nil).Teams))
}

// Users mocks base method.
func (m *MockClientAPI) Users() gogithubmockable.UsersService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users")
	ret0, _ := ret[0].(gogithubmockable.UsersService)
	return ret0
}

// Users indicates an expected call of Users.
func (mr *MockClientAPIMockRecorder) Users() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockClientAPI)(nil).Users))
}

// Zen mocks base method.
func (m *MockClientAPI) Zen(ctx context.Context) (string, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Zen", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Zen indicates an expected call of Zen.
func (mr *MockClientAPIMockRecorder) Zen(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Zen", reflect.TypeOf((*MockClientAPI)(nil).Zen), ctx)
}

// MockActionsService is a mock of ActionsService interface.
type MockActionsService struct {
	ctrl     *gomock.Controller
	recorder *MockActionsServiceMockRecorder
}

// MockActionsServiceMockRecorder is the mock recorder for MockActionsService.
type MockActionsServiceMockRecorder struct {
	mock *MockActionsService
}

// NewMockActionsService creates a new mock instance.
func NewMockActionsService(ctrl *gomock.Controller) *MockActionsService {
	mock := &MockActionsService{ctrl: ctrl}
	mock.recorder = &MockActionsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActionsService) EXPECT() *MockActionsServiceMockRecorder {
	return m.recorder
}

// AddEnabledReposInOrg mocks base method.
func (m *MockActionsService) AddEnabledReposInOrg(ctx context.Context, owner string, repositoryID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEnabledReposInOrg", ctx, owner, repositoryID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddEnabledReposInOrg indicates an expected call of AddEnabledReposInOrg.
func (mr *MockActionsServiceMockRecorder) AddEnabledReposInOrg(ctx, owner, repositoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEnabledReposInOrg", reflect.TypeOf((*MockActionsService)(nil).AddEnabledReposInOrg), ctx, owner, repositoryID)
}

// AddRepositoryAccessRunnerGroup mocks base method.
func (m *MockActionsService) AddRepositoryAccessRunnerGroup(ctx context.Context, org string, groupID, repoID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRepositoryAccessRunnerGroup", ctx, org, groupID, repoID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRepositoryAccessRunnerGroup indicates an expected call of AddRepositoryAccessRunnerGroup.
func (mr *MockActionsServiceMockRecorder) AddRepositoryAccessRunnerGroup(ctx, org, groupID, repoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRepositoryAccessRunnerGroup", reflect.TypeOf((*MockActionsService)(nil).AddRepositoryAccessRunnerGroup), ctx, org, groupID, repoID)
}

// AddRunnerGroupRunners mocks base method.
func (m *MockActionsService) AddRunnerGroupRunners(ctx context.Context, org string, groupID, runnerID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRunnerGroupRunners", ctx, org, groupID, runnerID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRunnerGroupRunners indicates an expected call of AddRunnerGroupRunners.
func (mr *MockActionsServiceMockRecorder) AddRunnerGroupRunners(ctx, org, groupID, runnerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRunnerGroupRunners", reflect.TypeOf((*MockActionsService)(nil).AddRunnerGroupRunners), ctx, org, groupID, runnerID)
}

// AddSelectedRepoToOrgSecret mocks base method.
func (m *MockActionsService) AddSelectedRepoToOrgSecret(ctx context.Context, org, name string, repo *github.Repository) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSelectedRepoToOrgSecret", ctx, org, name, repo)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSelectedRepoToOrgSecret indicates an expected call of AddSelectedRepoToOrgSecret.
func (mr *MockActionsServiceMockRecorder) AddSelectedRepoToOrgSecret(ctx, org, name, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSelectedRepoToOrgSecret", reflect.TypeOf((*MockActionsService)(nil).AddSelectedRepoToOrgSecret), ctx, org, name, repo)
}

// CancelWorkflowRunByID mocks base method.
func (m *MockActionsService) CancelWorkflowRunByID(ctx context.Context, owner, repo string, runID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelWorkflowRunByID", ctx, owner, repo, runID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelWorkflowRunByID indicates an expected call of CancelWorkflowRunByID.
func (mr *MockActionsServiceMockRecorder) CancelWorkflowRunByID(ctx, owner, repo, runID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelWorkflowRunByID", reflect.TypeOf((*MockActionsService)(nil).CancelWorkflowRunByID), ctx, owner, repo, runID)
}

// CreateOrUpdateEnvSecret mocks base method.
func (m *MockActionsService) CreateOrUpdateEnvSecret(ctx context.Context, repoID int, env string, eSecret *github.EncryptedSecret) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateEnvSecret", ctx, repoID, env, eSecret)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateEnvSecret indicates an expected call of CreateOrUpdateEnvSecret.
func (mr *MockActionsServiceMockRecorder) CreateOrUpdateEnvSecret(ctx, repoID, env, eSecret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateEnvSecret", reflect.TypeOf((*MockActionsService)(nil).CreateOrUpdateEnvSecret), ctx, repoID, env, eSecret)
}

// CreateOrUpdateOrgSecret mocks base method.
func (m *MockActionsService) CreateOrUpdateOrgSecret(ctx context.Context, org string, eSecret *github.EncryptedSecret) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateOrgSecret", ctx, org, eSecret)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateOrgSecret indicates an expected call of CreateOrUpdateOrgSecret.
func (mr *MockActionsServiceMockRecorder) CreateOrUpdateOrgSecret(ctx, org, eSecret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateOrgSecret", reflect.TypeOf((*MockActionsService)(nil).CreateOrUpdateOrgSecret), ctx, org, eSecret)
}

// CreateOrUpdateRepoSecret mocks base method.
func (m *MockActionsService) CreateOrUpdateRepoSecret(ctx context.Context, owner, repo string, eSecret *github.EncryptedSecret) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateRepoSecret", ctx, owner, repo, eSecret)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateRepoSecret indicates an expected call of CreateOrUpdateRepoSecret.
func (mr *MockActionsServiceMockRecorder) CreateOrUpdateRepoSecret(ctx, owner, repo, eSecret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateRepoSecret", reflect.TypeOf((*MockActionsService)(nil).CreateOrUpdateRepoSecret), ctx, owner, repo, eSecret)
}

// CreateOrganizationRegistrationToken mocks base method.
func (m *MockActionsService) CreateOrganizationRegistrationToken(ctx context.Context, owner string) (*github.RegistrationToken, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganizationRegistrationToken", ctx, owner)
	ret0, _ := ret[0].(*github.RegistrationToken)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateOrganizationRegistrationToken indicates an expected call of CreateOrganizationRegistrationToken.
func (mr *MockActionsServiceMockRecorder) CreateOrganizationRegistrationToken(ctx, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationRegistrationToken", reflect.TypeOf((*MockActionsService)(nil).CreateOrganizationRegistrationToken), ctx, owner)
}

// CreateOrganizationRemoveToken mocks base method.
func (m *MockActionsService) CreateOrganizationRemoveToken(ctx context.Context, owner string) (*github.RemoveToken, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganizationRemoveToken", ctx, owner)
	ret0, _ := ret[0].(*github.RemoveToken)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateOrganizationRemoveToken indicates an expected call of CreateOrganizationRemoveToken.
func (mr *MockActionsServiceMockRecorder) CreateOrganizationRemoveToken(ctx, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationRemoveToken", reflect.TypeOf((*MockActionsService)(nil).CreateOrganizationRemoveToken), ctx, owner)
}

// CreateOrganizationRunnerGroup mocks base method.
func (m *MockActionsService) CreateOrganizationRunnerGroup(ctx context.Context, org string, createReq github.CreateRunnerGroupRequest) (*github.RunnerGroup, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganizationRunnerGroup", ctx, org, createReq)
	ret0, _ := ret[0].(*github.RunnerGroup)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateOrganizationRunnerGroup indicates an expected call of CreateOrganizationRunnerGroup.
func (mr *MockActionsServiceMockRecorder) CreateOrganizationRunnerGroup(ctx, org, createReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationRunnerGroup", reflect.TypeOf((*MockActionsService)(nil).CreateOrganizationRunnerGroup), ctx, org, createReq)
}

// CreateRegistrationToken mocks base method.
func (m *MockActionsService) CreateRegistrationToken(ctx context.Context, owner, repo string) (*github.RegistrationToken, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegistrationToken", ctx, owner, repo)
	ret0, _ := ret[0].(*github.RegistrationToken)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRegistrationToken indicates an expected call of CreateRegistrationToken.
func (mr *MockActionsServiceMockRecorder) CreateRegistrationToken(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistrationToken", reflect.TypeOf((*MockActionsService)(nil).CreateRegistrationToken), ctx, owner, repo)
}

// CreateRemoveToken mocks base method.
func (m *MockActionsService) CreateRemoveToken(ctx context.Context, owner, repo string) (*github.RemoveToken, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRemoveToken", ctx, owner, repo)
	ret0, _ := ret[0].(*github.RemoveToken)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRemoveToken indicates an expected call of CreateRemoveToken.
func (mr *MockActionsServiceMockRecorder) CreateRemoveToken(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRemoveToken", reflect.TypeOf((*MockActionsService)(nil).CreateRemoveToken), ctx, owner, repo)
}

// CreateWorkflowDispatchEventByFileName mocks base method.
func (m *MockActionsService) CreateWorkflowDispatchEventByFileName(ctx context.Context, owner, repo, workflowFileName string, event github.CreateWorkflowDispatchEventRequest) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflowDispatchEventByFileName", ctx, owner, repo, workflowFileName, event)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflowDispatchEventByFileName indicates an expected call of CreateWorkflowDispatchEventByFileName.
func (mr *MockActionsServiceMockRecorder) CreateWorkflowDispatchEventByFileName(ctx, owner, repo, workflowFileName, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowDispatchEventByFileName", reflect.TypeOf((*MockActionsService)(nil).CreateWorkflowDispatchEventByFileName), ctx, owner, repo, workflowFileName, event)
}

// CreateWorkflowDispatchEventByID mocks base method.
func (m *MockActionsService) CreateWorkflowDispatchEventByID(ctx context.Context, owner, repo string, workflowID int64, event github.CreateWorkflowDispatchEventRequest) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflowDispatchEventByID", ctx, owner, repo, workflowID, event)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflowDispatchEventByID indicates an expected call of CreateWorkflowDispatchEventByID.
func (mr *MockActionsServiceMockRecorder) CreateWorkflowDispatchEventByID(ctx, owner, repo, workflowID, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowDispatchEventByID", reflect.TypeOf((*MockActionsService)(nil).CreateWorkflowDispatchEventByID), ctx, owner, repo, workflowID, event)
}

// DeleteArtifact mocks base method.
func (m *MockActionsService) DeleteArtifact(ctx context.Context, owner, repo string, artifactID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArtifact", ctx, owner, repo, artifactID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteArtifact indicates an expected call of DeleteArtifact.
func (mr *MockActionsServiceMockRecorder) DeleteArtifact(ctx, owner, repo, artifactID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArtifact", reflect.TypeOf((*MockActionsService)(nil).DeleteArtifact), ctx, owner, repo, artifactID)
}

// DeleteEnvSecret mocks base method.
func (m *MockActionsService) DeleteEnvSecret(ctx context.Context, repoID int, env, secretName string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvSecret", ctx, repoID, env, secretName)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvSecret indicates an expected call of DeleteEnvSecret.
func (mr *MockActionsServiceMockRecorder) DeleteEnvSecret(ctx, repoID, env, secretName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvSecret", reflect.TypeOf((*MockActionsService)(nil).DeleteEnvSecret), ctx, repoID, env, secretName)
}

// DeleteOrgSecret mocks base method.
func (m *MockActionsService) DeleteOrgSecret(ctx context.Context, org, name string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrgSecret", ctx, org, name)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrgSecret indicates an expected call of DeleteOrgSecret.
func (mr *MockActionsServiceMockRecorder) DeleteOrgSecret(ctx, org, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrgSecret", reflect.TypeOf((*MockActionsService)(nil).DeleteOrgSecret), ctx, org, name)
}

// DeleteOrganizationRunnerGroup mocks base method.
func (m *MockActionsService) DeleteOrganizationRunnerGroup(ctx context.Context, org string, groupID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganizationRunnerGroup", ctx, org, groupID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrganizationRunnerGroup indicates an expected call of DeleteOrganizationRunnerGroup.
func (mr *MockActionsServiceMockRecorder) DeleteOrganizationRunnerGroup(ctx, org, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganizationRunnerGroup", reflect.TypeOf((*MockActionsService)(nil).DeleteOrganizationRunnerGroup), ctx, org, groupID)
}

// DeleteRepoSecret mocks base method.
func (m *MockActionsService) DeleteRepoSecret(ctx context.Context, owner, repo, name string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepoSecret", ctx, owner, repo, name)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRepoSecret indicates an expected call of DeleteRepoSecret.
func (mr *MockActionsServiceMockRecorder) DeleteRepoSecret(ctx, owner, repo, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepoSecret", reflect.TypeOf((*MockActionsService)(nil).DeleteRepoSecret), ctx, owner, repo, name)
}

// DeleteWorkflowRun mocks base method.
func (m *MockActionsService) DeleteWorkflowRun(ctx context.Context, owner, repo string, runID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkflowRun", ctx, owner, repo, runID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkflowRun indicates an expected call of DeleteWorkflowRun.
func (mr *MockActionsServiceMockRecorder) DeleteWorkflowRun(ctx, owner, repo, runID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflowRun", reflect.TypeOf((*MockActionsService)(nil).DeleteWorkflowRun), ctx, owner, repo, runID)
}

// DeleteWorkflowRunLogs mocks base method.
func (m *MockActionsService) DeleteWorkflowRunLogs(ctx context.Context, owner, repo string, runID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkflowRunLogs", ctx, owner, repo, runID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkflowRunLogs indicates an expected call of DeleteWorkflowRunLogs.
func (mr *MockActionsServiceMockRecorder) DeleteWorkflowRunLogs(ctx, owner, repo, runID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflowRunLogs", reflect.TypeOf((*MockActionsService)(nil).DeleteWorkflowRunLogs), ctx, owner, repo, runID)
}

// DisableWorkflowByFileName mocks base method.
func (m *MockActionsService) DisableWorkflowByFileName(ctx context.Context, owner, repo, workflowFileName string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableWorkflowByFileName", ctx, owner, repo, workflowFileName)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableWorkflowByFileName indicates an expected call of DisableWorkflowByFileName.
func (mr *MockActionsServiceMockRecorder) DisableWorkflowByFileName(ctx, owner, repo, workflowFileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableWorkflowByFileName", reflect.TypeOf((*MockActionsService)(nil).DisableWorkflowByFileName), ctx, owner, repo, workflowFileName)
}

// DisableWorkflowByID mocks base method.
func (m *MockActionsService) DisableWorkflowByID(ctx context.Context, owner, repo string, workflowID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableWorkflowByID", ctx, owner, repo, workflowID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableWorkflowByID indicates an expected call of DisableWorkflowByID.
func (mr *MockActionsServiceMockRecorder) DisableWorkflowByID(ctx, owner, repo, workflowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableWorkflowByID", reflect.TypeOf((*MockActionsService)(nil).DisableWorkflowByID), ctx, owner, repo, workflowID)
}

// DownloadArtifact mocks base method.
func (m *MockActionsService) DownloadArtifact(ctx context.Context, owner, repo string, artifactID int64, followRedirects bool) (*url.URL, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadArtifact", ctx, owner, repo, artifactID, followRedirects)
	ret0, _ := ret[0].(*url.URL)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DownloadArtifact indicates an expected call of DownloadArtifact.
func (mr *MockActionsServiceMockRecorder) DownloadArtifact(ctx, owner, repo, artifactID, followRedirects interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadArtifact", reflect.TypeOf((*MockActionsService)(nil).DownloadArtifact), ctx, owner, repo, artifactID, followRedirects)
}

// EnableWorkflowByFileName mocks base method.
func (m *MockActionsService) EnableWorkflowByFileName(ctx context.Context, owner, repo, workflowFileName string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableWorkflowByFileName", ctx, owner, repo, workflowFileName)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableWorkflowByFileName indicates an expected call of EnableWorkflowByFileName.
func (mr *MockActionsServiceMockRecorder) EnableWorkflowByFileName(ctx, owner, repo, workflowFileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableWorkflowByFileName", reflect.TypeOf((*MockActionsService)(nil).EnableWorkflowByFileName), ctx, owner, repo, workflowFileName)
}

// EnableWorkflowByID mocks base method.
func (m *MockActionsService) EnableWorkflowByID(ctx context.Context, owner, repo string, workflowID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableWorkflowByID", ctx, owner, repo, workflowID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableWorkflowByID indicates an expected call of EnableWorkflowByID.
func (mr *MockActionsServiceMockRecorder) EnableWorkflowByID(ctx, owner, repo, workflowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableWorkflowByID", reflect.TypeOf((*MockActionsService)(nil).EnableWorkflowByID), ctx, owner, repo, workflowID)
}

// GetArtifact mocks base method.
func (m *MockActionsService) GetArtifact(ctx context.Context, owner, repo string, artifactID int64) (*github.Artifact, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifact", ctx, owner, repo, artifactID)
	ret0, _ := ret[0].(*github.Artifact)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetArtifact indicates an expected call of GetArtifact.
func (mr *MockActionsServiceMockRecorder) GetArtifact(ctx, owner, repo, artifactID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifact", reflect.TypeOf((*MockActionsService)(nil).GetArtifact), ctx, owner, repo, artifactID)
}

// GetEnvPublicKey mocks base method.
func (m *MockActionsService) GetEnvPublicKey(ctx context.Context, repoID int, env string) (*github.PublicKey, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvPublicKey", ctx, repoID, env)
	ret0, _ := ret[0].(*github.PublicKey)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEnvPublicKey indicates an expected call of GetEnvPublicKey.
func (mr *MockActionsServiceMockRecorder) GetEnvPublicKey(ctx, repoID, env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvPublicKey", reflect.TypeOf((*MockActionsService)(nil).GetEnvPublicKey), ctx, repoID, env)
}

// GetEnvSecret mocks base method.
func (m *MockActionsService) GetEnvSecret(ctx context.Context, repoID int, env, secretName string) (*github.Secret, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvSecret", ctx, repoID, env, secretName)
	ret0, _ := ret[0].(*github.Secret)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEnvSecret indicates an expected call of GetEnvSecret.
func (mr *MockActionsServiceMockRecorder) GetEnvSecret(ctx, repoID, env, secretName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvSecret", reflect.TypeOf((*MockActionsService)(nil).GetEnvSecret), ctx, repoID, env, secretName)
}

// GetOrgPublicKey mocks base method.
func (m *MockActionsService) GetOrgPublicKey(ctx context.Context, org string) (*github.PublicKey, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrgPublicKey", ctx, org)
	ret0, _ := ret[0].(*github.PublicKey)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrgPublicKey indicates an expected call of GetOrgPublicKey.
func (mr *MockActionsServiceMockRecorder) GetOrgPublicKey(ctx, org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgPublicKey", reflect.TypeOf((*MockActionsService)(nil).GetOrgPublicKey), ctx, org)
}

// GetOrgSecret mocks base method.
func (m *MockActionsService) GetOrgSecret(ctx context.Context, org, name string) (*github.Secret, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrgSecret", ctx, org, name)
	ret0, _ := ret[0].(*github.Secret)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrgSecret indicates an expected call of GetOrgSecret.
func (mr *MockActionsServiceMockRecorder) GetOrgSecret(ctx, org, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgSecret", reflect.TypeOf((*MockActionsService)(nil).GetOrgSecret), ctx, org, name)
}

// GetOrganizationRunner mocks base method.
func (m *MockActionsService) GetOrganizationRunner(ctx context.Context, owner string, runnerID int64) (*github.Runner, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationRunner", ctx, owner, runnerID)
	ret0, _ := ret[0].(*github.Runner)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrganizationRunner indicates an expected call of GetOrganizationRunner.
func (mr *MockActionsServiceMockRecorder) GetOrganizationRunner(ctx, owner, runnerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationRunner", reflect.TypeOf((*MockActionsService)(nil).GetOrganizationRunner), ctx, owner, runnerID)
}

// GetOrganizationRunnerGroup mocks base method.
func (m *MockActionsService) GetOrganizationRunnerGroup(ctx context.Context, org string, groupID int64) (*github.RunnerGroup, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationRunnerGroup", ctx, org, groupID)
	ret0, _ := ret[0].(*github.RunnerGroup)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrganizationRunnerGroup indicates an expected call of GetOrganizationRunnerGroup.
func (mr *MockActionsServiceMockRecorder) GetOrganizationRunnerGroup(ctx, org, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationRunnerGroup", reflect.TypeOf((*MockActionsService)(nil).GetOrganizationRunnerGroup), ctx, org, groupID)
}

// GetRepoPublicKey mocks base method.
func (m *MockActionsService) GetRepoPublicKey(ctx context.Context, owner, repo string) (*github.PublicKey, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoPublicKey", ctx, owner, repo)
	ret0, _ := ret[0].(*github.PublicKey)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRepoPublicKey indicates an expected call of GetRepoPublicKey.
func (mr *MockActionsServiceMockRecorder) GetRepoPublicKey(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoPublicKey", reflect.TypeOf((*MockActionsService)(nil).GetRepoPublicKey), ctx, owner, repo)
}

// GetRepoSecret mocks base method.
func (m *MockActionsService) GetRepoSecret(ctx context.Context, owner, repo, name string) (*github.Secret, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoSecret", ctx, owner, repo, name)
	ret0, _ := ret[0].(*github.Secret)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRepoSecret indicates an expected call of GetRepoSecret.
func (mr *MockActionsServiceMockRecorder) GetRepoSecret(ctx, owner, repo, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoSecret", reflect.TypeOf((*MockActionsService)(nil).GetRepoSecret), ctx, owner, repo, name)
}

// GetRunner mocks base method.
func (m *MockActionsService) GetRunner(ctx context.Context, owner, repo string, runnerID int64) (*github.Runner, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunner", ctx, owner, repo, runnerID)
	ret0, _ := ret[0].(*github.Runner)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRunner indicates an expected call of GetRunner.
func (mr *MockActionsServiceMockRecorder) GetRunner(ctx, owner, repo, runnerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunner", reflect.TypeOf((*MockActionsService)(nil).GetRunner), ctx, owner, repo, runnerID)
}

// GetWorkflowByFileName mocks base method.
func (m *MockActionsService) GetWorkflowByFileName(ctx context.Context, owner, repo, workflowFileName string) (*github.Workflow, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowByFileName", ctx, owner, repo, workflowFileName)
	ret0, _ := ret[0].(*github.Workflow)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWorkflowByFileName indicates an expected call of GetWorkflowByFileName.
func (mr *MockActionsServiceMockRecorder) GetWorkflowByFileName(ctx, owner, repo, workflowFileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowByFileName", reflect.TypeOf((*MockActionsService)(nil).GetWorkflowByFileName), ctx, owner, repo, workflowFileName)
}

// GetWorkflowByID mocks base method.
func (m *MockActionsService) GetWorkflowByID(ctx context.Context, owner, repo string, workflowID int64) (*github.Workflow, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowByID", ctx, owner, repo, workflowID)
	ret0, _ := ret[0].(*github.Workflow)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWorkflowByID indicates an expected call of GetWorkflowByID.
func (mr *MockActionsServiceMockRecorder) GetWorkflowByID(ctx, owner, repo, workflowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowByID", reflect.TypeOf((*MockActionsService)(nil).GetWorkflowByID), ctx, owner, repo, workflowID)
}

// GetWorkflowJobByID mocks base method.
func (m *MockActionsService) GetWorkflowJobByID(ctx context.Context, owner, repo string, jobID int64) (*github.WorkflowJob, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowJobByID", ctx, owner, repo, jobID)
	ret0, _ := ret[0].(*github.WorkflowJob)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWorkflowJobByID indicates an expected call of GetWorkflowJobByID.
func (mr *MockActionsServiceMockRecorder) GetWorkflowJobByID(ctx, owner, repo, jobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowJobByID", reflect.TypeOf((*MockActionsService)(nil).GetWorkflowJobByID), ctx, owner, repo, jobID)
}

// GetWorkflowJobLogs mocks base method.
func (m *MockActionsService) GetWorkflowJobLogs(ctx context.Context, owner, repo string, jobID int64, followRedirects bool) (*url.URL, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowJobLogs", ctx, owner, repo, jobID, followRedirects)
	ret0, _ := ret[0].(*url.URL)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWorkflowJobLogs indicates an expected call of GetWorkflowJobLogs.
func (mr *MockActionsServiceMockRecorder) GetWorkflowJobLogs(ctx, owner, repo, jobID, followRedirects interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowJobLogs", reflect.TypeOf((*MockActionsService)(nil).GetWorkflowJobLogs), ctx, owner, repo, jobID, followRedirects)
}

// GetWorkflowRunAttempt mocks base method.
func (m *MockActionsService) GetWorkflowRunAttempt(ctx context.Context, owner, repo string, runID int64, attemptNumber int, opts *github.WorkflowRunAttemptOptions) (*github.WorkflowRun, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowRunAttempt", ctx, owner, repo, runID, attemptNumber, opts)
	ret0, _ := ret[0].(*github.WorkflowRun)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWorkflowRunAttempt indicates an expected call of GetWorkflowRunAttempt.
func (mr *MockActionsServiceMockRecorder) GetWorkflowRunAttempt(ctx, owner, repo, runID, attemptNumber, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowRunAttempt", reflect.TypeOf((*MockActionsService)(nil).GetWorkflowRunAttempt), ctx, owner, repo, runID, attemptNumber, opts)
}

// GetWorkflowRunByID mocks base method.
func (m *MockActionsService) GetWorkflowRunByID(ctx context.Context, owner, repo string, runID int64) (*github.WorkflowRun, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowRunByID", ctx, owner, repo, runID)
	ret0, _ := ret[0].(*github.WorkflowRun)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWorkflowRunByID indicates an expected call of GetWorkflowRunByID.
func (mr *MockActionsServiceMockRecorder) GetWorkflowRunByID(ctx, owner, repo, runID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowRunByID", reflect.TypeOf((*MockActionsService)(nil).GetWorkflowRunByID), ctx, owner, repo, runID)
}

// GetWorkflowRunLogs mocks base method.
func (m *MockActionsService) GetWorkflowRunLogs(ctx context.Context, owner, repo string, runID int64, followRedirects bool) (*url.URL, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowRunLogs", ctx, owner, repo, runID, followRedirects)
	ret0, _ := ret[0].(*url.URL)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWorkflowRunLogs indicates an expected call of GetWorkflowRunLogs.
func (mr *MockActionsServiceMockRecorder) GetWorkflowRunLogs(ctx, owner, repo, runID, followRedirects interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowRunLogs", reflect.TypeOf((*MockActionsService)(nil).GetWorkflowRunLogs), ctx, owner, repo, runID, followRedirects)
}

// GetWorkflowRunUsageByID mocks base method.
func (m *MockActionsService) GetWorkflowRunUsageByID(ctx context.Context, owner, repo string, runID int64) (*github.WorkflowRunUsage, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowRunUsageByID", ctx, owner, repo, runID)
	ret0, _ := ret[0].(*github.WorkflowRunUsage)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWorkflowRunUsageByID indicates an expected call of GetWorkflowRunUsageByID.
func (mr *MockActionsServiceMockRecorder) GetWorkflowRunUsageByID(ctx, owner, repo, runID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowRunUsageByID", reflect.TypeOf((*MockActionsService)(nil).GetWorkflowRunUsageByID), ctx, owner, repo, runID)
}

// GetWorkflowUsageByFileName mocks base method.
func (m *MockActionsService) GetWorkflowUsageByFileName(ctx context.Context, owner, repo, workflowFileName string) (*github.WorkflowUsage, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowUsageByFileName", ctx, owner, repo, workflowFileName)
	ret0, _ := ret[0].(*github.WorkflowUsage)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWorkflowUsageByFileName indicates an expected call of GetWorkflowUsageByFileName.
func (mr *MockActionsServiceMockRecorder) GetWorkflowUsageByFileName(ctx, owner, repo, workflowFileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowUsageByFileName", reflect.TypeOf((*MockActionsService)(nil).GetWorkflowUsageByFileName), ctx, owner, repo, workflowFileName)
}

// GetWorkflowUsageByID mocks base method.
func (m *MockActionsService) GetWorkflowUsageByID(ctx context.Context, owner, repo string, workflowID int64) (*github.WorkflowUsage, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowUsageByID", ctx, owner, repo, workflowID)
	ret0, _ := ret[0].(*github.WorkflowUsage)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWorkflowUsageByID indicates an expected call of GetWorkflowUsageByID.
func (mr *MockActionsServiceMockRecorder) GetWorkflowUsageByID(ctx, owner, repo, workflowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowUsageByID", reflect.TypeOf((*MockActionsService)(nil).GetWorkflowUsageByID), ctx, owner, repo, workflowID)
}

// ListArtifacts mocks base method.
func (m *MockActionsService) ListArtifacts(ctx context.Context, owner, repo string, opts *github.ListOptions) (*github.ArtifactList, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArtifacts", ctx, owner, repo, opts)
	ret0, _ := ret[0].(*github.ArtifactList)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListArtifacts indicates an expected call of ListArtifacts.
func (mr *MockActionsServiceMockRecorder) ListArtifacts(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArtifacts", reflect.TypeOf((*MockActionsService)(nil).ListArtifacts), ctx, owner, repo, opts)
}

// ListEnabledReposInOrg mocks base method.
func (m *MockActionsService) ListEnabledReposInOrg(ctx context.Context, owner string, opts *github.ListOptions) (*github.ActionsEnabledOnOrgRepos, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnabledReposInOrg", ctx, owner, opts)
	ret0, _ := ret[0].(*github.ActionsEnabledOnOrgRepos)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEnabledReposInOrg indicates an expected call of ListEnabledReposInOrg.
func (mr *MockActionsServiceMockRecorder) ListEnabledReposInOrg(ctx, owner, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnabledReposInOrg", reflect.TypeOf((*MockActionsService)(nil).ListEnabledReposInOrg), ctx, owner, opts)
}

// ListEnvSecrets mocks base method.
func (m *MockActionsService) ListEnvSecrets(ctx context.Context, repoID int, env string, opts *github.ListOptions) (*github.Secrets, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvSecrets", ctx, repoID, env, opts)
	ret0, _ := ret[0].(*github.Secrets)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEnvSecrets indicates an expected call of ListEnvSecrets.
func (mr *MockActionsServiceMockRecorder) ListEnvSecrets(ctx, repoID, env, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvSecrets", reflect.TypeOf((*MockActionsService)(nil).ListEnvSecrets), ctx, repoID, env, opts)
}

// ListOrgSecrets mocks base method.
func (m *MockActionsService) ListOrgSecrets(ctx context.Context, org string, opts *github.ListOptions) (*github.Secrets, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrgSecrets", ctx, org, opts)
	ret0, _ := ret[0].(*github.Secrets)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrgSecrets indicates an expected call of ListOrgSecrets.
func (mr *MockActionsServiceMockRecorder) ListOrgSecrets(ctx, org, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrgSecrets", reflect.TypeOf((*MockActionsService)(nil).ListOrgSecrets), ctx, org, opts)
}

// ListOrganizationRunnerApplicationDownloads mocks base method.
func (m *MockActionsService) ListOrganizationRunnerApplicationDownloads(ctx context.Context, owner string) ([]*github.RunnerApplicationDownload, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationRunnerApplicationDownloads", ctx, owner)
	ret0, _ := ret[0].([]*github.RunnerApplicationDownload)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrganizationRunnerApplicationDownloads indicates an expected call of ListOrganizationRunnerApplicationDownloads.
func (mr *MockActionsServiceMockRecorder) ListOrganizationRunnerApplicationDownloads(ctx, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationRunnerApplicationDownloads", reflect.TypeOf((*MockActionsService)(nil).ListOrganizationRunnerApplicationDownloads), ctx, owner)
}

// ListOrganizationRunnerGroups mocks base method.
func (m *MockActionsService) ListOrganizationRunnerGroups(ctx context.Context, org string, opts *github.ListOrgRunnerGroupOptions) (*github.RunnerGroups, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationRunnerGroups", ctx, org, opts)
	ret0, _ := ret[0].(*github.RunnerGroups)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrganizationRunnerGroups indicates an expected call of ListOrganizationRunnerGroups.
func (mr *MockActionsServiceMockRecorder) ListOrganizationRunnerGroups(ctx, org, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationRunnerGroups", reflect.TypeOf((*MockActionsService)(nil).ListOrganizationRunnerGroups), ctx, org, opts)
}

// ListOrganizationRunners mocks base method.
func (m *MockActionsService) ListOrganizationRunners(ctx context.Context, owner string, opts *github.ListOptions) (*github.Runners, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationRunners", ctx, owner, opts)
	ret0, _ := ret[0].(*github.Runners)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrganizationRunners indicates an expected call of ListOrganizationRunners.
func (mr *MockActionsServiceMockRecorder) ListOrganizationRunners(ctx, owner, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationRunners", reflect.TypeOf((*MockActionsService)(nil).ListOrganizationRunners), ctx, owner, opts)
}

// ListRepoSecrets mocks base method.
func (m *MockActionsService) ListRepoSecrets(ctx context.Context, owner, repo string, opts *github.ListOptions) (*github.Secrets, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepoSecrets", ctx, owner, repo, opts)
	ret0, _ := ret[0].(*github.Secrets)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRepoSecrets indicates an expected call of ListRepoSecrets.
func (mr *MockActionsServiceMockRecorder) ListRepoSecrets(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepoSecrets", reflect.TypeOf((*MockActionsService)(nil).ListRepoSecrets), ctx, owner, repo, opts)
}

// ListRepositoryAccessRunnerGroup mocks base method.
func (m *MockActionsService) ListRepositoryAccessRunnerGroup(ctx context.Context, org string, groupID int64, opts *github.ListOptions) (*github.ListRepositories, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoryAccessRunnerGroup", ctx, org, groupID, opts)
	ret0, _ := ret[0].(*github.ListRepositories)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRepositoryAccessRunnerGroup indicates an expected call of ListRepositoryAccessRunnerGroup.
func (mr *MockActionsServiceMockRecorder) ListRepositoryAccessRunnerGroup(ctx, org, groupID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoryAccessRunnerGroup", reflect.TypeOf((*MockActionsService)(nil).ListRepositoryAccessRunnerGroup), ctx, org, groupID, opts)
}

// ListRepositoryWorkflowRuns mocks base method.
func (m *MockActionsService) ListRepositoryWorkflowRuns(ctx context.Context, owner, repo string, opts *github.ListWorkflowRunsOptions) (*github.WorkflowRuns, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoryWorkflowRuns", ctx, owner, repo, opts)
	ret0, _ := ret[0].(*github.WorkflowRuns)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRepositoryWorkflowRuns indicates an expected call of ListRepositoryWorkflowRuns.
func (mr *MockActionsServiceMockRecorder) ListRepositoryWorkflowRuns(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoryWorkflowRuns", reflect.TypeOf((*MockActionsService)(nil).ListRepositoryWorkflowRuns), ctx, owner, repo, opts)
}

// ListRunnerApplicationDownloads mocks base method.
func (m *MockActionsService) ListRunnerApplicationDownloads(ctx context.Context, owner, repo string) ([]*github.RunnerApplicationDownload, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunnerApplicationDownloads", ctx, owner, repo)
	ret0, _ := ret[0].([]*github.RunnerApplicationDownload)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRunnerApplicationDownloads indicates an expected call of ListRunnerApplicationDownloads.
func (mr *MockActionsServiceMockRecorder) ListRunnerApplicationDownloads(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunnerApplicationDownloads", reflect.TypeOf((*MockActionsService)(nil).ListRunnerApplicationDownloads), ctx, owner, repo)
}

// ListRunnerGroupRunners mocks base method.
func (m *MockActionsService) ListRunnerGroupRunners(ctx context.Context, org string, groupID int64, opts *github.ListOptions) (*github.Runners, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunnerGroupRunners", ctx, org, groupID, opts)
	ret0, _ := ret[0].(*github.Runners)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRunnerGroupRunners indicates an expected call of ListRunnerGroupRunners.
func (mr *MockActionsServiceMockRecorder) ListRunnerGroupRunners(ctx, org, groupID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunnerGroupRunners", reflect.TypeOf((*MockActionsService)(nil).ListRunnerGroupRunners), ctx, org, groupID, opts)
}

// ListRunners mocks base method.
func (m *MockActionsService) ListRunners(ctx context.Context, owner, repo string, opts *github.ListOptions) (*github.Runners, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunners", ctx, owner, repo, opts)
	ret0, _ := ret[0].(*github.Runners)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRunners indicates an expected call of ListRunners.
func (mr *MockActionsServiceMockRecorder) ListRunners(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunners", reflect.TypeOf((*MockActionsService)(nil).ListRunners), ctx, owner, repo, opts)
}

// ListSelectedReposForOrgSecret mocks base method.
func (m *MockActionsService) ListSelectedReposForOrgSecret(ctx context.Context, org, name string, opts *github.ListOptions) (*github.SelectedReposList, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSelectedReposForOrgSecret", ctx, org, name, opts)
	ret0, _ := ret[0].(*github.SelectedReposList)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSelectedReposForOrgSecret indicates an expected call of ListSelectedReposForOrgSecret.
func (mr *MockActionsServiceMockRecorder) ListSelectedReposForOrgSecret(ctx, org, name, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSelectedReposForOrgSecret", reflect.TypeOf((*MockActionsService)(nil).ListSelectedReposForOrgSecret), ctx, org, name, opts)
}

// ListWorkflowJobs mocks base method.
func (m *MockActionsService) ListWorkflowJobs(ctx context.Context, owner, repo string, runID int64, opts *github.ListWorkflowJobsOptions) (*github.Jobs, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflowJobs", ctx, owner, repo, runID, opts)
	ret0, _ := ret[0].(*github.Jobs)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListWorkflowJobs indicates an expected call of ListWorkflowJobs.
func (mr *MockActionsServiceMockRecorder) ListWorkflowJobs(ctx, owner, repo, runID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowJobs", reflect.TypeOf((*MockActionsService)(nil).ListWorkflowJobs), ctx, owner, repo, runID, opts)
}

// ListWorkflowRunArtifacts mocks base method.
func (m *MockActionsService) ListWorkflowRunArtifacts(ctx context.Context, owner, repo string, runID int64, opts *github.ListOptions) (*github.ArtifactList, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflowRunArtifacts", ctx, owner, repo, runID, opts)
	ret0, _ := ret[0].(*github.ArtifactList)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListWorkflowRunArtifacts indicates an expected call of ListWorkflowRunArtifacts.
func (mr *MockActionsServiceMockRecorder) ListWorkflowRunArtifacts(ctx, owner, repo, runID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowRunArtifacts", reflect.TypeOf((*MockActionsService)(nil).ListWorkflowRunArtifacts), ctx, owner, repo, runID, opts)
}

// ListWorkflowRunsByFileName mocks base method.
func (m *MockActionsService) ListWorkflowRunsByFileName(ctx context.Context, owner, repo, workflowFileName string, opts *github.ListWorkflowRunsOptions) (*github.WorkflowRuns, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflowRunsByFileName", ctx, owner, repo, workflowFileName, opts)
	ret0, _ := ret[0].(*github.WorkflowRuns)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListWorkflowRunsByFileName indicates an expected call of ListWorkflowRunsByFileName.
func (mr *MockActionsServiceMockRecorder) ListWorkflowRunsByFileName(ctx, owner, repo, workflowFileName, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowRunsByFileName", reflect.TypeOf((*MockActionsService)(nil).ListWorkflowRunsByFileName), ctx, owner, repo, workflowFileName, opts)
}

// ListWorkflowRunsByID mocks base method.
func (m *MockActionsService) ListWorkflowRunsByID(ctx context.Context, owner, repo string, workflowID int64, opts *github.ListWorkflowRunsOptions) (*github.WorkflowRuns, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflowRunsByID", ctx, owner, repo, workflowID, opts)
	ret0, _ := ret[0].(*github.WorkflowRuns)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListWorkflowRunsByID indicates an expected call of ListWorkflowRunsByID.
func (mr *MockActionsServiceMockRecorder) ListWorkflowRunsByID(ctx, owner, repo, workflowID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowRunsByID", reflect.TypeOf((*MockActionsService)(nil).ListWorkflowRunsByID), ctx, owner, repo, workflowID, opts)
}

// ListWorkflows mocks base method.
func (m *MockActionsService) ListWorkflows(ctx context.Context, owner, repo string, opts *github.ListOptions) (*github.Workflows, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflows", ctx, owner, repo, opts)
	ret0, _ := ret[0].(*github.Workflows)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListWorkflows indicates an expected call of ListWorkflows.
func (mr *MockActionsServiceMockRecorder) ListWorkflows(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflows", reflect.TypeOf((*MockActionsService)(nil).ListWorkflows), ctx, owner, repo, opts)
}

// PendingDeployments mocks base method.
func (m *MockActionsService) PendingDeployments(ctx context.Context, owner, repo string, runID int64, request *github.PendingDeploymentsRequest) ([]*github.Deployment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingDeployments", ctx, owner, repo, runID, request)
	ret0, _ := ret[0].([]*github.Deployment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PendingDeployments indicates an expected call of PendingDeployments.
func (mr *MockActionsServiceMockRecorder) PendingDeployments(ctx, owner, repo, runID, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingDeployments", reflect.TypeOf((*MockActionsService)(nil).PendingDeployments), ctx, owner, repo, runID, request)
}

// RemoveEnabledRepoInOrg mocks base method.
func (m *MockActionsService) RemoveEnabledRepoInOrg(ctx context.Context, owner string, repositoryID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveEnabledRepoInOrg", ctx, owner, repositoryID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveEnabledRepoInOrg indicates an expected call of RemoveEnabledRepoInOrg.
func (mr *MockActionsServiceMockRecorder) RemoveEnabledRepoInOrg(ctx, owner, repositoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEnabledRepoInOrg", reflect.TypeOf((*MockActionsService)(nil).RemoveEnabledRepoInOrg), ctx, owner, repositoryID)
}

// RemoveOrganizationRunner mocks base method.
func (m *MockActionsService) RemoveOrganizationRunner(ctx context.Context, owner string, runnerID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOrganizationRunner", ctx, owner, runnerID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveOrganizationRunner indicates an expected call of RemoveOrganizationRunner.
func (mr *MockActionsServiceMockRecorder) RemoveOrganizationRunner(ctx, owner, runnerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOrganizationRunner", reflect.TypeOf((*MockActionsService)(nil).RemoveOrganizationRunner), ctx, owner, runnerID)
}

// RemoveRepositoryAccessRunnerGroup mocks base method.
func (m *MockActionsService) RemoveRepositoryAccessRunnerGroup(ctx context.Context, org string, groupID, repoID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRepositoryAccessRunnerGroup", ctx, org, groupID, repoID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRepositoryAccessRunnerGroup indicates an expected call of RemoveRepositoryAccessRunnerGroup.
func (mr *MockActionsServiceMockRecorder) RemoveRepositoryAccessRunnerGroup(ctx, org, groupID, repoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRepositoryAccessRunnerGroup", reflect.TypeOf((*MockActionsService)(nil).RemoveRepositoryAccessRunnerGroup), ctx, org, groupID, repoID)
}

// RemoveRunner mocks base method.
func (m *MockActionsService) RemoveRunner(ctx context.Context, owner, repo string, runnerID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRunner", ctx, owner, repo, runnerID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRunner indicates an expected call of RemoveRunner.
func (mr *MockActionsServiceMockRecorder) RemoveRunner(ctx, owner, repo, runnerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRunner", reflect.TypeOf((*MockActionsService)(nil).RemoveRunner), ctx, owner, repo, runnerID)
}

// RemoveRunnerGroupRunners mocks base method.
func (m *MockActionsService) RemoveRunnerGroupRunners(ctx context.Context, org string, groupID, runnerID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRunnerGroupRunners", ctx, org, groupID, runnerID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRunnerGroupRunners indicates an expected call of RemoveRunnerGroupRunners.
func (mr *MockActionsServiceMockRecorder) RemoveRunnerGroupRunners(ctx, org, groupID, runnerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRunnerGroupRunners", reflect.TypeOf((*MockActionsService)(nil).RemoveRunnerGroupRunners), ctx, org, groupID, runnerID)
}

// RemoveSelectedRepoFromOrgSecret mocks base method.
func (m *MockActionsService) RemoveSelectedRepoFromOrgSecret(ctx context.Context, org, name string, repo *github.Repository) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSelectedRepoFromOrgSecret", ctx, org, name, repo)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveSelectedRepoFromOrgSecret indicates an expected call of RemoveSelectedRepoFromOrgSecret.
func (mr *MockActionsServiceMockRecorder) RemoveSelectedRepoFromOrgSecret(ctx, org, name, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSelectedRepoFromOrgSecret", reflect.TypeOf((*MockActionsService)(nil).RemoveSelectedRepoFromOrgSecret), ctx, org, name, repo)
}

// RerunFailedJobsByID mocks base method.
func (m *MockActionsService) RerunFailedJobsByID(ctx context.Context, owner, repo string, runID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RerunFailedJobsByID", ctx, owner, repo, runID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RerunFailedJobsByID indicates an expected call of RerunFailedJobsByID.
func (mr *MockActionsServiceMockRecorder) RerunFailedJobsByID(ctx, owner, repo, runID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RerunFailedJobsByID", reflect.TypeOf((*MockActionsService)(nil).RerunFailedJobsByID), ctx, owner, repo, runID)
}

// RerunJobByID mocks base method.
func (m *MockActionsService) RerunJobByID(ctx context.Context, owner, repo string, jobID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RerunJobByID", ctx, owner, repo, jobID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RerunJobByID indicates an expected call of RerunJobByID.
func (mr *MockActionsServiceMockRecorder) RerunJobByID(ctx, owner, repo, jobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RerunJobByID", reflect.TypeOf((*MockActionsService)(nil).RerunJobByID), ctx, owner, repo, jobID)
}

// RerunWorkflowByID mocks base method.
func (m *MockActionsService) RerunWorkflowByID(ctx context.Context, owner, repo string, runID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RerunWorkflowByID", ctx, owner, repo, runID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RerunWorkflowByID indicates an expected call of RerunWorkflowByID.
func (mr *MockActionsServiceMockRecorder) RerunWorkflowByID(ctx, owner, repo, runID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RerunWorkflowByID", reflect.TypeOf((*MockActionsService)(nil).RerunWorkflowByID), ctx, owner, repo, runID)
}

// SetEnabledReposInOrg mocks base method.
func (m *MockActionsService) SetEnabledReposInOrg(ctx context.Context, owner string, repositoryIDs []int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEnabledReposInOrg", ctx, owner, repositoryIDs)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetEnabledReposInOrg indicates an expected call of SetEnabledReposInOrg.
func (mr *MockActionsServiceMockRecorder) SetEnabledReposInOrg(ctx, owner, repositoryIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEnabledReposInOrg", reflect.TypeOf((*MockActionsService)(nil).SetEnabledReposInOrg), ctx, owner, repositoryIDs)
}

// SetRepositoryAccessRunnerGroup mocks base method.
func (m *MockActionsService) SetRepositoryAccessRunnerGroup(ctx context.Context, org string, groupID int64, ids github.SetRepoAccessRunnerGroupRequest) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRepositoryAccessRunnerGroup", ctx, org, groupID, ids)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRepositoryAccessRunnerGroup indicates an expected call of SetRepositoryAccessRunnerGroup.
func (mr *MockActionsServiceMockRecorder) SetRepositoryAccessRunnerGroup(ctx, org, groupID, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRepositoryAccessRunnerGroup", reflect.TypeOf((*MockActionsService)(nil).SetRepositoryAccessRunnerGroup), ctx, org, groupID, ids)
}

// SetRunnerGroupRunners mocks base method.
func (m *MockActionsService) SetRunnerGroupRunners(ctx context.Context, org string, groupID int64, ids github.SetRunnerGroupRunnersRequest) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRunnerGroupRunners", ctx, org, groupID, ids)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRunnerGroupRunners indicates an expected call of SetRunnerGroupRunners.
func (mr *MockActionsServiceMockRecorder) SetRunnerGroupRunners(ctx, org, groupID, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRunnerGroupRunners", reflect.TypeOf((*MockActionsService)(nil).SetRunnerGroupRunners), ctx, org, groupID, ids)
}

// SetSelectedReposForOrgSecret mocks base method.
func (m *MockActionsService) SetSelectedReposForOrgSecret(ctx context.Context, org, name string, ids github.SelectedRepoIDs) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSelectedReposForOrgSecret", ctx, org, name, ids)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSelectedReposForOrgSecret indicates an expected call of SetSelectedReposForOrgSecret.
func (mr *MockActionsServiceMockRecorder) SetSelectedReposForOrgSecret(ctx, org, name, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSelectedReposForOrgSecret", reflect.TypeOf((*MockActionsService)(nil).SetSelectedReposForOrgSecret), ctx, org, name, ids)
}

// UpdateOrganizationRunnerGroup mocks base method.
func (m *MockActionsService) UpdateOrganizationRunnerGroup(ctx context.Context, org string, groupID int64, updateReq github.UpdateRunnerGroupRequest) (*github.RunnerGroup, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganizationRunnerGroup", ctx, org, groupID, updateReq)
	ret0, _ := ret[0].(*github.RunnerGroup)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateOrganizationRunnerGroup indicates an expected call of UpdateOrganizationRunnerGroup.
func (mr *MockActionsServiceMockRecorder) UpdateOrganizationRunnerGroup(ctx, org, groupID, updateReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationRunnerGroup", reflect.TypeOf((*MockActionsService)(nil).UpdateOrganizationRunnerGroup), ctx, org, groupID, updateReq)
}

// MockActivityService is a mock of ActivityService interface.
type MockActivityService struct {
	ctrl     *gomock.Controller
	recorder *MockActivityServiceMockRecorder
}

// MockActivityServiceMockRecorder is the mock recorder for MockActivityService.
type MockActivityServiceMockRecorder struct {
	mock *MockActivityService
}

// NewMockActivityService creates a new mock instance.
func NewMockActivityService(ctrl *gomock.Controller) *MockActivityService {
	mock := &MockActivityService{ctrl: ctrl}
	mock.recorder = &MockActivityServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActivityService) EXPECT() *MockActivityServiceMockRecorder {
	return m.recorder
}

// DeleteRepositorySubscription mocks base method.
func (m *MockActivityService) DeleteRepositorySubscription(ctx context.Context, owner, repo string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepositorySubscription", ctx, owner, repo)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRepositorySubscription indicates an expected call of DeleteRepositorySubscription.
func (mr *MockActivityServiceMockRecorder) DeleteRepositorySubscription(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepositorySubscription", reflect.TypeOf((*MockActivityService)(nil).DeleteRepositorySubscription), ctx, owner, repo)
}

// DeleteThreadSubscription mocks base method.
func (m *MockActivityService) DeleteThreadSubscription(ctx context.Context, id string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteThreadSubscription", ctx, id)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteThreadSubscription indicates an expected call of DeleteThreadSubscription.
func (mr *MockActivityServiceMockRecorder) DeleteThreadSubscription(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteThreadSubscription", reflect.TypeOf((*MockActivityService)(nil).DeleteThreadSubscription), ctx, id)
}

// GetRepositorySubscription mocks base method.
func (m *MockActivityService) GetRepositorySubscription(ctx context.Context, owner, repo string) (*github.Subscription, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositorySubscription", ctx, owner, repo)
	ret0, _ := ret[0].(*github.Subscription)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRepositorySubscription indicates an expected call of GetRepositorySubscription.
func (mr *MockActivityServiceMockRecorder) GetRepositorySubscription(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositorySubscription", reflect.TypeOf((*MockActivityService)(nil).GetRepositorySubscription), ctx, owner, repo)
}

// GetThread mocks base method.
func (m *MockActivityService) GetThread(ctx context.Context, id string) (*github.Notification, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThread", ctx, id)
	ret0, _ := ret[0].(*github.Notification)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetThread indicates an expected call of GetThread.
func (mr *MockActivityServiceMockRecorder) GetThread(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThread", reflect.TypeOf((*MockActivityService)(nil).GetThread), ctx, id)
}

// GetThreadSubscription mocks base method.
func (m *MockActivityService) GetThreadSubscription(ctx context.Context, id string) (*github.Subscription, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThreadSubscription", ctx, id)
	ret0, _ := ret[0].(*github.Subscription)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetThreadSubscription indicates an expected call of GetThreadSubscription.
func (mr *MockActivityServiceMockRecorder) GetThreadSubscription(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThreadSubscription", reflect.TypeOf((*MockActivityService)(nil).GetThreadSubscription), ctx, id)
}

// IsStarred mocks base method.
func (m *MockActivityService) IsStarred(ctx context.Context, owner, repo string) (bool, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStarred", ctx, owner, repo)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsStarred indicates an expected call of IsStarred.
func (mr *MockActivityServiceMockRecorder) IsStarred(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStarred", reflect.TypeOf((*MockActivityService)(nil).IsStarred), ctx, owner, repo)
}

// ListEvents mocks base method.
func (m *MockActivityService) ListEvents(ctx context.Context, opts *github.ListOptions) ([]*github.Event, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvents", ctx, opts)
	ret0, _ := ret[0].([]*github.Event)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEvents indicates an expected call of ListEvents.
func (mr *MockActivityServiceMockRecorder) ListEvents(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvents", reflect.TypeOf((*MockActivityService)(nil).ListEvents), ctx, opts)
}

// ListEventsForOrganization mocks base method.
func (m *MockActivityService) ListEventsForOrganization(ctx context.Context, org string, opts *github.ListOptions) ([]*github.Event, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventsForOrganization", ctx, org, opts)
	ret0, _ := ret[0].([]*github.Event)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEventsForOrganization indicates an expected call of ListEventsForOrganization.
func (mr *MockActivityServiceMockRecorder) ListEventsForOrganization(ctx, org, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventsForOrganization", reflect.TypeOf((*MockActivityService)(nil).ListEventsForOrganization), ctx, org, opts)
}

// ListEventsForRepoNetwork mocks base method.
func (m *MockActivityService) ListEventsForRepoNetwork(ctx context.Context, owner, repo string, opts *github.ListOptions) ([]*github.Event, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventsForRepoNetwork", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.Event)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEventsForRepoNetwork indicates an expected call of ListEventsForRepoNetwork.
func (mr *MockActivityServiceMockRecorder) ListEventsForRepoNetwork(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventsForRepoNetwork", reflect.TypeOf((*MockActivityService)(nil).ListEventsForRepoNetwork), ctx, owner, repo, opts)
}

// ListEventsPerformedByUser mocks base method.
func (m *MockActivityService) ListEventsPerformedByUser(ctx context.Context, user string, publicOnly bool, opts *github.ListOptions) ([]*github.Event, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventsPerformedByUser", ctx, user, publicOnly, opts)
	ret0, _ := ret[0].([]*github.Event)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEventsPerformedByUser indicates an expected call of ListEventsPerformedByUser.
func (mr *MockActivityServiceMockRecorder) ListEventsPerformedByUser(ctx, user, publicOnly, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventsPerformedByUser", reflect.TypeOf((*MockActivityService)(nil).ListEventsPerformedByUser), ctx, user, publicOnly, opts)
}

// ListEventsReceivedByUser mocks base method.
func (m *MockActivityService) ListEventsReceivedByUser(ctx context.Context, user string, publicOnly bool, opts *github.ListOptions) ([]*github.Event, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventsReceivedByUser", ctx, user, publicOnly, opts)
	ret0, _ := ret[0].([]*github.Event)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEventsReceivedByUser indicates an expected call of ListEventsReceivedByUser.
func (mr *MockActivityServiceMockRecorder) ListEventsReceivedByUser(ctx, user, publicOnly, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventsReceivedByUser", reflect.TypeOf((*MockActivityService)(nil).ListEventsReceivedByUser), ctx, user, publicOnly, opts)
}

// ListFeeds mocks base method.
func (m *MockActivityService) ListFeeds(ctx context.Context) (*github.Feeds, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFeeds", ctx)
	ret0, _ := ret[0].(*github.Feeds)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFeeds indicates an expected call of ListFeeds.
func (mr *MockActivityServiceMockRecorder) ListFeeds(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeeds", reflect.TypeOf((*MockActivityService)(nil).ListFeeds), ctx)
}

// ListIssueEventsForRepository mocks base method.
func (m *MockActivityService) ListIssueEventsForRepository(ctx context.Context, owner, repo string, opts *github.ListOptions) ([]*github.IssueEvent, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIssueEventsForRepository", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.IssueEvent)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListIssueEventsForRepository indicates an expected call of ListIssueEventsForRepository.
func (mr *MockActivityServiceMockRecorder) ListIssueEventsForRepository(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssueEventsForRepository", reflect.TypeOf((*MockActivityService)(nil).ListIssueEventsForRepository), ctx, owner, repo, opts)
}

// ListNotifications mocks base method.
func (m *MockActivityService) ListNotifications(ctx context.Context, opts *github.NotificationListOptions) ([]*github.Notification, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotifications", ctx, opts)
	ret0, _ := ret[0].([]*github.Notification)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListNotifications indicates an expected call of ListNotifications.
func (mr *MockActivityServiceMockRecorder) ListNotifications(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotifications", reflect.TypeOf((*MockActivityService)(nil).ListNotifications), ctx, opts)
}

// ListRepositoryEvents mocks base method.
func (m *MockActivityService) ListRepositoryEvents(ctx context.Context, owner, repo string, opts *github.ListOptions) ([]*github.Event, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoryEvents", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.Event)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRepositoryEvents indicates an expected call of ListRepositoryEvents.
func (mr *MockActivityServiceMockRecorder) ListRepositoryEvents(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoryEvents", reflect.TypeOf((*MockActivityService)(nil).ListRepositoryEvents), ctx, owner, repo, opts)
}

// ListRepositoryNotifications mocks base method.
func (m *MockActivityService) ListRepositoryNotifications(ctx context.Context, owner, repo string, opts *github.NotificationListOptions) ([]*github.Notification, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoryNotifications", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.Notification)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRepositoryNotifications indicates an expected call of ListRepositoryNotifications.
func (mr *MockActivityServiceMockRecorder) ListRepositoryNotifications(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoryNotifications", reflect.TypeOf((*MockActivityService)(nil).ListRepositoryNotifications), ctx, owner, repo, opts)
}

// ListStargazers mocks base method.
func (m *MockActivityService) ListStargazers(ctx context.Context, owner, repo string, opts *github.ListOptions) ([]*github.Stargazer, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStargazers", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.Stargazer)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListStargazers indicates an expected call of ListStargazers.
func (mr *MockActivityServiceMockRecorder) ListStargazers(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStargazers", reflect.TypeOf((*MockActivityService)(nil).ListStargazers), ctx, owner, repo, opts)
}

// ListStarred mocks base method.
func (m *MockActivityService) ListStarred(ctx context.Context, user string, opts *github.ActivityListStarredOptions) ([]*github.StarredRepository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStarred", ctx, user, opts)
	ret0, _ := ret[0].([]*github.StarredRepository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListStarred indicates an expected call of ListStarred.
func (mr *MockActivityServiceMockRecorder) ListStarred(ctx, user, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStarred", reflect.TypeOf((*MockActivityService)(nil).ListStarred), ctx, user, opts)
}

// ListUserEventsForOrganization mocks base method.
func (m *MockActivityService) ListUserEventsForOrganization(ctx context.Context, org, user string, opts *github.ListOptions) ([]*github.Event, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserEventsForOrganization", ctx, org, user, opts)
	ret0, _ := ret[0].([]*github.Event)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUserEventsForOrganization indicates an expected call of ListUserEventsForOrganization.
func (mr *MockActivityServiceMockRecorder) ListUserEventsForOrganization(ctx, org, user, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserEventsForOrganization", reflect.TypeOf((*MockActivityService)(nil).ListUserEventsForOrganization), ctx, org, user, opts)
}

// ListWatched mocks base method.
func (m *MockActivityService) ListWatched(ctx context.Context, user string, opts *github.ListOptions) ([]*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWatched", ctx, user, opts)
	ret0, _ := ret[0].([]*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListWatched indicates an expected call of ListWatched.
func (mr *MockActivityServiceMockRecorder) ListWatched(ctx, user, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWatched", reflect.TypeOf((*MockActivityService)(nil).ListWatched), ctx, user, opts)
}

// ListWatchers mocks base method.
func (m *MockActivityService) ListWatchers(ctx context.Context, owner, repo string, opts *github.ListOptions) ([]*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWatchers", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListWatchers indicates an expected call of ListWatchers.
func (mr *MockActivityServiceMockRecorder) ListWatchers(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWatchers", reflect.TypeOf((*MockActivityService)(nil).ListWatchers), ctx, owner, repo, opts)
}

// MarkNotificationsRead mocks base method.
func (m *MockActivityService) MarkNotificationsRead(ctx context.Context, lastRead time.Time) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkNotificationsRead", ctx, lastRead)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkNotificationsRead indicates an expected call of MarkNotificationsRead.
func (mr *MockActivityServiceMockRecorder) MarkNotificationsRead(ctx, lastRead interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkNotificationsRead", reflect.TypeOf((*MockActivityService)(nil).MarkNotificationsRead), ctx, lastRead)
}

// MarkRepositoryNotificationsRead mocks base method.
func (m *MockActivityService) MarkRepositoryNotificationsRead(ctx context.Context, owner, repo string, lastRead time.Time) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkRepositoryNotificationsRead", ctx, owner, repo, lastRead)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkRepositoryNotificationsRead indicates an expected call of MarkRepositoryNotificationsRead.
func (mr *MockActivityServiceMockRecorder) MarkRepositoryNotificationsRead(ctx, owner, repo, lastRead interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkRepositoryNotificationsRead", reflect.TypeOf((*MockActivityService)(nil).MarkRepositoryNotificationsRead), ctx, owner, repo, lastRead)
}

// MarkThreadRead mocks base method.
func (m *MockActivityService) MarkThreadRead(ctx context.Context, id string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkThreadRead", ctx, id)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkThreadRead indicates an expected call of MarkThreadRead.
func (mr *MockActivityServiceMockRecorder) MarkThreadRead(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkThreadRead", reflect.TypeOf((*MockActivityService)(nil).MarkThreadRead), ctx, id)
}

// SetRepositorySubscription mocks base method.
func (m *MockActivityService) SetRepositorySubscription(ctx context.Context, owner, repo string, subscription *github.Subscription) (*github.Subscription, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRepositorySubscription", ctx, owner, repo, subscription)
	ret0, _ := ret[0].(*github.Subscription)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetRepositorySubscription indicates an expected call of SetRepositorySubscription.
func (mr *MockActivityServiceMockRecorder) SetRepositorySubscription(ctx, owner, repo, subscription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRepositorySubscription", reflect.TypeOf((*MockActivityService)(nil).SetRepositorySubscription), ctx, owner, repo, subscription)
}

// SetThreadSubscription mocks base method.
func (m *MockActivityService) SetThreadSubscription(ctx context.Context, id string, subscription *github.Subscription) (*github.Subscription, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetThreadSubscription", ctx, id, subscription)
	ret0, _ := ret[0].(*github.Subscription)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetThreadSubscription indicates an expected call of SetThreadSubscription.
func (mr *MockActivityServiceMockRecorder) SetThreadSubscription(ctx, id, subscription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetThreadSubscription", reflect.TypeOf((*MockActivityService)(nil).SetThreadSubscription), ctx, id, subscription)
}

// Star mocks base method.
func (m *MockActivityService) Star(ctx context.Context, owner, repo string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Star", ctx, owner, repo)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Star indicates an expected call of Star.
func (mr *MockActivityServiceMockRecorder) Star(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Star", reflect.TypeOf((*MockActivityService)(nil).Star), ctx, owner, repo)
}

// Unstar mocks base method.
func (m *MockActivityService) Unstar(ctx context.Context, owner, repo string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unstar", ctx, owner, repo)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unstar indicates an expected call of Unstar.
func (mr *MockActivityServiceMockRecorder) Unstar(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unstar", reflect.TypeOf((*MockActivityService)(nil).Unstar), ctx, owner, repo)
}

// MockAdminService is a mock of AdminService interface.
type MockAdminService struct {
	ctrl     *gomock.Controller
	recorder *MockAdminServiceMockRecorder
}

// MockAdminServiceMockRecorder is the mock recorder for MockAdminService.
type MockAdminServiceMockRecorder struct {
	mock *MockAdminService
}

// NewMockAdminService creates a new mock instance.
func NewMockAdminService(ctrl *gomock.Controller) *MockAdminService {
	mock := &MockAdminService{ctrl: ctrl}
	mock.recorder = &MockAdminServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminService) EXPECT() *MockAdminServiceMockRecorder {
	return m.recorder
}

// CreateOrg mocks base method.
func (m *MockAdminService) CreateOrg(ctx context.Context, org *github.Organization, admin string) (*github.Organization, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrg", ctx, org, admin)
	ret0, _ := ret[0].(*github.Organization)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateOrg indicates an expected call of CreateOrg.
func (mr *MockAdminServiceMockRecorder) CreateOrg(ctx, org, admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrg", reflect.TypeOf((*MockAdminService)(nil).CreateOrg), ctx, org, admin)
}

// CreateUser mocks base method.
func (m *MockAdminService) CreateUser(ctx context.Context, login, email string) (*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, login, email)
	ret0, _ := ret[0].(*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAdminServiceMockRecorder) CreateUser(ctx, login, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAdminService)(nil).CreateUser), ctx, login, email)
}

// CreateUserImpersonation mocks base method.
func (m *MockAdminService) CreateUserImpersonation(ctx context.Context, username string, opts *github.ImpersonateUserOptions) (*github.UserAuthorization, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserImpersonation", ctx, username, opts)
	ret0, _ := ret[0].(*github.UserAuthorization)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateUserImpersonation indicates an expected call of CreateUserImpersonation.
func (mr *MockAdminServiceMockRecorder) CreateUserImpersonation(ctx, username, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserImpersonation", reflect.TypeOf((*MockAdminService)(nil).CreateUserImpersonation), ctx, username, opts)
}

// DeleteUser mocks base method.
func (m *MockAdminService) DeleteUser(ctx context.Context, username string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, username)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockAdminServiceMockRecorder) DeleteUser(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockAdminService)(nil).DeleteUser), ctx, username)
}

// DeleteUserImpersonation mocks base method.
func (m *MockAdminService) DeleteUserImpersonation(ctx context.Context, username string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserImpersonation", ctx, username)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserImpersonation indicates an expected call of DeleteUserImpersonation.
func (mr *MockAdminServiceMockRecorder) DeleteUserImpersonation(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserImpersonation", reflect.TypeOf((*MockAdminService)(nil).DeleteUserImpersonation), ctx, username)
}

// GetAdminStats mocks base method.
func (m *MockAdminService) GetAdminStats(ctx context.Context) (*github.AdminStats, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminStats", ctx)
	ret0, _ := ret[0].(*github.AdminStats)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAdminStats indicates an expected call of GetAdminStats.
func (mr *MockAdminServiceMockRecorder) GetAdminStats(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminStats", reflect.TypeOf((*MockAdminService)(nil).GetAdminStats), ctx)
}

// RenameOrg mocks base method.
func (m *MockAdminService) RenameOrg(ctx context.Context, org *github.Organization, newName string) (*github.RenameOrgResponse, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameOrg", ctx, org, newName)
	ret0, _ := ret[0].(*github.RenameOrgResponse)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RenameOrg indicates an expected call of RenameOrg.
func (mr *MockAdminServiceMockRecorder) RenameOrg(ctx, org, newName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameOrg", reflect.TypeOf((*MockAdminService)(nil).RenameOrg), ctx, org, newName)
}

// RenameOrgByName mocks base method.
func (m *MockAdminService) RenameOrgByName(ctx context.Context, org, newName string) (*github.RenameOrgResponse, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameOrgByName", ctx, org, newName)
	ret0, _ := ret[0].(*github.RenameOrgResponse)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RenameOrgByName indicates an expected call of RenameOrgByName.
func (mr *MockAdminServiceMockRecorder) RenameOrgByName(ctx, org, newName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameOrgByName", reflect.TypeOf((*MockAdminService)(nil).RenameOrgByName), ctx, org, newName)
}

// UpdateTeamLDAPMapping mocks base method.
func (m *MockAdminService) UpdateTeamLDAPMapping(ctx context.Context, team int64, mapping *github.TeamLDAPMapping) (*github.TeamLDAPMapping, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeamLDAPMapping", ctx, team, mapping)
	ret0, _ := ret[0].(*github.TeamLDAPMapping)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateTeamLDAPMapping indicates an expected call of UpdateTeamLDAPMapping.
func (mr *MockAdminServiceMockRecorder) UpdateTeamLDAPMapping(ctx, team, mapping interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeamLDAPMapping", reflect.TypeOf((*MockAdminService)(nil).UpdateTeamLDAPMapping), ctx, team, mapping)
}

// UpdateUserLDAPMapping mocks base method.
func (m *MockAdminService) UpdateUserLDAPMapping(ctx context.Context, user string, mapping *github.UserLDAPMapping) (*github.UserLDAPMapping, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserLDAPMapping", ctx, user, mapping)
	ret0, _ := ret[0].(*github.UserLDAPMapping)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateUserLDAPMapping indicates an expected call of UpdateUserLDAPMapping.
func (mr *MockAdminServiceMockRecorder) UpdateUserLDAPMapping(ctx, user, mapping interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserLDAPMapping", reflect.TypeOf((*MockAdminService)(nil).UpdateUserLDAPMapping), ctx, user, mapping)
}

// MockAppsService is a mock of AppsService interface.
type MockAppsService struct {
	ctrl     *gomock.Controller
	recorder *MockAppsServiceMockRecorder
}

// MockAppsServiceMockRecorder is the mock recorder for MockAppsService.
type MockAppsServiceMockRecorder struct {
	mock *MockAppsService
}

// NewMockAppsService creates a new mock instance.
func NewMockAppsService(ctrl *gomock.Controller) *MockAppsService {
	mock := &MockAppsService{ctrl: ctrl}
	mock.recorder = &MockAppsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppsService) EXPECT() *MockAppsServiceMockRecorder {
	return m.recorder
}

// AddRepository mocks base method.
func (m *MockAppsService) AddRepository(ctx context.Context, instID, repoID int64) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRepository", ctx, instID, repoID)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddRepository indicates an expected call of AddRepository.
func (mr *MockAppsServiceMockRecorder) AddRepository(ctx, instID, repoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRepository", reflect.TypeOf((*MockAppsService)(nil).AddRepository), ctx, instID, repoID)
}

// CompleteAppManifest mocks base method.
func (m *MockAppsService) CompleteAppManifest(ctx context.Context, code string) (*github.AppConfig, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteAppManifest", ctx, code)
	ret0, _ := ret[0].(*github.AppConfig)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CompleteAppManifest indicates an expected call of CompleteAppManifest.
func (mr *MockAppsServiceMockRecorder) CompleteAppManifest(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteAppManifest", reflect.TypeOf((*MockAppsService)(nil).CompleteAppManifest), ctx, code)
}

// CreateAttachment mocks base method.
func (m *MockAppsService) CreateAttachment(ctx context.Context, contentReferenceID int64, title, body string) (*github.Attachment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttachment", ctx, contentReferenceID, title, body)
	ret0, _ := ret[0].(*github.Attachment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateAttachment indicates an expected call of CreateAttachment.
func (mr *MockAppsServiceMockRecorder) CreateAttachment(ctx, contentReferenceID, title, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttachment", reflect.TypeOf((*MockAppsService)(nil).CreateAttachment), ctx, contentReferenceID, title, body)
}

// CreateInstallationToken mocks base method.
func (m *MockAppsService) CreateInstallationToken(ctx context.Context, id int64, opts *github.InstallationTokenOptions) (*github.InstallationToken, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstallationToken", ctx, id, opts)
	ret0, _ := ret[0].(*github.InstallationToken)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateInstallationToken indicates an expected call of CreateInstallationToken.
func (mr *MockAppsServiceMockRecorder) CreateInstallationToken(ctx, id, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstallationToken", reflect.TypeOf((*MockAppsService)(nil).CreateInstallationToken), ctx, id, opts)
}

// DeleteInstallation mocks base method.
func (m *MockAppsService) DeleteInstallation(ctx context.Context, id int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstallation", ctx, id)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstallation indicates an expected call of DeleteInstallation.
func (mr *MockAppsServiceMockRecorder) DeleteInstallation(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstallation", reflect.TypeOf((*MockAppsService)(nil).DeleteInstallation), ctx, id)
}

// FindOrganizationInstallation mocks base method.
func (m *MockAppsService) FindOrganizationInstallation(ctx context.Context, org string) (*github.Installation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrganizationInstallation", ctx, org)
	ret0, _ := ret[0].(*github.Installation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindOrganizationInstallation indicates an expected call of FindOrganizationInstallation.
func (mr *MockAppsServiceMockRecorder) FindOrganizationInstallation(ctx, org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrganizationInstallation", reflect.TypeOf((*MockAppsService)(nil).FindOrganizationInstallation), ctx, org)
}

// FindRepositoryInstallation mocks base method.
func (m *MockAppsService) FindRepositoryInstallation(ctx context.Context, owner, repo string) (*github.Installation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRepositoryInstallation", ctx, owner, repo)
	ret0, _ := ret[0].(*github.Installation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindRepositoryInstallation indicates an expected call of FindRepositoryInstallation.
func (mr *MockAppsServiceMockRecorder) FindRepositoryInstallation(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRepositoryInstallation", reflect.TypeOf((*MockAppsService)(nil).FindRepositoryInstallation), ctx, owner, repo)
}

// FindRepositoryInstallationByID mocks base method.
func (m *MockAppsService) FindRepositoryInstallationByID(ctx context.Context, id int64) (*github.Installation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRepositoryInstallationByID", ctx, id)
	ret0, _ := ret[0].(*github.Installation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindRepositoryInstallationByID indicates an expected call of FindRepositoryInstallationByID.
func (mr *MockAppsServiceMockRecorder) FindRepositoryInstallationByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRepositoryInstallationByID", reflect.TypeOf((*MockAppsService)(nil).FindRepositoryInstallationByID), ctx, id)
}

// FindUserInstallation mocks base method.
func (m *MockAppsService) FindUserInstallation(ctx context.Context, user string) (*github.Installation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserInstallation", ctx, user)
	ret0, _ := ret[0].(*github.Installation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindUserInstallation indicates an expected call of FindUserInstallation.
func (mr *MockAppsServiceMockRecorder) FindUserInstallation(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserInstallation", reflect.TypeOf((*MockAppsService)(nil).FindUserInstallation), ctx, user)
}

// Get mocks base method.
func (m *MockAppsService) Get(ctx context.Context, appSlug string) (*github.App, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, appSlug)
	ret0, _ := ret[0].(*github.App)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockAppsServiceMockRecorder) Get(ctx, appSlug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAppsService)(nil).Get), ctx, appSlug)
}

// GetHookConfig mocks base method.
func (m *MockAppsService) GetHookConfig(ctx context.Context) (*github.HookConfig, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHookConfig", ctx)
	ret0, _ := ret[0].(*github.HookConfig)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetHookConfig indicates an expected call of GetHookConfig.
func (mr *MockAppsServiceMockRecorder) GetHookConfig(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHookConfig", reflect.TypeOf((*MockAppsService)(nil).GetHookConfig), ctx)
}

// GetHookDelivery mocks base method.
func (m *MockAppsService) GetHookDelivery(ctx context.Context, deliveryID int64) (*github.HookDelivery, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHookDelivery", ctx, deliveryID)
	ret0, _ := ret[0].(*github.HookDelivery)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetHookDelivery indicates an expected call of GetHookDelivery.
func (mr *MockAppsServiceMockRecorder) GetHookDelivery(ctx, deliveryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHookDelivery", reflect.TypeOf((*MockAppsService)(nil).GetHookDelivery), ctx, deliveryID)
}

// GetInstallation mocks base method.
func (m *MockAppsService) GetInstallation(ctx context.Context, id int64) (*github.Installation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstallation", ctx, id)
	ret0, _ := ret[0].(*github.Installation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstallation indicates an expected call of GetInstallation.
func (mr *MockAppsServiceMockRecorder) GetInstallation(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstallation", reflect.TypeOf((*MockAppsService)(nil).GetInstallation), ctx, id)
}

// ListHookDeliveries mocks base method.
func (m *MockAppsService) ListHookDeliveries(ctx context.Context, opts *github.ListCursorOptions) ([]*github.HookDelivery, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHookDeliveries", ctx, opts)
	ret0, _ := ret[0].([]*github.HookDelivery)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListHookDeliveries indicates an expected call of ListHookDeliveries.
func (mr *MockAppsServiceMockRecorder) ListHookDeliveries(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHookDeliveries", reflect.TypeOf((*MockAppsService)(nil).ListHookDeliveries), ctx, opts)
}

// ListInstallations mocks base method.
func (m *MockAppsService) ListInstallations(ctx context.Context, opts *github.ListOptions) ([]*github.Installation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstallations", ctx, opts)
	ret0, _ := ret[0].([]*github.Installation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListInstallations indicates an expected call of ListInstallations.
func (mr *MockAppsServiceMockRecorder) ListInstallations(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstallations", reflect.TypeOf((*MockAppsService)(nil).ListInstallations), ctx, opts)
}

// ListRepos mocks base method.
func (m *MockAppsService) ListRepos(ctx context.Context, opts *github.ListOptions) (*github.ListRepositories, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepos", ctx, opts)
	ret0, _ := ret[0].(*github.ListRepositories)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRepos indicates an expected call of ListRepos.
func (mr *MockAppsServiceMockRecorder) ListRepos(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepos", reflect.TypeOf((*MockAppsService)(nil).ListRepos), ctx, opts)
}

// ListUserInstallations mocks base method.
func (m *MockAppsService) ListUserInstallations(ctx context.Context, opts *github.ListOptions) ([]*github.Installation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserInstallations", ctx, opts)
	ret0, _ := ret[0].([]*github.Installation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUserInstallations indicates an expected call of ListUserInstallations.
func (mr *MockAppsServiceMockRecorder) ListUserInstallations(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserInstallations", reflect.TypeOf((*MockAppsService)(nil).ListUserInstallations), ctx, opts)
}

// ListUserRepos mocks base method.
func (m *MockAppsService) ListUserRepos(ctx context.Context, id int64, opts *github.ListOptions) (*github.ListRepositories, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserRepos", ctx, id, opts)
	ret0, _ := ret[0].(*github.ListRepositories)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUserRepos indicates an expected call of ListUserRepos.
func (mr *MockAppsServiceMockRecorder) ListUserRepos(ctx, id, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserRepos", reflect.TypeOf((*MockAppsService)(nil).ListUserRepos), ctx, id, opts)
}

// RedeliverHookDelivery mocks base method.
func (m *MockAppsService) RedeliverHookDelivery(ctx context.Context, deliveryID int64) (*github.HookDelivery, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedeliverHookDelivery", ctx, deliveryID)
	ret0, _ := ret[0].(*github.HookDelivery)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RedeliverHookDelivery indicates an expected call of RedeliverHookDelivery.
func (mr *MockAppsServiceMockRecorder) RedeliverHookDelivery(ctx, deliveryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedeliverHookDelivery", reflect.TypeOf((*MockAppsService)(nil).RedeliverHookDelivery), ctx, deliveryID)
}

// RemoveRepository mocks base method.
func (m *MockAppsService) RemoveRepository(ctx context.Context, instID, repoID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRepository", ctx, instID, repoID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRepository indicates an expected call of RemoveRepository.
func (mr *MockAppsServiceMockRecorder) RemoveRepository(ctx, instID, repoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRepository", reflect.TypeOf((*MockAppsService)(nil).RemoveRepository), ctx, instID, repoID)
}

// RevokeInstallationToken mocks base method.
func (m *MockAppsService) RevokeInstallationToken(ctx context.Context) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeInstallationToken", ctx)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeInstallationToken indicates an expected call of RevokeInstallationToken.
func (mr *MockAppsServiceMockRecorder) RevokeInstallationToken(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeInstallationToken", reflect.TypeOf((*MockAppsService)(nil).RevokeInstallationToken), ctx)
}

// SuspendInstallation mocks base method.
func (m *MockAppsService) SuspendInstallation(ctx context.Context, id int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuspendInstallation", ctx, id)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuspendInstallation indicates an expected call of SuspendInstallation.
func (mr *MockAppsServiceMockRecorder) SuspendInstallation(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuspendInstallation", reflect.TypeOf((*MockAppsService)(nil).SuspendInstallation), ctx, id)
}

// UnsuspendInstallation mocks base method.
func (m *MockAppsService) UnsuspendInstallation(ctx context.Context, id int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsuspendInstallation", ctx, id)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnsuspendInstallation indicates an expected call of UnsuspendInstallation.
func (mr *MockAppsServiceMockRecorder) UnsuspendInstallation(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsuspendInstallation", reflect.TypeOf((*MockAppsService)(nil).UnsuspendInstallation), ctx, id)
}

// UpdateHookConfig mocks base method.
func (m *MockAppsService) UpdateHookConfig(ctx context.Context, config *github.HookConfig) (*github.HookConfig, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHookConfig", ctx, config)
	ret0, _ := ret[0].(*github.HookConfig)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateHookConfig indicates an expected call of UpdateHookConfig.
func (mr *MockAppsServiceMockRecorder) UpdateHookConfig(ctx, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHookConfig", reflect.TypeOf((*MockAppsService)(nil).UpdateHookConfig), ctx, config)
}

// MockAuthorizationsService is a mock of AuthorizationsService interface.
type MockAuthorizationsService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationsServiceMockRecorder
}

// MockAuthorizationsServiceMockRecorder is the mock recorder for MockAuthorizationsService.
type MockAuthorizationsServiceMockRecorder struct {
	mock *MockAuthorizationsService
}

// NewMockAuthorizationsService creates a new mock instance.
func NewMockAuthorizationsService(ctrl *gomock.Controller) *MockAuthorizationsService {
	mock := &MockAuthorizationsService{ctrl: ctrl}
	mock.recorder = &MockAuthorizationsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizationsService) EXPECT() *MockAuthorizationsServiceMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockAuthorizationsService) Check(ctx context.Context, clientID, accessToken string) (*github.Authorization, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx, clientID, accessToken)
	ret0, _ := ret[0].(*github.Authorization)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Check indicates an expected call of Check.
func (mr *MockAuthorizationsServiceMockRecorder) Check(ctx, clientID, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockAuthorizationsService)(nil).Check), ctx, clientID, accessToken)
}

// CreateImpersonation mocks base method.
func (m *MockAuthorizationsService) CreateImpersonation(ctx context.Context, username string, authReq *github.AuthorizationRequest) (*github.Authorization, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImpersonation", ctx, username, authReq)
	ret0, _ := ret[0].(*github.Authorization)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateImpersonation indicates an expected call of CreateImpersonation.
func (mr *MockAuthorizationsServiceMockRecorder) CreateImpersonation(ctx, username, authReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImpersonation", reflect.TypeOf((*MockAuthorizationsService)(nil).CreateImpersonation), ctx, username, authReq)
}

// DeleteGrant mocks base method.
func (m *MockAuthorizationsService) DeleteGrant(ctx context.Context, clientID, accessToken string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGrant", ctx, clientID, accessToken)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGrant indicates an expected call of DeleteGrant.
func (mr *MockAuthorizationsServiceMockRecorder) DeleteGrant(ctx, clientID, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGrant", reflect.TypeOf((*MockAuthorizationsService)(nil).DeleteGrant), ctx, clientID, accessToken)
}

// DeleteImpersonation mocks base method.
func (m *MockAuthorizationsService) DeleteImpersonation(ctx context.Context, username string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImpersonation", ctx, username)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteImpersonation indicates an expected call of DeleteImpersonation.
func (mr *MockAuthorizationsServiceMockRecorder) DeleteImpersonation(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImpersonation", reflect.TypeOf((*MockAuthorizationsService)(nil).DeleteImpersonation), ctx, username)
}

// Reset mocks base method.
func (m *MockAuthorizationsService) Reset(ctx context.Context, clientID, accessToken string) (*github.Authorization, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", ctx, clientID, accessToken)
	ret0, _ := ret[0].(*github.Authorization)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Reset indicates an expected call of Reset.
func (mr *MockAuthorizationsServiceMockRecorder) Reset(ctx, clientID, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockAuthorizationsService)(nil).Reset), ctx, clientID, accessToken)
}

// Revoke mocks base method.
func (m *MockAuthorizationsService) Revoke(ctx context.Context, clientID, accessToken string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revoke", ctx, clientID, accessToken)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Revoke indicates an expected call of Revoke.
func (mr *MockAuthorizationsServiceMockRecorder) Revoke(ctx, clientID, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoke", reflect.TypeOf((*MockAuthorizationsService)(nil).Revoke), ctx, clientID, accessToken)
}

// MockBillingService is a mock of BillingService interface.
type MockBillingService struct {
	ctrl     *gomock.Controller
	recorder *MockBillingServiceMockRecorder
}

// MockBillingServiceMockRecorder is the mock recorder for MockBillingService.
type MockBillingServiceMockRecorder struct {
	mock *MockBillingService
}

// NewMockBillingService creates a new mock instance.
func NewMockBillingService(ctrl *gomock.Controller) *MockBillingService {
	mock := &MockBillingService{ctrl: ctrl}
	mock.recorder = &MockBillingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingService) EXPECT() *MockBillingServiceMockRecorder {
	return m.recorder
}

// GetActionsBillingOrg mocks base method.
func (m *MockBillingService) GetActionsBillingOrg(ctx context.Context, org string) (*github.ActionBilling, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionsBillingOrg", ctx, org)
	ret0, _ := ret[0].(*github.ActionBilling)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetActionsBillingOrg indicates an expected call of GetActionsBillingOrg.
func (mr *MockBillingServiceMockRecorder) GetActionsBillingOrg(ctx, org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionsBillingOrg", reflect.TypeOf((*MockBillingService)(nil).GetActionsBillingOrg), ctx, org)
}

// GetActionsBillingUser mocks base method.
func (m *MockBillingService) GetActionsBillingUser(ctx context.Context, user string) (*github.ActionBilling, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionsBillingUser", ctx, user)
	ret0, _ := ret[0].(*github.ActionBilling)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetActionsBillingUser indicates an expected call of GetActionsBillingUser.
func (mr *MockBillingServiceMockRecorder) GetActionsBillingUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionsBillingUser", reflect.TypeOf((*MockBillingService)(nil).GetActionsBillingUser), ctx, user)
}

// GetAdvancedSecurityActiveCommittersOrg mocks base method.
func (m *MockBillingService) GetAdvancedSecurityActiveCommittersOrg(ctx context.Context, org string) (*github.ActiveCommitters, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdvancedSecurityActiveCommittersOrg", ctx, org)
	ret0, _ := ret[0].(*github.ActiveCommitters)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAdvancedSecurityActiveCommittersOrg indicates an expected call of GetAdvancedSecurityActiveCommittersOrg.
func (mr *MockBillingServiceMockRecorder) GetAdvancedSecurityActiveCommittersOrg(ctx, org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdvancedSecurityActiveCommittersOrg", reflect.TypeOf((*MockBillingService)(nil).GetAdvancedSecurityActiveCommittersOrg), ctx, org)
}

// GetPackagesBillingOrg mocks base method.
func (m *MockBillingService) GetPackagesBillingOrg(ctx context.Context, org string) (*github.PackageBilling, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackagesBillingOrg", ctx, org)
	ret0, _ := ret[0].(*github.PackageBilling)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPackagesBillingOrg indicates an expected call of GetPackagesBillingOrg.
func (mr *MockBillingServiceMockRecorder) GetPackagesBillingOrg(ctx, org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackagesBillingOrg", reflect.TypeOf((*MockBillingService)(nil).GetPackagesBillingOrg), ctx, org)
}

// GetPackagesBillingUser mocks base method.
func (m *MockBillingService) GetPackagesBillingUser(ctx context.Context, user string) (*github.PackageBilling, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackagesBillingUser", ctx, user)
	ret0, _ := ret[0].(*github.PackageBilling)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPackagesBillingUser indicates an expected call of GetPackagesBillingUser.
func (mr *MockBillingServiceMockRecorder) GetPackagesBillingUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackagesBillingUser", reflect.TypeOf((*MockBillingService)(nil).GetPackagesBillingUser), ctx, user)
}

// GetStorageBillingOrg mocks base method.
func (m *MockBillingService) GetStorageBillingOrg(ctx context.Context, org string) (*github.StorageBilling, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageBillingOrg", ctx, org)
	ret0, _ := ret[0].(*github.StorageBilling)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStorageBillingOrg indicates an expected call of GetStorageBillingOrg.
func (mr *MockBillingServiceMockRecorder) GetStorageBillingOrg(ctx, org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageBillingOrg", reflect.TypeOf((*MockBillingService)(nil).GetStorageBillingOrg), ctx, org)
}

// GetStorageBillingUser mocks base method.
func (m *MockBillingService) GetStorageBillingUser(ctx context.Context, user string) (*github.StorageBilling, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageBillingUser", ctx, user)
	ret0, _ := ret[0].(*github.StorageBilling)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStorageBillingUser indicates an expected call of GetStorageBillingUser.
func (mr *MockBillingServiceMockRecorder) GetStorageBillingUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageBillingUser", reflect.TypeOf((*MockBillingService)(nil).GetStorageBillingUser), ctx, user)
}

// MockChecksService is a mock of ChecksService interface.
type MockChecksService struct {
	ctrl     *gomock.Controller
	recorder *MockChecksServiceMockRecorder
}

// MockChecksServiceMockRecorder is the mock recorder for MockChecksService.
type MockChecksServiceMockRecorder struct {
	mock *MockChecksService
}

// NewMockChecksService creates a new mock instance.
func NewMockChecksService(ctrl *gomock.Controller) *MockChecksService {
	mock := &MockChecksService{ctrl: ctrl}
	mock.recorder = &MockChecksServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChecksService) EXPECT() *MockChecksServiceMockRecorder {
	return m.recorder
}

// CreateCheckRun mocks base method.
func (m *MockChecksService) CreateCheckRun(ctx context.Context, owner, repo string, opts github.CreateCheckRunOptions) (*github.CheckRun, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCheckRun", ctx, owner, repo, opts)
	ret0, _ := ret[0].(*github.CheckRun)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCheckRun indicates an expected call of CreateCheckRun.
func (mr *MockChecksServiceMockRecorder) CreateCheckRun(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCheckRun", reflect.TypeOf((*MockChecksService)(nil).CreateCheckRun), ctx, owner, repo, opts)
}

// CreateCheckSuite mocks base method.
func (m *MockChecksService) CreateCheckSuite(ctx context.Context, owner, repo string, opts github.CreateCheckSuiteOptions) (*github.CheckSuite, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCheckSuite", ctx, owner, repo, opts)
	ret0, _ := ret[0].(*github.CheckSuite)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCheckSuite indicates an expected call of CreateCheckSuite.
func (mr *MockChecksServiceMockRecorder) CreateCheckSuite(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCheckSuite", reflect.TypeOf((*MockChecksService)(nil).CreateCheckSuite), ctx, owner, repo, opts)
}

// GetCheckRun mocks base method.
func (m *MockChecksService) GetCheckRun(ctx context.Context, owner, repo string, checkRunID int64) (*github.CheckRun, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCheckRun", ctx, owner, repo, checkRunID)
	ret0, _ := ret[0].(*github.CheckRun)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCheckRun indicates an expected call of GetCheckRun.
func (mr *MockChecksServiceMockRecorder) GetCheckRun(ctx, owner, repo, checkRunID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCheckRun", reflect.TypeOf((*MockChecksService)(nil).GetCheckRun), ctx, owner, repo, checkRunID)
}

// GetCheckSuite mocks base method.
func (m *MockChecksService) GetCheckSuite(ctx context.Context, owner, repo string, checkSuiteID int64) (*github.CheckSuite, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCheckSuite", ctx, owner, repo, checkSuiteID)
	ret0, _ := ret[0].(*github.CheckSuite)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCheckSuite indicates an expected call of GetCheckSuite.
func (mr *MockChecksServiceMockRecorder) GetCheckSuite(ctx, owner, repo, checkSuiteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCheckSuite", reflect.TypeOf((*MockChecksService)(nil).GetCheckSuite), ctx, owner, repo, checkSuiteID)
}

// ListCheckRunAnnotations mocks base method.
func (m *MockChecksService) ListCheckRunAnnotations(ctx context.Context, owner, repo string, checkRunID int64, opts *github.ListOptions) ([]*github.CheckRunAnnotation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCheckRunAnnotations", ctx, owner, repo, checkRunID, opts)
	ret0, _ := ret[0].([]*github.CheckRunAnnotation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCheckRunAnnotations indicates an expected call of ListCheckRunAnnotations.
func (mr *MockChecksServiceMockRecorder) ListCheckRunAnnotations(ctx, owner, repo, checkRunID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCheckRunAnnotations", reflect.TypeOf((*MockChecksService)(nil).ListCheckRunAnnotations), ctx, owner, repo, checkRunID, opts)
}

// ListCheckRunsCheckSuite mocks base method.
func (m *MockChecksService) ListCheckRunsCheckSuite(ctx context.Context, owner, repo string, checkSuiteID int64, opts *github.ListCheckRunsOptions) (*github.ListCheckRunsResults, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCheckRunsCheckSuite", ctx, owner, repo, checkSuiteID, opts)
	ret0, _ := ret[0].(*github.ListCheckRunsResults)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCheckRunsCheckSuite indicates an expected call of ListCheckRunsCheckSuite.
func (mr *MockChecksServiceMockRecorder) ListCheckRunsCheckSuite(ctx, owner, repo, checkSuiteID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCheckRunsCheckSuite", reflect.TypeOf((*MockChecksService)(nil).ListCheckRunsCheckSuite), ctx, owner, repo, checkSuiteID, opts)
}

// ListCheckRunsForRef mocks base method.
func (m *MockChecksService) ListCheckRunsForRef(ctx context.Context, owner, repo, ref string, opts *github.ListCheckRunsOptions) (*github.ListCheckRunsResults, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCheckRunsForRef", ctx, owner, repo, ref, opts)
	ret0, _ := ret[0].(*github.ListCheckRunsResults)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCheckRunsForRef indicates an expected call of ListCheckRunsForRef.
func (mr *MockChecksServiceMockRecorder) ListCheckRunsForRef(ctx, owner, repo, ref, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCheckRunsForRef", reflect.TypeOf((*MockChecksService)(nil).ListCheckRunsForRef), ctx, owner, repo, ref, opts)
}

// ListCheckSuitesForRef mocks base method.
func (m *MockChecksService) ListCheckSuitesForRef(ctx context.Context, owner, repo, ref string, opts *github.ListCheckSuiteOptions) (*github.ListCheckSuiteResults, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCheckSuitesForRef", ctx, owner, repo, ref, opts)
	ret0, _ := ret[0].(*github.ListCheckSuiteResults)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCheckSuitesForRef indicates an expected call of ListCheckSuitesForRef.
func (mr *MockChecksServiceMockRecorder) ListCheckSuitesForRef(ctx, owner, repo, ref, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCheckSuitesForRef", reflect.TypeOf((*MockChecksService)(nil).ListCheckSuitesForRef), ctx, owner, repo, ref, opts)
}

// ReRequestCheckRun mocks base method.
func (m *MockChecksService) ReRequestCheckRun(ctx context.Context, owner, repo string, checkRunID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReRequestCheckRun", ctx, owner, repo, checkRunID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReRequestCheckRun indicates an expected call of ReRequestCheckRun.
func (mr *MockChecksServiceMockRecorder) ReRequestCheckRun(ctx, owner, repo, checkRunID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReRequestCheckRun", reflect.TypeOf((*MockChecksService)(nil).ReRequestCheckRun), ctx, owner, repo, checkRunID)
}

// ReRequestCheckSuite mocks base method.
func (m *MockChecksService) ReRequestCheckSuite(ctx context.Context, owner, repo string, checkSuiteID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReRequestCheckSuite", ctx, owner, repo, checkSuiteID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReRequestCheckSuite indicates an expected call of ReRequestCheckSuite.
func (mr *MockChecksServiceMockRecorder) ReRequestCheckSuite(ctx, owner, repo, checkSuiteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReRequestCheckSuite", reflect.TypeOf((*MockChecksService)(nil).ReRequestCheckSuite), ctx, owner, repo, checkSuiteID)
}

// SetCheckSuitePreferences mocks base method.
func (m *MockChecksService) SetCheckSuitePreferences(ctx context.Context, owner, repo string, opts github.CheckSuitePreferenceOptions) (*github.CheckSuitePreferenceResults, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCheckSuitePreferences", ctx, owner, repo, opts)
	ret0, _ := ret[0].(*github.CheckSuitePreferenceResults)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetCheckSuitePreferences indicates an expected call of SetCheckSuitePreferences.
func (mr *MockChecksServiceMockRecorder) SetCheckSuitePreferences(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCheckSuitePreferences", reflect.TypeOf((*MockChecksService)(nil).SetCheckSuitePreferences), ctx, owner, repo, opts)
}

// UpdateCheckRun mocks base method.
func (m *MockChecksService) UpdateCheckRun(ctx context.Context, owner, repo string, checkRunID int64, opts github.UpdateCheckRunOptions) (*github.CheckRun, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCheckRun", ctx, owner, repo, checkRunID, opts)
	ret0, _ := ret[0].(*github.CheckRun)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateCheckRun indicates an expected call of UpdateCheckRun.
func (mr *MockChecksServiceMockRecorder) UpdateCheckRun(ctx, owner, repo, checkRunID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCheckRun", reflect.TypeOf((*MockChecksService)(nil).UpdateCheckRun), ctx, owner, repo, checkRunID, opts)
}

// MockCodeScanningService is a mock of CodeScanningService interface.
type MockCodeScanningService struct {
	ctrl     *gomock.Controller
	recorder *MockCodeScanningServiceMockRecorder
}

// MockCodeScanningServiceMockRecorder is the mock recorder for MockCodeScanningService.
type MockCodeScanningServiceMockRecorder struct {
	mock *MockCodeScanningService
}

// NewMockCodeScanningService creates a new mock instance.
func NewMockCodeScanningService(ctrl *gomock.Controller) *MockCodeScanningService {
	mock := &MockCodeScanningService{ctrl: ctrl}
	mock.recorder = &MockCodeScanningServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodeScanningService) EXPECT() *MockCodeScanningServiceMockRecorder {
	return m.recorder
}

// GetAlert mocks base method.
func (m *MockCodeScanningService) GetAlert(ctx context.Context, owner, repo string, id int64) (*github.Alert, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlert", ctx, owner, repo, id)
	ret0, _ := ret[0].(*github.Alert)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAlert indicates an expected call of GetAlert.
func (mr *MockCodeScanningServiceMockRecorder) GetAlert(ctx, owner, repo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlert", reflect.TypeOf((*MockCodeScanningService)(nil).GetAlert), ctx, owner, repo, id)
}

// GetAnalysis mocks base method.
func (m *MockCodeScanningService) GetAnalysis(ctx context.Context, owner, repo string, id int64) (*github.ScanningAnalysis, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnalysis", ctx, owner, repo, id)
	ret0, _ := ret[0].(*github.ScanningAnalysis)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAnalysis indicates an expected call of GetAnalysis.
func (mr *MockCodeScanningServiceMockRecorder) GetAnalysis(ctx, owner, repo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnalysis", reflect.TypeOf((*MockCodeScanningService)(nil).GetAnalysis), ctx, owner, repo, id)
}

// ListAlertsForOrg mocks base method.
func (m *MockCodeScanningService) ListAlertsForOrg(ctx context.Context, org string, opts *github.AlertListOptions) ([]*github.Alert, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAlertsForOrg", ctx, org, opts)
	ret0, _ := ret[0].([]*github.Alert)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAlertsForOrg indicates an expected call of ListAlertsForOrg.
func (mr *MockCodeScanningServiceMockRecorder) ListAlertsForOrg(ctx, org, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlertsForOrg", reflect.TypeOf((*MockCodeScanningService)(nil).ListAlertsForOrg), ctx, org, opts)
}

// ListAlertsForRepo mocks base method.
func (m *MockCodeScanningService) ListAlertsForRepo(ctx context.Context, owner, repo string, opts *github.AlertListOptions) ([]*github.Alert, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAlertsForRepo", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.Alert)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAlertsForRepo indicates an expected call of ListAlertsForRepo.
func (mr *MockCodeScanningServiceMockRecorder) ListAlertsForRepo(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlertsForRepo", reflect.TypeOf((*MockCodeScanningService)(nil).ListAlertsForRepo), ctx, owner, repo, opts)
}

// ListAnalysesForRepo mocks base method.
func (m *MockCodeScanningService) ListAnalysesForRepo(ctx context.Context, owner, repo string, opts *github.AnalysesListOptions) ([]*github.ScanningAnalysis, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnalysesForRepo", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.ScanningAnalysis)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAnalysesForRepo indicates an expected call of ListAnalysesForRepo.
func (mr *MockCodeScanningServiceMockRecorder) ListAnalysesForRepo(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnalysesForRepo", reflect.TypeOf((*MockCodeScanningService)(nil).ListAnalysesForRepo), ctx, owner, repo, opts)
}

// UploadSarif mocks base method.
func (m *MockCodeScanningService) UploadSarif(ctx context.Context, owner, repo string, sarif *github.SarifAnalysis) (*github.SarifID, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadSarif", ctx, owner, repo, sarif)
	ret0, _ := ret[0].(*github.SarifID)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UploadSarif indicates an expected call of UploadSarif.
func (mr *MockCodeScanningServiceMockRecorder) UploadSarif(ctx, owner, repo, sarif interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadSarif", reflect.TypeOf((*MockCodeScanningService)(nil).UploadSarif), ctx, owner, repo, sarif)
}

// MockDependabotService is a mock of DependabotService interface.
type MockDependabotService struct {
	ctrl     *gomock.Controller
	recorder *MockDependabotServiceMockRecorder
}

// MockDependabotServiceMockRecorder is the mock recorder for MockDependabotService.
type MockDependabotServiceMockRecorder struct {
	mock *MockDependabotService
}

// NewMockDependabotService creates a new mock instance.
func NewMockDependabotService(ctrl *gomock.Controller) *MockDependabotService {
	mock := &MockDependabotService{ctrl: ctrl}
	mock.recorder = &MockDependabotServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDependabotService) EXPECT() *MockDependabotServiceMockRecorder {
	return m.recorder
}

// AddSelectedRepoToOrgSecret mocks base method.
func (m *MockDependabotService) AddSelectedRepoToOrgSecret(ctx context.Context, org, name string, repo *github.Repository) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSelectedRepoToOrgSecret", ctx, org, name, repo)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSelectedRepoToOrgSecret indicates an expected call of AddSelectedRepoToOrgSecret.
func (mr *MockDependabotServiceMockRecorder) AddSelectedRepoToOrgSecret(ctx, org, name, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSelectedRepoToOrgSecret", reflect.TypeOf((*MockDependabotService)(nil).AddSelectedRepoToOrgSecret), ctx, org, name, repo)
}

// CreateOrUpdateOrgSecret mocks base method.
func (m *MockDependabotService) CreateOrUpdateOrgSecret(ctx context.Context, org string, eSecret *github.DependabotEncryptedSecret) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateOrgSecret", ctx, org, eSecret)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateOrgSecret indicates an expected call of CreateOrUpdateOrgSecret.
func (mr *MockDependabotServiceMockRecorder) CreateOrUpdateOrgSecret(ctx, org, eSecret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateOrgSecret", reflect.TypeOf((*MockDependabotService)(nil).CreateOrUpdateOrgSecret), ctx, org, eSecret)
}

// CreateOrUpdateRepoSecret mocks base method.
func (m *MockDependabotService) CreateOrUpdateRepoSecret(ctx context.Context, owner, repo string, eSecret *github.DependabotEncryptedSecret) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateRepoSecret", ctx, owner, repo, eSecret)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateRepoSecret indicates an expected call of CreateOrUpdateRepoSecret.
func (mr *MockDependabotServiceMockRecorder) CreateOrUpdateRepoSecret(ctx, owner, repo, eSecret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateRepoSecret", reflect.TypeOf((*MockDependabotService)(nil).CreateOrUpdateRepoSecret), ctx, owner, repo, eSecret)
}

// DeleteOrgSecret mocks base method.
func (m *MockDependabotService) DeleteOrgSecret(ctx context.Context, org, name string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrgSecret", ctx, org, name)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrgSecret indicates an expected call of DeleteOrgSecret.
func (mr *MockDependabotServiceMockRecorder) DeleteOrgSecret(ctx, org, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrgSecret", reflect.TypeOf((*MockDependabotService)(nil).DeleteOrgSecret), ctx, org, name)
}

// DeleteRepoSecret mocks base method.
func (m *MockDependabotService) DeleteRepoSecret(ctx context.Context, owner, repo, name string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepoSecret", ctx, owner, repo, name)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRepoSecret indicates an expected call of DeleteRepoSecret.
func (mr *MockDependabotServiceMockRecorder) DeleteRepoSecret(ctx, owner, repo, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepoSecret", reflect.TypeOf((*MockDependabotService)(nil).DeleteRepoSecret), ctx, owner, repo, name)
}

// GetOrgPublicKey mocks base method.
func (m *MockDependabotService) GetOrgPublicKey(ctx context.Context, org string) (*github.PublicKey, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrgPublicKey", ctx, org)
	ret0, _ := ret[0].(*github.PublicKey)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrgPublicKey indicates an expected call of GetOrgPublicKey.
func (mr *MockDependabotServiceMockRecorder) GetOrgPublicKey(ctx, org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgPublicKey", reflect.TypeOf((*MockDependabotService)(nil).GetOrgPublicKey), ctx, org)
}

// GetOrgSecret mocks base method.
func (m *MockDependabotService) GetOrgSecret(ctx context.Context, org, name string) (*github.Secret, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrgSecret", ctx, org, name)
	ret0, _ := ret[0].(*github.Secret)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrgSecret indicates an expected call of GetOrgSecret.
func (mr *MockDependabotServiceMockRecorder) GetOrgSecret(ctx, org, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgSecret", reflect.TypeOf((*MockDependabotService)(nil).GetOrgSecret), ctx, org, name)
}

// GetRepoPublicKey mocks base method.
func (m *MockDependabotService) GetRepoPublicKey(ctx context.Context, owner, repo string) (*github.PublicKey, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoPublicKey", ctx, owner, repo)
	ret0, _ := ret[0].(*github.PublicKey)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRepoPublicKey indicates an expected call of GetRepoPublicKey.
func (mr *MockDependabotServiceMockRecorder) GetRepoPublicKey(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoPublicKey", reflect.TypeOf((*MockDependabotService)(nil).GetRepoPublicKey), ctx, owner, repo)
}

// GetRepoSecret mocks base method.
func (m *MockDependabotService) GetRepoSecret(ctx context.Context, owner, repo, name string) (*github.Secret, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoSecret", ctx, owner, repo, name)
	ret0, _ := ret[0].(*github.Secret)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRepoSecret indicates an expected call of GetRepoSecret.
func (mr *MockDependabotServiceMockRecorder) GetRepoSecret(ctx, owner, repo, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoSecret", reflect.TypeOf((*MockDependabotService)(nil).GetRepoSecret), ctx, owner, repo, name)
}

// ListOrgSecrets mocks base method.
func (m *MockDependabotService) ListOrgSecrets(ctx context.Context, org string, opts *github.ListOptions) (*github.Secrets, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrgSecrets", ctx, org, opts)
	ret0, _ := ret[0].(*github.Secrets)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrgSecrets indicates an expected call of ListOrgSecrets.
func (mr *MockDependabotServiceMockRecorder) ListOrgSecrets(ctx, org, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrgSecrets", reflect.TypeOf((*MockDependabotService)(nil).ListOrgSecrets), ctx, org, opts)
}

// ListRepoSecrets mocks base method.
func (m *MockDependabotService) ListRepoSecrets(ctx context.Context, owner, repo string, opts *github.ListOptions) (*github.Secrets, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepoSecrets", ctx, owner, repo, opts)
	ret0, _ := ret[0].(*github.Secrets)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRepoSecrets indicates an expected call of ListRepoSecrets.
func (mr *MockDependabotServiceMockRecorder) ListRepoSecrets(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepoSecrets", reflect.TypeOf((*MockDependabotService)(nil).ListRepoSecrets), ctx, owner, repo, opts)
}

// ListSelectedReposForOrgSecret mocks base method.
func (m *MockDependabotService) ListSelectedReposForOrgSecret(ctx context.Context, org, name string, opts *github.ListOptions) (*github.SelectedReposList, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSelectedReposForOrgSecret", ctx, org, name, opts)
	ret0, _ := ret[0].(*github.SelectedReposList)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSelectedReposForOrgSecret indicates an expected call of ListSelectedReposForOrgSecret.
func (mr *MockDependabotServiceMockRecorder) ListSelectedReposForOrgSecret(ctx, org, name, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSelectedReposForOrgSecret", reflect.TypeOf((*MockDependabotService)(nil).ListSelectedReposForOrgSecret), ctx, org, name, opts)
}

// RemoveSelectedRepoFromOrgSecret mocks base method.
func (m *MockDependabotService) RemoveSelectedRepoFromOrgSecret(ctx context.Context, org, name string, repo *github.Repository) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSelectedRepoFromOrgSecret", ctx, org, name, repo)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveSelectedRepoFromOrgSecret indicates an expected call of RemoveSelectedRepoFromOrgSecret.
func (mr *MockDependabotServiceMockRecorder) RemoveSelectedRepoFromOrgSecret(ctx, org, name, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSelectedRepoFromOrgSecret", reflect.TypeOf((*MockDependabotService)(nil).RemoveSelectedRepoFromOrgSecret), ctx, org, name, repo)
}

// SetSelectedReposForOrgSecret mocks base method.
func (m *MockDependabotService) SetSelectedReposForOrgSecret(ctx context.Context, org, name string, ids github.DependabotSecretsSelectedRepoIDs) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSelectedReposForOrgSecret", ctx, org, name, ids)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSelectedReposForOrgSecret indicates an expected call of SetSelectedReposForOrgSecret.
func (mr *MockDependabotServiceMockRecorder) SetSelectedReposForOrgSecret(ctx, org, name, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSelectedReposForOrgSecret", reflect.TypeOf((*MockDependabotService)(nil).SetSelectedReposForOrgSecret), ctx, org, name, ids)
}

// MockEnterpriseService is a mock of EnterpriseService interface.
type MockEnterpriseService struct {
	ctrl     *gomock.Controller
	recorder *MockEnterpriseServiceMockRecorder
}

// MockEnterpriseServiceMockRecorder is the mock recorder for MockEnterpriseService.
type MockEnterpriseServiceMockRecorder struct {
	mock *MockEnterpriseService
}

// NewMockEnterpriseService creates a new mock instance.
func NewMockEnterpriseService(ctrl *gomock.Controller) *MockEnterpriseService {
	mock := &MockEnterpriseService{ctrl: ctrl}
	mock.recorder = &MockEnterpriseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnterpriseService) EXPECT() *MockEnterpriseServiceMockRecorder {
	return m.recorder
}

// CreateRegistrationToken mocks base method.
func (m *MockEnterpriseService) CreateRegistrationToken(ctx context.Context, enterprise string) (*github.RegistrationToken, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegistrationToken", ctx, enterprise)
	ret0, _ := ret[0].(*github.RegistrationToken)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRegistrationToken indicates an expected call of CreateRegistrationToken.
func (mr *MockEnterpriseServiceMockRecorder) CreateRegistrationToken(ctx, enterprise interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistrationToken", reflect.TypeOf((*MockEnterpriseService)(nil).CreateRegistrationToken), ctx, enterprise)
}

// GetAuditLog mocks base method.
func (m *MockEnterpriseService) GetAuditLog(ctx context.Context, enterprise string, opts *github.GetAuditLogOptions) ([]*github.AuditEntry, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuditLog", ctx, enterprise, opts)
	ret0, _ := ret[0].([]*github.AuditEntry)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAuditLog indicates an expected call of GetAuditLog.
func (mr *MockEnterpriseServiceMockRecorder) GetAuditLog(ctx, enterprise, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuditLog", reflect.TypeOf((*MockEnterpriseService)(nil).GetAuditLog), ctx, enterprise, opts)
}

// ListRunnerApplicationDownloads mocks base method.
func (m *MockEnterpriseService) ListRunnerApplicationDownloads(ctx context.Context, enterprise string) ([]*github.RunnerApplicationDownload, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunnerApplicationDownloads", ctx, enterprise)
	ret0, _ := ret[0].([]*github.RunnerApplicationDownload)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRunnerApplicationDownloads indicates an expected call of ListRunnerApplicationDownloads.
func (mr *MockEnterpriseServiceMockRecorder) ListRunnerApplicationDownloads(ctx, enterprise interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunnerApplicationDownloads", reflect.TypeOf((*MockEnterpriseService)(nil).ListRunnerApplicationDownloads), ctx, enterprise)
}

// ListRunners mocks base method.
func (m *MockEnterpriseService) ListRunners(ctx context.Context, enterprise string, opts *github.ListOptions) (*github.Runners, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunners", ctx, enterprise, opts)
	ret0, _ := ret[0].(*github.Runners)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRunners indicates an expected call of ListRunners.
func (mr *MockEnterpriseServiceMockRecorder) ListRunners(ctx, enterprise, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunners", reflect.TypeOf((*MockEnterpriseService)(nil).ListRunners), ctx, enterprise, opts)
}

// RemoveRunner mocks base method.
func (m *MockEnterpriseService) RemoveRunner(ctx context.Context, enterprise string, runnerID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRunner", ctx, enterprise, runnerID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRunner indicates an expected call of RemoveRunner.
func (mr *MockEnterpriseServiceMockRecorder) RemoveRunner(ctx, enterprise, runnerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRunner", reflect.TypeOf((*MockEnterpriseService)(nil).RemoveRunner), ctx, enterprise, runnerID)
}

// MockGistsService is a mock of GistsService interface.
type MockGistsService struct {
	ctrl     *gomock.Controller
	recorder *MockGistsServiceMockRecorder
}

// MockGistsServiceMockRecorder is the mock recorder for MockGistsService.
type MockGistsServiceMockRecorder struct {
	mock *MockGistsService
}

// NewMockGistsService creates a new mock instance.
func NewMockGistsService(ctrl *gomock.Controller) *MockGistsService {
	mock := &MockGistsService{ctrl: ctrl}
	mock.recorder = &MockGistsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGistsService) EXPECT() *MockGistsServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGistsService) Create(ctx context.Context, gist *github.Gist) (*github.Gist, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, gist)
	ret0, _ := ret[0].(*github.Gist)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockGistsServiceMockRecorder) Create(ctx, gist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGistsService)(nil).Create), ctx, gist)
}

// CreateComment mocks base method.
func (m *MockGistsService) CreateComment(ctx context.Context, gistID string, comment *github.GistComment) (*github.GistComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, gistID, comment)
	ret0, _ := ret[0].(*github.GistComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockGistsServiceMockRecorder) CreateComment(ctx, gistID, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockGistsService)(nil).CreateComment), ctx, gistID, comment)
}

// Delete mocks base method.
func (m *MockGistsService) Delete(ctx context.Context, id string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockGistsServiceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGistsService)(nil).Delete), ctx, id)
}

// DeleteComment mocks base method.
func (m *MockGistsService) DeleteComment(ctx context.Context, gistID string, commentID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, gistID, commentID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockGistsServiceMockRecorder) DeleteComment(ctx, gistID, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockGistsService)(nil).DeleteComment), ctx, gistID, commentID)
}

// Edit mocks base method.
func (m *MockGistsService) Edit(ctx context.Context, id string, gist *github.Gist) (*github.Gist, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", ctx, id, gist)
	ret0, _ := ret[0].(*github.Gist)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Edit indicates an expected call of Edit.
func (mr *MockGistsServiceMockRecorder) Edit(ctx, id, gist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockGistsService)(nil).Edit), ctx, id, gist)
}

// EditComment mocks base method.
func (m *MockGistsService) EditComment(ctx context.Context, gistID string, commentID int64, comment *github.GistComment) (*github.GistComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditComment", ctx, gistID, commentID, comment)
	ret0, _ := ret[0].(*github.GistComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditComment indicates an expected call of EditComment.
func (mr *MockGistsServiceMockRecorder) EditComment(ctx, gistID, commentID, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditComment", reflect.TypeOf((*MockGistsService)(nil).EditComment), ctx, gistID, commentID, comment)
}

// Fork mocks base method.
func (m *MockGistsService) Fork(ctx context.Context, id string) (*github.Gist, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fork", ctx, id)
	ret0, _ := ret[0].(*github.Gist)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Fork indicates an expected call of Fork.
func (mr *MockGistsServiceMockRecorder) Fork(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fork", reflect.TypeOf((*MockGistsService)(nil).Fork), ctx, id)
}

// Get mocks base method.
func (m *MockGistsService) Get(ctx context.Context, id string) (*github.Gist, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*github.Gist)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockGistsServiceMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGistsService)(nil).Get), ctx, id)
}

// GetComment mocks base method.
func (m *MockGistsService) GetComment(ctx context.Context, gistID string, commentID int64) (*github.GistComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", ctx, gistID, commentID)
	ret0, _ := ret[0].(*github.GistComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetComment indicates an expected call of GetComment.
func (mr *MockGistsServiceMockRecorder) GetComment(ctx, gistID, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockGistsService)(nil).GetComment), ctx, gistID, commentID)
}

// GetRevision mocks base method.
func (m *MockGistsService) GetRevision(ctx context.Context, id, sha string) (*github.Gist, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRevision", ctx, id, sha)
	ret0, _ := ret[0].(*github.Gist)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRevision indicates an expected call of GetRevision.
func (mr *MockGistsServiceMockRecorder) GetRevision(ctx, id, sha interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevision", reflect.TypeOf((*MockGistsService)(nil).GetRevision), ctx, id, sha)
}

// IsStarred mocks base method.
func (m *MockGistsService) IsStarred(ctx context.Context, id string) (bool, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStarred", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsStarred indicates an expected call of IsStarred.
func (mr *MockGistsServiceMockRecorder) IsStarred(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStarred", reflect.TypeOf((*MockGistsService)(nil).IsStarred), ctx, id)
}

// List mocks base method.
func (m *MockGistsService) List(ctx context.Context, user string, opts *github.GistListOptions) ([]*github.Gist, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, user, opts)
	ret0, _ := ret[0].([]*github.Gist)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockGistsServiceMockRecorder) List(ctx, user, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGistsService)(nil).List), ctx, user, opts)
}

// ListAll mocks base method.
func (m *MockGistsService) ListAll(ctx context.Context, opts *github.GistListOptions) ([]*github.Gist, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx, opts)
	ret0, _ := ret[0].([]*github.Gist)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAll indicates an expected call of ListAll.
func (mr *MockGistsServiceMockRecorder) ListAll(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockGistsService)(nil).ListAll), ctx, opts)
}

// ListComments mocks base method.
func (m *MockGistsService) ListComments(ctx context.Context, gistID string, opts *github.ListOptions) ([]*github.GistComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComments", ctx, gistID, opts)
	ret0, _ := ret[0].([]*github.GistComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListComments indicates an expected call of ListComments.
func (mr *MockGistsServiceMockRecorder) ListComments(ctx, gistID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComments", reflect.TypeOf((*MockGistsService)(nil).ListComments), ctx, gistID, opts)
}

// ListCommits mocks base method.
func (m *MockGistsService) ListCommits(ctx context.Context, id string, opts *github.ListOptions) ([]*github.GistCommit, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommits", ctx, id, opts)
	ret0, _ := ret[0].([]*github.GistCommit)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCommits indicates an expected call of ListCommits.
func (mr *MockGistsServiceMockRecorder) ListCommits(ctx, id, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommits", reflect.TypeOf((*MockGistsService)(nil).ListCommits), ctx, id, opts)
}

// ListForks mocks base method.
func (m *MockGistsService) ListForks(ctx context.Context, id string, opts *github.ListOptions) ([]*github.GistFork, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForks", ctx, id, opts)
	ret0, _ := ret[0].([]*github.GistFork)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListForks indicates an expected call of ListForks.
func (mr *MockGistsServiceMockRecorder) ListForks(ctx, id, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForks", reflect.TypeOf((*MockGistsService)(nil).ListForks), ctx, id, opts)
}

// ListStarred mocks base method.
func (m *MockGistsService) ListStarred(ctx context.Context, opts *github.GistListOptions) ([]*github.Gist, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStarred", ctx, opts)
	ret0, _ := ret[0].([]*github.Gist)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListStarred indicates an expected call of ListStarred.
func (mr *MockGistsServiceMockRecorder) ListStarred(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStarred", reflect.TypeOf((*MockGistsService)(nil).ListStarred), ctx, opts)
}

// Star mocks base method.
func (m *MockGistsService) Star(ctx context.Context, id string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Star", ctx, id)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Star indicates an expected call of Star.
func (mr *MockGistsServiceMockRecorder) Star(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Star", reflect.TypeOf((*MockGistsService)(nil).Star), ctx, id)
}

// Unstar mocks base method.
func (m *MockGistsService) Unstar(ctx context.Context, id string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unstar", ctx, id)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unstar indicates an expected call of Unstar.
func (mr *MockGistsServiceMockRecorder) Unstar(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unstar", reflect.TypeOf((*MockGistsService)(nil).Unstar), ctx, id)
}

// MockGitService is a mock of GitService interface.
type MockGitService struct {
	ctrl     *gomock.Controller
	recorder *MockGitServiceMockRecorder
}

// MockGitServiceMockRecorder is the mock recorder for MockGitService.
type MockGitServiceMockRecorder struct {
	mock *MockGitService
}

// NewMockGitService creates a new mock instance.
func NewMockGitService(ctrl *gomock.Controller) *MockGitService {
	mock := &MockGitService{ctrl: ctrl}
	mock.recorder = &MockGitServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitService) EXPECT() *MockGitServiceMockRecorder {
	return m.recorder
}

// CreateBlob mocks base method.
func (m *MockGitService) CreateBlob(ctx context.Context, owner, repo string, blob *github.Blob) (*github.Blob, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlob", ctx, owner, repo, blob)
	ret0, _ := ret[0].(*github.Blob)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateBlob indicates an expected call of CreateBlob.
func (mr *MockGitServiceMockRecorder) CreateBlob(ctx, owner, repo, blob interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlob", reflect.TypeOf((*MockGitService)(nil).CreateBlob), ctx, owner, repo, blob)
}

// CreateCommit mocks base method.
func (m *MockGitService) CreateCommit(ctx context.Context, owner, repo string, commit *github.Commit) (*github.Commit, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommit", ctx, owner, repo, commit)
	ret0, _ := ret[0].(*github.Commit)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCommit indicates an expected call of CreateCommit.
func (mr *MockGitServiceMockRecorder) CreateCommit(ctx, owner, repo, commit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommit", reflect.TypeOf((*MockGitService)(nil).CreateCommit), ctx, owner, repo, commit)
}

// CreateRef mocks base method.
func (m *MockGitService) CreateRef(ctx context.Context, owner, repo string, ref *github.Reference) (*github.Reference, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRef", ctx, owner, repo, ref)
	ret0, _ := ret[0].(*github.Reference)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRef indicates an expected call of CreateRef.
func (mr *MockGitServiceMockRecorder) CreateRef(ctx, owner, repo, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRef", reflect.TypeOf((*MockGitService)(nil).CreateRef), ctx, owner, repo, ref)
}

// CreateTag mocks base method.
func (m *MockGitService) CreateTag(ctx context.Context, owner, repo string, tag *github.Tag) (*github.Tag, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", ctx, owner, repo, tag)
	ret0, _ := ret[0].(*github.Tag)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockGitServiceMockRecorder) CreateTag(ctx, owner, repo, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockGitService)(nil).CreateTag), ctx, owner, repo, tag)
}

// CreateTree mocks base method.
func (m *MockGitService) CreateTree(ctx context.Context, owner, repo, baseTree string, entries []*github.TreeEntry) (*github.Tree, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTree", ctx, owner, repo, baseTree, entries)
	ret0, _ := ret[0].(*github.Tree)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTree indicates an expected call of CreateTree.
func (mr *MockGitServiceMockRecorder) CreateTree(ctx, owner, repo, baseTree, entries interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTree", reflect.TypeOf((*MockGitService)(nil).CreateTree), ctx, owner, repo, baseTree, entries)
}

// DeleteRef mocks base method.
func (m *MockGitService) DeleteRef(ctx context.Context, owner, repo, ref string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRef", ctx, owner, repo, ref)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRef indicates an expected call of DeleteRef.
func (mr *MockGitServiceMockRecorder) DeleteRef(ctx, owner, repo, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRef", reflect.TypeOf((*MockGitService)(nil).DeleteRef), ctx, owner, repo, ref)
}

// GetBlob mocks base method.
func (m *MockGitService) GetBlob(ctx context.Context, owner, repo, sha string) (*github.Blob, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlob", ctx, owner, repo, sha)
	ret0, _ := ret[0].(*github.Blob)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBlob indicates an expected call of GetBlob.
func (mr *MockGitServiceMockRecorder) GetBlob(ctx, owner, repo, sha interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlob", reflect.TypeOf((*MockGitService)(nil).GetBlob), ctx, owner, repo, sha)
}

// GetBlobRaw mocks base method.
func (m *MockGitService) GetBlobRaw(ctx context.Context, owner, repo, sha string) ([]uint8, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlobRaw", ctx, owner, repo, sha)
	ret0, _ := ret[0].([]uint8)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBlobRaw indicates an expected call of GetBlobRaw.
func (mr *MockGitServiceMockRecorder) GetBlobRaw(ctx, owner, repo, sha interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlobRaw", reflect.TypeOf((*MockGitService)(nil).GetBlobRaw), ctx, owner, repo, sha)
}

// GetCommit mocks base method.
func (m *MockGitService) GetCommit(ctx context.Context, owner, repo, sha string) (*github.Commit, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommit", ctx, owner, repo, sha)
	ret0, _ := ret[0].(*github.Commit)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommit indicates an expected call of GetCommit.
func (mr *MockGitServiceMockRecorder) GetCommit(ctx, owner, repo, sha interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommit", reflect.TypeOf((*MockGitService)(nil).GetCommit), ctx, owner, repo, sha)
}

// GetRef mocks base method.
func (m *MockGitService) GetRef(ctx context.Context, owner, repo, ref string) (*github.Reference, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRef", ctx, owner, repo, ref)
	ret0, _ := ret[0].(*github.Reference)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRef indicates an expected call of GetRef.
func (mr *MockGitServiceMockRecorder) GetRef(ctx, owner, repo, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRef", reflect.TypeOf((*MockGitService)(nil).GetRef), ctx, owner, repo, ref)
}

// GetTag mocks base method.
func (m *MockGitService) GetTag(ctx context.Context, owner, repo, sha string) (*github.Tag, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTag", ctx, owner, repo, sha)
	ret0, _ := ret[0].(*github.Tag)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTag indicates an expected call of GetTag.
func (mr *MockGitServiceMockRecorder) GetTag(ctx, owner, repo, sha interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTag", reflect.TypeOf((*MockGitService)(nil).GetTag), ctx, owner, repo, sha)
}

// GetTree mocks base method.
func (m *MockGitService) GetTree(ctx context.Context, owner, repo, sha string, recursive bool) (*github.Tree, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTree", ctx, owner, repo, sha, recursive)
	ret0, _ := ret[0].(*github.Tree)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTree indicates an expected call of GetTree.
func (mr *MockGitServiceMockRecorder) GetTree(ctx, owner, repo, sha, recursive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTree", reflect.TypeOf((*MockGitService)(nil).GetTree), ctx, owner, repo, sha, recursive)
}

// ListMatchingRefs mocks base method.
func (m *MockGitService) ListMatchingRefs(ctx context.Context, owner, repo string, opts *github.ReferenceListOptions) ([]*github.Reference, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMatchingRefs", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.Reference)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMatchingRefs indicates an expected call of ListMatchingRefs.
func (mr *MockGitServiceMockRecorder) ListMatchingRefs(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchingRefs", reflect.TypeOf((*MockGitService)(nil).ListMatchingRefs), ctx, owner, repo, opts)
}

// UpdateRef mocks base method.
func (m *MockGitService) UpdateRef(ctx context.Context, owner, repo string, ref *github.Reference, force bool) (*github.Reference, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRef", ctx, owner, repo, ref, force)
	ret0, _ := ret[0].(*github.Reference)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateRef indicates an expected call of UpdateRef.
func (mr *MockGitServiceMockRecorder) UpdateRef(ctx, owner, repo, ref, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRef", reflect.TypeOf((*MockGitService)(nil).UpdateRef), ctx, owner, repo, ref, force)
}

// MockGitignoresService is a mock of GitignoresService interface.
type MockGitignoresService struct {
	ctrl     *gomock.Controller
	recorder *MockGitignoresServiceMockRecorder
}

// MockGitignoresServiceMockRecorder is the mock recorder for MockGitignoresService.
type MockGitignoresServiceMockRecorder struct {
	mock *MockGitignoresService
}

// NewMockGitignoresService creates a new mock instance.
func NewMockGitignoresService(ctrl *gomock.Controller) *MockGitignoresService {
	mock := &MockGitignoresService{ctrl: ctrl}
	mock.recorder = &MockGitignoresServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitignoresService) EXPECT() *MockGitignoresServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockGitignoresService) Get(ctx context.Context, name string) (*github.Gitignore, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name)
	ret0, _ := ret[0].(*github.Gitignore)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockGitignoresServiceMockRecorder) Get(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGitignoresService)(nil).Get), ctx, name)
}

// List mocks base method.
func (m *MockGitignoresService) List(ctx context.Context) ([]string, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockGitignoresServiceMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGitignoresService)(nil).List), ctx)
}

// MockInteractionsService is a mock of InteractionsService interface.
type MockInteractionsService struct {
	ctrl     *gomock.Controller
	recorder *MockInteractionsServiceMockRecorder
}

// MockInteractionsServiceMockRecorder is the mock recorder for MockInteractionsService.
type MockInteractionsServiceMockRecorder struct {
	mock *MockInteractionsService
}

// NewMockInteractionsService creates a new mock instance.
func NewMockInteractionsService(ctrl *gomock.Controller) *MockInteractionsService {
	mock := &MockInteractionsService{ctrl: ctrl}
	mock.recorder = &MockInteractionsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInteractionsService) EXPECT() *MockInteractionsServiceMockRecorder {
	return m.recorder
}

// GetRestrictionsForOrg mocks base method.
func (m *MockInteractionsService) GetRestrictionsForOrg(ctx context.Context, organization string) (*github.InteractionRestriction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestrictionsForOrg", ctx, organization)
	ret0, _ := ret[0].(*github.InteractionRestriction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRestrictionsForOrg indicates an expected call of GetRestrictionsForOrg.
func (mr *MockInteractionsServiceMockRecorder) GetRestrictionsForOrg(ctx, organization interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestrictionsForOrg", reflect.TypeOf((*MockInteractionsService)(nil).GetRestrictionsForOrg), ctx, organization)
}

// GetRestrictionsForRepo mocks base method.
func (m *MockInteractionsService) GetRestrictionsForRepo(ctx context.Context, owner, repo string) (*github.InteractionRestriction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestrictionsForRepo", ctx, owner, repo)
	ret0, _ := ret[0].(*github.InteractionRestriction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRestrictionsForRepo indicates an expected call of GetRestrictionsForRepo.
func (mr *MockInteractionsServiceMockRecorder) GetRestrictionsForRepo(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestrictionsForRepo", reflect.TypeOf((*MockInteractionsService)(nil).GetRestrictionsForRepo), ctx, owner, repo)
}

// RemoveRestrictionsFromOrg mocks base method.
func (m *MockInteractionsService) RemoveRestrictionsFromOrg(ctx context.Context, organization string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRestrictionsFromOrg", ctx, organization)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRestrictionsFromOrg indicates an expected call of RemoveRestrictionsFromOrg.
func (mr *MockInteractionsServiceMockRecorder) RemoveRestrictionsFromOrg(ctx, organization interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRestrictionsFromOrg", reflect.TypeOf((*MockInteractionsService)(nil).RemoveRestrictionsFromOrg), ctx, organization)
}

// RemoveRestrictionsFromRepo mocks base method.
func (m *MockInteractionsService) RemoveRestrictionsFromRepo(ctx context.Context, owner, repo string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRestrictionsFromRepo", ctx, owner, repo)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRestrictionsFromRepo indicates an expected call of RemoveRestrictionsFromRepo.
func (mr *MockInteractionsServiceMockRecorder) RemoveRestrictionsFromRepo(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRestrictionsFromRepo", reflect.TypeOf((*MockInteractionsService)(nil).RemoveRestrictionsFromRepo), ctx, owner, repo)
}

// UpdateRestrictionsForOrg mocks base method.
func (m *MockInteractionsService) UpdateRestrictionsForOrg(ctx context.Context, organization, limit string) (*github.InteractionRestriction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRestrictionsForOrg", ctx, organization, limit)
	ret0, _ := ret[0].(*github.InteractionRestriction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateRestrictionsForOrg indicates an expected call of UpdateRestrictionsForOrg.
func (mr *MockInteractionsServiceMockRecorder) UpdateRestrictionsForOrg(ctx, organization, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRestrictionsForOrg", reflect.TypeOf((*MockInteractionsService)(nil).UpdateRestrictionsForOrg), ctx, organization, limit)
}

// UpdateRestrictionsForRepo mocks base method.
func (m *MockInteractionsService) UpdateRestrictionsForRepo(ctx context.Context, owner, repo, limit string) (*github.InteractionRestriction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRestrictionsForRepo", ctx, owner, repo, limit)
	ret0, _ := ret[0].(*github.InteractionRestriction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateRestrictionsForRepo indicates an expected call of UpdateRestrictionsForRepo.
func (mr *MockInteractionsServiceMockRecorder) UpdateRestrictionsForRepo(ctx, owner, repo, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRestrictionsForRepo", reflect.TypeOf((*MockInteractionsService)(nil).UpdateRestrictionsForRepo), ctx, owner, repo, limit)
}

// MockIssueImportService is a mock of IssueImportService interface.
type MockIssueImportService struct {
	ctrl     *gomock.Controller
	recorder *MockIssueImportServiceMockRecorder
}

// MockIssueImportServiceMockRecorder is the mock recorder for MockIssueImportService.
type MockIssueImportServiceMockRecorder struct {
	mock *MockIssueImportService
}

// NewMockIssueImportService creates a new mock instance.
func NewMockIssueImportService(ctrl *gomock.Controller) *MockIssueImportService {
	mock := &MockIssueImportService{ctrl: ctrl}
	mock.recorder = &MockIssueImportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssueImportService) EXPECT() *MockIssueImportServiceMockRecorder {
	return m.recorder
}

// CheckStatus mocks base method.
func (m *MockIssueImportService) CheckStatus(ctx context.Context, owner, repo string, issueID int64) (*github.IssueImportResponse, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckStatus", ctx, owner, repo, issueID)
	ret0, _ := ret[0].(*github.IssueImportResponse)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckStatus indicates an expected call of CheckStatus.
func (mr *MockIssueImportServiceMockRecorder) CheckStatus(ctx, owner, repo, issueID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckStatus", reflect.TypeOf((*MockIssueImportService)(nil).CheckStatus), ctx, owner, repo, issueID)
}

// CheckStatusSince mocks base method.
func (m *MockIssueImportService) CheckStatusSince(ctx context.Context, owner, repo string, since time.Time) ([]*github.IssueImportResponse, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckStatusSince", ctx, owner, repo, since)
	ret0, _ := ret[0].([]*github.IssueImportResponse)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckStatusSince indicates an expected call of CheckStatusSince.
func (mr *MockIssueImportServiceMockRecorder) CheckStatusSince(ctx, owner, repo, since interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckStatusSince", reflect.TypeOf((*MockIssueImportService)(nil).CheckStatusSince), ctx, owner, repo, since)
}

// Create mocks base method.
func (m *MockIssueImportService) Create(ctx context.Context, owner, repo string, issue *github.IssueImportRequest) (*github.IssueImportResponse, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, owner, repo, issue)
	ret0, _ := ret[0].(*github.IssueImportResponse)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockIssueImportServiceMockRecorder) Create(ctx, owner, repo, issue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIssueImportService)(nil).Create), ctx, owner, repo, issue)
}

// MockIssuesService is a mock of IssuesService interface.
type MockIssuesService struct {
	ctrl     *gomock.Controller
	recorder *MockIssuesServiceMockRecorder
}

// MockIssuesServiceMockRecorder is the mock recorder for MockIssuesService.
type MockIssuesServiceMockRecorder struct {
	mock *MockIssuesService
}

// NewMockIssuesService creates a new mock instance.
func NewMockIssuesService(ctrl *gomock.Controller) *MockIssuesService {
	mock := &MockIssuesService{ctrl: ctrl}
	mock.recorder = &MockIssuesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssuesService) EXPECT() *MockIssuesServiceMockRecorder {
	return m.recorder
}

// AddAssignees mocks base method.
func (m *MockIssuesService) AddAssignees(ctx context.Context, owner, repo string, number int, assignees []string) (*github.Issue, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAssignees", ctx, owner, repo, number, assignees)
	ret0, _ := ret[0].(*github.Issue)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddAssignees indicates an expected call of AddAssignees.
func (mr *MockIssuesServiceMockRecorder) AddAssignees(ctx, owner, repo, number, assignees interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAssignees", reflect.TypeOf((*MockIssuesService)(nil).AddAssignees), ctx, owner, repo, number, assignees)
}

// AddLabelsToIssue mocks base method.
func (m *MockIssuesService) AddLabelsToIssue(ctx context.Context, owner, repo string, number int, labels []string) ([]*github.Label, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLabelsToIssue", ctx, owner, repo, number, labels)
	ret0, _ := ret[0].([]*github.Label)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddLabelsToIssue indicates an expected call of AddLabelsToIssue.
func (mr *MockIssuesServiceMockRecorder) AddLabelsToIssue(ctx, owner, repo, number, labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLabelsToIssue", reflect.TypeOf((*MockIssuesService)(nil).AddLabelsToIssue), ctx, owner, repo, number, labels)
}

// Create mocks base method.
func (m *MockIssuesService) Create(ctx context.Context, owner, repo string, issue *github.IssueRequest) (*github.Issue, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, owner, repo, issue)
	ret0, _ := ret[0].(*github.Issue)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockIssuesServiceMockRecorder) Create(ctx, owner, repo, issue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIssuesService)(nil).Create), ctx, owner, repo, issue)
}

// CreateComment mocks base method.
func (m *MockIssuesService) CreateComment(ctx context.Context, owner, repo string, number int, comment *github.IssueComment) (*github.IssueComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, owner, repo, number, comment)
	ret0, _ := ret[0].(*github.IssueComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockIssuesServiceMockRecorder) CreateComment(ctx, owner, repo, number, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockIssuesService)(nil).CreateComment), ctx, owner, repo, number, comment)
}

// CreateLabel mocks base method.
func (m *MockIssuesService) CreateLabel(ctx context.Context, owner, repo string, label *github.Label) (*github.Label, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLabel", ctx, owner, repo, label)
	ret0, _ := ret[0].(*github.Label)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateLabel indicates an expected call of CreateLabel.
func (mr *MockIssuesServiceMockRecorder) CreateLabel(ctx, owner, repo, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLabel", reflect.TypeOf((*MockIssuesService)(nil).CreateLabel), ctx, owner, repo, label)
}

// CreateMilestone mocks base method.
func (m *MockIssuesService) CreateMilestone(ctx context.Context, owner, repo string, milestone *github.Milestone) (*github.Milestone, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMilestone", ctx, owner, repo, milestone)
	ret0, _ := ret[0].(*github.Milestone)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateMilestone indicates an expected call of CreateMilestone.
func (mr *MockIssuesServiceMockRecorder) CreateMilestone(ctx, owner, repo, milestone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMilestone", reflect.TypeOf((*MockIssuesService)(nil).CreateMilestone), ctx, owner, repo, milestone)
}

// DeleteComment mocks base method.
func (m *MockIssuesService) DeleteComment(ctx context.Context, owner, repo string, commentID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, owner, repo, commentID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockIssuesServiceMockRecorder) DeleteComment(ctx, owner, repo, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockIssuesService)(nil).DeleteComment), ctx, owner, repo, commentID)
}

// DeleteLabel mocks base method.
func (m *MockIssuesService) DeleteLabel(ctx context.Context, owner, repo, name string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLabel", ctx, owner, repo, name)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLabel indicates an expected call of DeleteLabel.
func (mr *MockIssuesServiceMockRecorder) DeleteLabel(ctx, owner, repo, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLabel", reflect.TypeOf((*MockIssuesService)(nil).DeleteLabel), ctx, owner, repo, name)
}

// DeleteMilestone mocks base method.
func (m *MockIssuesService) DeleteMilestone(ctx context.Context, owner, repo string, number int) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMilestone", ctx, owner, repo, number)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMilestone indicates an expected call of DeleteMilestone.
func (mr *MockIssuesServiceMockRecorder) DeleteMilestone(ctx, owner, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMilestone", reflect.TypeOf((*MockIssuesService)(nil).DeleteMilestone), ctx, owner, repo, number)
}

// Edit mocks base method.
func (m *MockIssuesService) Edit(ctx context.Context, owner, repo string, number int, issue *github.IssueRequest) (*github.Issue, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", ctx, owner, repo, number, issue)
	ret0, _ := ret[0].(*github.Issue)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Edit indicates an expected call of Edit.
func (mr *MockIssuesServiceMockRecorder) Edit(ctx, owner, repo, number, issue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockIssuesService)(nil).Edit), ctx, owner, repo, number, issue)
}

// EditComment mocks base method.
func (m *MockIssuesService) EditComment(ctx context.Context, owner, repo string, commentID int64, comment *github.IssueComment) (*github.IssueComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditComment", ctx, owner, repo, commentID, comment)
	ret0, _ := ret[0].(*github.IssueComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditComment indicates an expected call of EditComment.
func (mr *MockIssuesServiceMockRecorder) EditComment(ctx, owner, repo, commentID, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditComment", reflect.TypeOf((*MockIssuesService)(nil).EditComment), ctx, owner, repo, commentID, comment)
}

// EditLabel mocks base method.
func (m *MockIssuesService) EditLabel(ctx context.Context, owner, repo, name string, label *github.Label) (*github.Label, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditLabel", ctx, owner, repo, name, label)
	ret0, _ := ret[0].(*github.Label)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditLabel indicates an expected call of EditLabel.
func (mr *MockIssuesServiceMockRecorder) EditLabel(ctx, owner, repo, name, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditLabel", reflect.TypeOf((*MockIssuesService)(nil).EditLabel), ctx, owner, repo, name, label)
}

// EditMilestone mocks base method.
func (m *MockIssuesService) EditMilestone(ctx context.Context, owner, repo string, number int, milestone *github.Milestone) (*github.Milestone, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditMilestone", ctx, owner, repo, number, milestone)
	ret0, _ := ret[0].(*github.Milestone)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditMilestone indicates an expected call of EditMilestone.
func (mr *MockIssuesServiceMockRecorder) EditMilestone(ctx, owner, repo, number, milestone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditMilestone", reflect.TypeOf((*MockIssuesService)(nil).EditMilestone), ctx, owner, repo, number, milestone)
}

// Get mocks base method.
func (m *MockIssuesService) Get(ctx context.Context, owner, repo string, number int) (*github.Issue, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, owner, repo, number)
	ret0, _ := ret[0].(*github.Issue)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockIssuesServiceMockRecorder) Get(ctx, owner, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIssuesService)(nil).Get), ctx, owner, repo, number)
}

// GetComment mocks base method.
func (m *MockIssuesService) GetComment(ctx context.Context, owner, repo string, commentID int64) (*github.IssueComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", ctx, owner, repo, commentID)
	ret0, _ := ret[0].(*github.IssueComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetComment indicates an expected call of GetComment.
func (mr *MockIssuesServiceMockRecorder) GetComment(ctx, owner, repo, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockIssuesService)(nil).GetComment), ctx, owner, repo, commentID)
}

// GetEvent mocks base method.
func (m *MockIssuesService) GetEvent(ctx context.Context, owner, repo string, id int64) (*github.IssueEvent, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", ctx, owner, repo, id)
	ret0, _ := ret[0].(*github.IssueEvent)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockIssuesServiceMockRecorder) GetEvent(ctx, owner, repo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockIssuesService)(nil).GetEvent), ctx, owner, repo, id)
}

// GetLabel mocks base method.
func (m *MockIssuesService) GetLabel(ctx context.Context, owner, repo, name string) (*github.Label, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabel", ctx, owner, repo, name)
	ret0, _ := ret[0].(*github.Label)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLabel indicates an expected call of GetLabel.
func (mr *MockIssuesServiceMockRecorder) GetLabel(ctx, owner, repo, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabel", reflect.TypeOf((*MockIssuesService)(nil).GetLabel), ctx, owner, repo, name)
}

// GetMilestone mocks base method.
func (m *MockIssuesService) GetMilestone(ctx context.Context, owner, repo string, number int) (*github.Milestone, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMilestone", ctx, owner, repo, number)
	ret0, _ := ret[0].(*github.Milestone)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMilestone indicates an expected call of GetMilestone.
func (mr *MockIssuesServiceMockRecorder) GetMilestone(ctx, owner, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMilestone", reflect.TypeOf((*MockIssuesService)(nil).GetMilestone), ctx, owner, repo, number)
}

// IsAssignee mocks base method.
func (m *MockIssuesService) IsAssignee(ctx context.Context, owner, repo, user string) (bool, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAssignee", ctx, owner, repo, user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsAssignee indicates an expected call of IsAssignee.
func (mr *MockIssuesServiceMockRecorder) IsAssignee(ctx, owner, repo, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAssignee", reflect.TypeOf((*MockIssuesService)(nil).IsAssignee), ctx, owner, repo, user)
}

// List mocks base method.
func (m *MockIssuesService) List(ctx context.Context, all bool, opts *github.IssueListOptions) ([]*github.Issue, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, all, opts)
	ret0, _ := ret[0].([]*github.Issue)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockIssuesServiceMockRecorder) List(ctx, all, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIssuesService)(nil).List), ctx, all, opts)
}

// ListAssignees mocks base method.
func (m *MockIssuesService) ListAssignees(ctx context.Context, owner, repo string, opts *github.ListOptions) ([]*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssignees", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAssignees indicates an expected call of ListAssignees.
func (mr *MockIssuesServiceMockRecorder) ListAssignees(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssignees", reflect.TypeOf((*MockIssuesService)(nil).ListAssignees), ctx, owner, repo, opts)
}

// ListByOrg mocks base method.
func (m *MockIssuesService) ListByOrg(ctx context.Context, org string, opts *github.IssueListOptions) ([]*github.Issue, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByOrg", ctx, org, opts)
	ret0, _ := ret[0].([]*github.Issue)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByOrg indicates an expected call of ListByOrg.
func (mr *MockIssuesServiceMockRecorder) ListByOrg(ctx, org, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByOrg", reflect.TypeOf((*MockIssuesService)(nil).ListByOrg), ctx, org, opts)
}

// ListByRepo mocks base method.
func (m *MockIssuesService) ListByRepo(ctx context.Context, owner, repo string, opts *github.IssueListByRepoOptions) ([]*github.Issue, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByRepo", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.Issue)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByRepo indicates an expected call of ListByRepo.
func (mr *MockIssuesServiceMockRecorder) ListByRepo(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByRepo", reflect.TypeOf((*MockIssuesService)(nil).ListByRepo), ctx, owner, repo, opts)
}

// ListComments mocks base method.
func (m *MockIssuesService) ListComments(ctx context.Context, owner, repo string, number int, opts *github.IssueListCommentsOptions) ([]*github.IssueComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComments", ctx, owner, repo, number, opts)
	ret0, _ := ret[0].([]*github.IssueComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListComments indicates an expected call of ListComments.
func (mr *MockIssuesServiceMockRecorder) ListComments(ctx, owner, repo, number, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComments", reflect.TypeOf((*MockIssuesService)(nil).ListComments), ctx, owner, repo, number, opts)
}

// ListIssueEvents mocks base method.
func (m *MockIssuesService) ListIssueEvents(ctx context.Context, owner, repo string, number int, opts *github.ListOptions) ([]*github.IssueEvent, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIssueEvents", ctx, owner, repo, number, opts)
	ret0, _ := ret[0].([]*github.IssueEvent)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListIssueEvents indicates an expected call of ListIssueEvents.
func (mr *MockIssuesServiceMockRecorder) ListIssueEvents(ctx, owner, repo, number, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssueEvents", reflect.TypeOf((*MockIssuesService)(nil).ListIssueEvents), ctx, owner, repo, number, opts)
}

// ListIssueTimeline mocks base method.
func (m *MockIssuesService) ListIssueTimeline(ctx context.Context, owner, repo string, number int, opts *github.ListOptions) ([]*github.Timeline, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIssueTimeline", ctx, owner, repo, number, opts)
	ret0, _ := ret[0].([]*github.Timeline)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListIssueTimeline indicates an expected call of ListIssueTimeline.
func (mr *MockIssuesServiceMockRecorder) ListIssueTimeline(ctx, owner, repo, number, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssueTimeline", reflect.TypeOf((*MockIssuesService)(nil).ListIssueTimeline), ctx, owner, repo, number, opts)
}

// ListLabels mocks base method.
func (m *MockIssuesService) ListLabels(ctx context.Context, owner, repo string, opts *github.ListOptions) ([]*github.Label, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLabels", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.Label)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListLabels indicates an expected call of ListLabels.
func (mr *MockIssuesServiceMockRecorder) ListLabels(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLabels", reflect.TypeOf((*MockIssuesService)(nil).ListLabels), ctx, owner, repo, opts)
}

// ListLabelsByIssue mocks base method.
func (m *MockIssuesService) ListLabelsByIssue(ctx context.Context, owner, repo string, number int, opts *github.ListOptions) ([]*github.Label, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLabelsByIssue", ctx, owner, repo, number, opts)
	ret0, _ := ret[0].([]*github.Label)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListLabelsByIssue indicates an expected call of ListLabelsByIssue.
func (mr *MockIssuesServiceMockRecorder) ListLabelsByIssue(ctx, owner, repo, number, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLabelsByIssue", reflect.TypeOf((*MockIssuesService)(nil).ListLabelsByIssue), ctx, owner, repo, number, opts)
}

// ListLabelsForMilestone mocks base method.
func (m *MockIssuesService) ListLabelsForMilestone(ctx context.Context, owner, repo string, number int, opts *github.ListOptions) ([]*github.Label, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLabelsForMilestone", ctx, owner, repo, number, opts)
	ret0, _ := ret[0].([]*github.Label)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListLabelsForMilestone indicates an expected call of ListLabelsForMilestone.
func (mr *MockIssuesServiceMockRecorder) ListLabelsForMilestone(ctx, owner, repo, number, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLabelsForMilestone", reflect.TypeOf((*MockIssuesService)(nil).ListLabelsForMilestone), ctx, owner, repo, number, opts)
}

// ListMilestones mocks base method.
func (m *MockIssuesService) ListMilestones(ctx context.Context, owner, repo string, opts *github.MilestoneListOptions) ([]*github.Milestone, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMilestones", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.Milestone)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMilestones indicates an expected call of ListMilestones.
func (mr *MockIssuesServiceMockRecorder) ListMilestones(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMilestones", reflect.TypeOf((*MockIssuesService)(nil).ListMilestones), ctx, owner, repo, opts)
}

// ListRepositoryEvents mocks base method.
func (m *MockIssuesService) ListRepositoryEvents(ctx context.Context, owner, repo string, opts *github.ListOptions) ([]*github.IssueEvent, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoryEvents", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.IssueEvent)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRepositoryEvents indicates an expected call of ListRepositoryEvents.
func (mr *MockIssuesServiceMockRecorder) ListRepositoryEvents(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoryEvents", reflect.TypeOf((*MockIssuesService)(nil).ListRepositoryEvents), ctx, owner, repo, opts)
}

// Lock mocks base method.
func (m *MockIssuesService) Lock(ctx context.Context, owner, repo string, number int, opts *github.LockIssueOptions) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", ctx, owner, repo, number, opts)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lock indicates an expected call of Lock.
func (mr *MockIssuesServiceMockRecorder) Lock(ctx, owner, repo, number, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockIssuesService)(nil).Lock), ctx, owner, repo, number, opts)
}

// RemoveAssignees mocks base method.
func (m *MockIssuesService) RemoveAssignees(ctx context.Context, owner, repo string, number int, assignees []string) (*github.Issue, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAssignees", ctx, owner, repo, number, assignees)
	ret0, _ := ret[0].(*github.Issue)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RemoveAssignees indicates an expected call of RemoveAssignees.
func (mr *MockIssuesServiceMockRecorder) RemoveAssignees(ctx, owner, repo, number, assignees interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAssignees", reflect.TypeOf((*MockIssuesService)(nil).RemoveAssignees), ctx, owner, repo, number, assignees)
}

// RemoveLabelForIssue mocks base method.
func (m *MockIssuesService) RemoveLabelForIssue(ctx context.Context, owner, repo string, number int, label string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLabelForIssue", ctx, owner, repo, number, label)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLabelForIssue indicates an expected call of RemoveLabelForIssue.
func (mr *MockIssuesServiceMockRecorder) RemoveLabelForIssue(ctx, owner, repo, number, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLabelForIssue", reflect.TypeOf((*MockIssuesService)(nil).RemoveLabelForIssue), ctx, owner, repo, number, label)
}

// RemoveLabelsForIssue mocks base method.
func (m *MockIssuesService) RemoveLabelsForIssue(ctx context.Context, owner, repo string, number int) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLabelsForIssue", ctx, owner, repo, number)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLabelsForIssue indicates an expected call of RemoveLabelsForIssue.
func (mr *MockIssuesServiceMockRecorder) RemoveLabelsForIssue(ctx, owner, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLabelsForIssue", reflect.TypeOf((*MockIssuesService)(nil).RemoveLabelsForIssue), ctx, owner, repo, number)
}

// RemoveMilestone mocks base method.
func (m *MockIssuesService) RemoveMilestone(ctx context.Context, owner, repo string, issueNumber int) (*github.Issue, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMilestone", ctx, owner, repo, issueNumber)
	ret0, _ := ret[0].(*github.Issue)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RemoveMilestone indicates an expected call of RemoveMilestone.
func (mr *MockIssuesServiceMockRecorder) RemoveMilestone(ctx, owner, repo, issueNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMilestone", reflect.TypeOf((*MockIssuesService)(nil).RemoveMilestone), ctx, owner, repo, issueNumber)
}

// ReplaceLabelsForIssue mocks base method.
func (m *MockIssuesService) ReplaceLabelsForIssue(ctx context.Context, owner, repo string, number int, labels []string) ([]*github.Label, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceLabelsForIssue", ctx, owner, repo, number, labels)
	ret0, _ := ret[0].([]*github.Label)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReplaceLabelsForIssue indicates an expected call of ReplaceLabelsForIssue.
func (mr *MockIssuesServiceMockRecorder) ReplaceLabelsForIssue(ctx, owner, repo, number, labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceLabelsForIssue", reflect.TypeOf((*MockIssuesService)(nil).ReplaceLabelsForIssue), ctx, owner, repo, number, labels)
}

// Unlock mocks base method.
func (m *MockIssuesService) Unlock(ctx context.Context, owner, repo string, number int) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlock", ctx, owner, repo, number)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unlock indicates an expected call of Unlock.
func (mr *MockIssuesServiceMockRecorder) Unlock(ctx, owner, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockIssuesService)(nil).Unlock), ctx, owner, repo, number)
}

// MockLicensesService is a mock of LicensesService interface.
type MockLicensesService struct {
	ctrl     *gomock.Controller
	recorder *MockLicensesServiceMockRecorder
}

// MockLicensesServiceMockRecorder is the mock recorder for MockLicensesService.
type MockLicensesServiceMockRecorder struct {
	mock *MockLicensesService
}

// NewMockLicensesService creates a new mock instance.
func NewMockLicensesService(ctrl *gomock.Controller) *MockLicensesService {
	mock := &MockLicensesService{ctrl: ctrl}
	mock.recorder = &MockLicensesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLicensesService) EXPECT() *MockLicensesServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockLicensesService) Get(ctx context.Context, licenseName string) (*github.License, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, licenseName)
	ret0, _ := ret[0].(*github.License)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockLicensesServiceMockRecorder) Get(ctx, licenseName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLicensesService)(nil).Get), ctx, licenseName)
}

// List mocks base method.
func (m *MockLicensesService) List(ctx context.Context) ([]*github.License, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]*github.License)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockLicensesServiceMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLicensesService)(nil).List), ctx)
}

// MockMarketplaceService is a mock of MarketplaceService interface.
type MockMarketplaceService struct {
	ctrl     *gomock.Controller
	recorder *MockMarketplaceServiceMockRecorder
}

// MockMarketplaceServiceMockRecorder is the mock recorder for MockMarketplaceService.
type MockMarketplaceServiceMockRecorder struct {
	mock *MockMarketplaceService
}

// NewMockMarketplaceService creates a new mock instance.
func NewMockMarketplaceService(ctrl *gomock.Controller) *MockMarketplaceService {
	mock := &MockMarketplaceService{ctrl: ctrl}
	mock.recorder = &MockMarketplaceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarketplaceService) EXPECT() *MockMarketplaceServiceMockRecorder {
	return m.recorder
}

// GetPlanAccountForAccount mocks base method.
func (m *MockMarketplaceService) GetPlanAccountForAccount(ctx context.Context, accountID int64) (*github.MarketplacePlanAccount, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlanAccountForAccount", ctx, accountID)
	ret0, _ := ret[0].(*github.MarketplacePlanAccount)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPlanAccountForAccount indicates an expected call of GetPlanAccountForAccount.
func (mr *MockMarketplaceServiceMockRecorder) GetPlanAccountForAccount(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlanAccountForAccount", reflect.TypeOf((*MockMarketplaceService)(nil).GetPlanAccountForAccount), ctx, accountID)
}

// ListMarketplacePurchasesForUser mocks base method.
func (m *MockMarketplaceService) ListMarketplacePurchasesForUser(ctx context.Context, opts *github.ListOptions) ([]*github.MarketplacePurchase, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMarketplacePurchasesForUser", ctx, opts)
	ret0, _ := ret[0].([]*github.MarketplacePurchase)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMarketplacePurchasesForUser indicates an expected call of ListMarketplacePurchasesForUser.
func (mr *MockMarketplaceServiceMockRecorder) ListMarketplacePurchasesForUser(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMarketplacePurchasesForUser", reflect.TypeOf((*MockMarketplaceService)(nil).ListMarketplacePurchasesForUser), ctx, opts)
}

// ListPlanAccountsForPlan mocks base method.
func (m *MockMarketplaceService) ListPlanAccountsForPlan(ctx context.Context, planID int64, opts *github.ListOptions) ([]*github.MarketplacePlanAccount, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlanAccountsForPlan", ctx, planID, opts)
	ret0, _ := ret[0].([]*github.MarketplacePlanAccount)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPlanAccountsForPlan indicates an expected call of ListPlanAccountsForPlan.
func (mr *MockMarketplaceServiceMockRecorder) ListPlanAccountsForPlan(ctx, planID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlanAccountsForPlan", reflect.TypeOf((*MockMarketplaceService)(nil).ListPlanAccountsForPlan), ctx, planID, opts)
}

// ListPlans mocks base method.
func (m *MockMarketplaceService) ListPlans(ctx context.Context, opts *github.ListOptions) ([]*github.MarketplacePlan, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlans", ctx, opts)
	ret0, _ := ret[0].([]*github.MarketplacePlan)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPlans indicates an expected call of ListPlans.
func (mr *MockMarketplaceServiceMockRecorder) ListPlans(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlans", reflect.TypeOf((*MockMarketplaceService)(nil).ListPlans), ctx, opts)
}

// MockMigrationsService is a mock of MigrationsService interface.
type MockMigrationsService struct {
	ctrl     *gomock.Controller
	recorder *MockMigrationsServiceMockRecorder
}

// MockMigrationsServiceMockRecorder is the mock recorder for MockMigrationsService.
type MockMigrationsServiceMockRecorder struct {
	mock *MockMigrationsService
}

// NewMockMigrationsService creates a new mock instance.
func NewMockMigrationsService(ctrl *gomock.Controller) *MockMigrationsService {
	mock := &MockMigrationsService{ctrl: ctrl}
	mock.recorder = &MockMigrationsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMigrationsService) EXPECT() *MockMigrationsServiceMockRecorder {
	return m.recorder
}

// CancelImport mocks base method.
func (m *MockMigrationsService) CancelImport(arg0 context.Context, arg1, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelImport", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelImport indicates an expected call of CancelImport.
func (mr *MockMigrationsServiceMockRecorder) CancelImport(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelImport", reflect.TypeOf((*MockMigrationsService)(nil).CancelImport), arg0, arg1, arg2)
}

// CommitAuthors mocks base method.
func (m *MockMigrationsService) CommitAuthors(arg0 context.Context, arg1, arg2 string) ([]*github.SourceImportAuthor, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitAuthors", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.SourceImportAuthor)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CommitAuthors indicates an expected call of CommitAuthors.
func (mr *MockMigrationsServiceMockRecorder) CommitAuthors(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitAuthors", reflect.TypeOf((*MockMigrationsService)(nil).CommitAuthors), arg0, arg1, arg2)
}

// DeleteMigration mocks base method.
func (m *MockMigrationsService) DeleteMigration(arg0 context.Context, arg1 string, arg2 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMigration", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMigration indicates an expected call of DeleteMigration.
func (mr *MockMigrationsServiceMockRecorder) DeleteMigration(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMigration", reflect.TypeOf((*MockMigrationsService)(nil).DeleteMigration), arg0, arg1, arg2)
}

// DeleteUserMigration mocks base method.
func (m *MockMigrationsService) DeleteUserMigration(arg0 context.Context, arg1 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserMigration", arg0, arg1)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserMigration indicates an expected call of DeleteUserMigration.
func (mr *MockMigrationsServiceMockRecorder) DeleteUserMigration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserMigration", reflect.TypeOf((*MockMigrationsService)(nil).DeleteUserMigration), arg0, arg1)
}

// ImportProgress mocks base method.
func (m *MockMigrationsService) ImportProgress(arg0 context.Context, arg1, arg2 string) (*github.Import, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportProgress", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Import)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ImportProgress indicates an expected call of ImportProgress.
func (mr *MockMigrationsServiceMockRecorder) ImportProgress(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportProgress", reflect.TypeOf((*MockMigrationsService)(nil).ImportProgress), arg0, arg1, arg2)
}

// LargeFiles mocks base method.
func (m *MockMigrationsService) LargeFiles(arg0 context.Context, arg1, arg2 string) ([]*github.LargeFile, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LargeFiles", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.LargeFile)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LargeFiles indicates an expected call of LargeFiles.
func (mr *MockMigrationsServiceMockRecorder) LargeFiles(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LargeFiles", reflect.TypeOf((*MockMigrationsService)(nil).LargeFiles), arg0, arg1, arg2)
}

// ListMigrations mocks base method.
func (m *MockMigrationsService) ListMigrations(arg0 context.Context, arg1 string, arg2 *github.ListOptions) ([]*github.Migration, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMigrations", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.Migration)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMigrations indicates an expected call of ListMigrations.
func (mr *MockMigrationsServiceMockRecorder) ListMigrations(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMigrations", reflect.TypeOf((*MockMigrationsService)(nil).ListMigrations), arg0, arg1, arg2)
}

// ListUserMigrations mocks base method.
func (m *MockMigrationsService) ListUserMigrations(arg0 context.Context, arg1 *github.ListOptions) ([]*github.UserMigration, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserMigrations", arg0, arg1)
	ret0, _ := ret[0].([]*github.UserMigration)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUserMigrations indicates an expected call of ListUserMigrations.
func (mr *MockMigrationsServiceMockRecorder) ListUserMigrations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserMigrations", reflect.TypeOf((*MockMigrationsService)(nil).ListUserMigrations), arg0, arg1)
}

// MapCommitAuthor mocks base method.
func (m *MockMigrationsService) MapCommitAuthor(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 *github.SourceImportAuthor) (*github.SourceImportAuthor, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapCommitAuthor", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.SourceImportAuthor)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MapCommitAuthor indicates an expected call of MapCommitAuthor.
func (mr *MockMigrationsServiceMockRecorder) MapCommitAuthor(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapCommitAuthor", reflect.TypeOf((*MockMigrationsService)(nil).MapCommitAuthor), arg0, arg1, arg2, arg3, arg4)
}

// MigrationArchiveURL mocks base method.
func (m *MockMigrationsService) MigrationArchiveURL(arg0 context.Context, arg1 string, arg2 int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrationArchiveURL", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrationArchiveURL indicates an expected call of MigrationArchiveURL.
func (mr *MockMigrationsServiceMockRecorder) MigrationArchiveURL(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrationArchiveURL", reflect.TypeOf((*MockMigrationsService)(nil).MigrationArchiveURL), arg0, arg1, arg2)
}

// MigrationStatus mocks base method.
func (m *MockMigrationsService) MigrationStatus(arg0 context.Context, arg1 string, arg2 int64) (*github.Migration, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrationStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Migration)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MigrationStatus indicates an expected call of MigrationStatus.
func (mr *MockMigrationsServiceMockRecorder) MigrationStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrationStatus", reflect.TypeOf((*MockMigrationsService)(nil).MigrationStatus), arg0, arg1, arg2)
}

// SetLFSPreference mocks base method.
func (m *MockMigrationsService) SetLFSPreference(arg0 context.Context, arg1, arg2 string, arg3 *github.Import) (*github.Import, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLFSPreference", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Import)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetLFSPreference indicates an expected call of SetLFSPreference.
func (mr *MockMigrationsServiceMockRecorder) SetLFSPreference(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLFSPreference", reflect.TypeOf((*MockMigrationsService)(nil).SetLFSPreference), arg0, arg1, arg2, arg3)
}

// StartImport mocks base method.
func (m *MockMigrationsService) StartImport(arg0 context.Context, arg1, arg2 string, arg3 *github.Import) (*github.Import, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartImport", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Import)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StartImport indicates an expected call of StartImport.
func (mr *MockMigrationsServiceMockRecorder) StartImport(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartImport", reflect.TypeOf((*MockMigrationsService)(nil).StartImport), arg0, arg1, arg2, arg3)
}

// StartMigration mocks base method.
func (m *MockMigrationsService) StartMigration(arg0 context.Context, arg1 string, arg2 []string, arg3 *github.MigrationOptions) (*github.Migration, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartMigration", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Migration)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StartMigration indicates an expected call of StartMigration.
func (mr *MockMigrationsServiceMockRecorder) StartMigration(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMigration", reflect.TypeOf((*MockMigrationsService)(nil).StartMigration), arg0, arg1, arg2, arg3)
}

// StartUserMigration mocks base method.
func (m *MockMigrationsService) StartUserMigration(arg0 context.Context, arg1 []string, arg2 *github.UserMigrationOptions) (*github.UserMigration, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartUserMigration", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.UserMigration)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StartUserMigration indicates an expected call of StartUserMigration.
func (mr *MockMigrationsServiceMockRecorder) StartUserMigration(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartUserMigration", reflect.TypeOf((*MockMigrationsService)(nil).StartUserMigration), arg0, arg1, arg2)
}

// UnlockRepo mocks base method.
func (m *MockMigrationsService) UnlockRepo(arg0 context.Context, arg1 string, arg2 int64, arg3 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockRepo", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlockRepo indicates an expected call of UnlockRepo.
func (mr *MockMigrationsServiceMockRecorder) UnlockRepo(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockRepo", reflect.TypeOf((*MockMigrationsService)(nil).UnlockRepo), arg0, arg1, arg2, arg3)
}

// UnlockUserRepo mocks base method.
func (m *MockMigrationsService) UnlockUserRepo(arg0 context.Context, arg1 int64, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockUserRepo", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlockUserRepo indicates an expected call of UnlockUserRepo.
func (mr *MockMigrationsServiceMockRecorder) UnlockUserRepo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockUserRepo", reflect.TypeOf((*MockMigrationsService)(nil).UnlockUserRepo), arg0, arg1, arg2)
}

// UpdateImport mocks base method.
func (m *MockMigrationsService) UpdateImport(arg0 context.Context, arg1, arg2 string, arg3 *github.Import) (*github.Import, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImport", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Import)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateImport indicates an expected call of UpdateImport.
func (mr *MockMigrationsServiceMockRecorder) UpdateImport(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImport", reflect.TypeOf((*MockMigrationsService)(nil).UpdateImport), arg0, arg1, arg2, arg3)
}

// UserMigrationArchiveURL mocks base method.
func (m *MockMigrationsService) UserMigrationArchiveURL(arg0 context.Context, arg1 int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserMigrationArchiveURL", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserMigrationArchiveURL indicates an expected call of UserMigrationArchiveURL.
func (mr *MockMigrationsServiceMockRecorder) UserMigrationArchiveURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserMigrationArchiveURL", reflect.TypeOf((*MockMigrationsService)(nil).UserMigrationArchiveURL), arg0, arg1)
}

// UserMigrationStatus mocks base method.
func (m *MockMigrationsService) UserMigrationStatus(arg0 context.Context, arg1 int64) (*github.UserMigration, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserMigrationStatus", arg0, arg1)
	ret0, _ := ret[0].(*github.UserMigration)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserMigrationStatus indicates an expected call of UserMigrationStatus.
func (mr *MockMigrationsServiceMockRecorder) UserMigrationStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserMigrationStatus", reflect.TypeOf((*MockMigrationsService)(nil).UserMigrationStatus), arg0, arg1)
}

// MockOrganizationsService is a mock of OrganizationsService interface.
type MockOrganizationsService struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationsServiceMockRecorder
}

// MockOrganizationsServiceMockRecorder is the mock recorder for MockOrganizationsService.
type MockOrganizationsServiceMockRecorder struct {
	mock *MockOrganizationsService
}

// NewMockOrganizationsService creates a new mock instance.
func NewMockOrganizationsService(ctrl *gomock.Controller) *MockOrganizationsService {
	mock := &MockOrganizationsService{ctrl: ctrl}
	mock.recorder = &MockOrganizationsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationsService) EXPECT() *MockOrganizationsServiceMockRecorder {
	return m.recorder
}

// BlockUser mocks base method.
func (m *MockOrganizationsService) BlockUser(ctx context.Context, org, user string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockUser", ctx, org, user)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockUser indicates an expected call of BlockUser.
func (mr *MockOrganizationsServiceMockRecorder) BlockUser(ctx, org, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockUser", reflect.TypeOf((*MockOrganizationsService)(nil).BlockUser), ctx, org, user)
}

// ConcealMembership mocks base method.
func (m *MockOrganizationsService) ConcealMembership(ctx context.Context, org, user string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConcealMembership", ctx, org, user)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConcealMembership indicates an expected call of ConcealMembership.
func (mr *MockOrganizationsServiceMockRecorder) ConcealMembership(ctx, org, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConcealMembership", reflect.TypeOf((*MockOrganizationsService)(nil).ConcealMembership), ctx, org, user)
}

// ConvertMemberToOutsideCollaborator mocks base method.
func (m *MockOrganizationsService) ConvertMemberToOutsideCollaborator(ctx context.Context, org, user string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertMemberToOutsideCollaborator", ctx, org, user)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertMemberToOutsideCollaborator indicates an expected call of ConvertMemberToOutsideCollaborator.
func (mr *MockOrganizationsServiceMockRecorder) ConvertMemberToOutsideCollaborator(ctx, org, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertMemberToOutsideCollaborator", reflect.TypeOf((*MockOrganizationsService)(nil).ConvertMemberToOutsideCollaborator), ctx, org, user)
}

// CreateCustomRepoRole mocks base method.
func (m *MockOrganizationsService) CreateCustomRepoRole(ctx context.Context, org string, opts *github.CreateOrUpdateCustomRoleOptions) (*github.CustomRepoRoles, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomRepoRole", ctx, org, opts)
	ret0, _ := ret[0].(*github.CustomRepoRoles)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCustomRepoRole indicates an expected call of CreateCustomRepoRole.
func (mr *MockOrganizationsServiceMockRecorder) CreateCustomRepoRole(ctx, org, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomRepoRole", reflect.TypeOf((*MockOrganizationsService)(nil).CreateCustomRepoRole), ctx, org, opts)
}

// CreateHook mocks base method.
func (m *MockOrganizationsService) CreateHook(ctx context.Context, org string, hook *github.Hook) (*github.Hook, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHook", ctx, org, hook)
	ret0, _ := ret[0].(*github.Hook)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateHook indicates an expected call of CreateHook.
func (mr *MockOrganizationsServiceMockRecorder) CreateHook(ctx, org, hook interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHook", reflect.TypeOf((*MockOrganizationsService)(nil).CreateHook), ctx, org, hook)
}

// CreateOrgInvitation mocks base method.
func (m *MockOrganizationsService) CreateOrgInvitation(ctx context.Context, org string, opts *github.CreateOrgInvitationOptions) (*github.Invitation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrgInvitation", ctx, org, opts)
	ret0, _ := ret[0].(*github.Invitation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateOrgInvitation indicates an expected call of CreateOrgInvitation.
func (mr *MockOrganizationsServiceMockRecorder) CreateOrgInvitation(ctx, org, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrgInvitation", reflect.TypeOf((*MockOrganizationsService)(nil).CreateOrgInvitation), ctx, org, opts)
}

// CreateProject mocks base method.
func (m *MockOrganizationsService) CreateProject(ctx context.Context, org string, opts *github.ProjectOptions) (*github.Project, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", ctx, org, opts)
	ret0, _ := ret[0].(*github.Project)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockOrganizationsServiceMockRecorder) CreateProject(ctx, org, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockOrganizationsService)(nil).CreateProject), ctx, org, opts)
}

// DeleteCustomRepoRole mocks base method.
func (m *MockOrganizationsService) DeleteCustomRepoRole(ctx context.Context, org, roleID string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomRepoRole", ctx, org, roleID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomRepoRole indicates an expected call of DeleteCustomRepoRole.
func (mr *MockOrganizationsServiceMockRecorder) DeleteCustomRepoRole(ctx, org, roleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomRepoRole", reflect.TypeOf((*MockOrganizationsService)(nil).DeleteCustomRepoRole), ctx, org, roleID)
}

// DeleteHook mocks base method.
func (m *MockOrganizationsService) DeleteHook(ctx context.Context, org string, id int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHook", ctx, org, id)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHook indicates an expected call of DeleteHook.
func (mr *MockOrganizationsServiceMockRecorder) DeleteHook(ctx, org, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHook", reflect.TypeOf((*MockOrganizationsService)(nil).DeleteHook), ctx, org, id)
}

// DeletePackage mocks base method.
func (m *MockOrganizationsService) DeletePackage(ctx context.Context, org, packageType, packageName string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePackage", ctx, org, packageType, packageName)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePackage indicates an expected call of DeletePackage.
func (mr *MockOrganizationsServiceMockRecorder) DeletePackage(ctx, org, packageType, packageName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePackage", reflect.TypeOf((*MockOrganizationsService)(nil).DeletePackage), ctx, org, packageType, packageName)
}

// Edit mocks base method.
func (m *MockOrganizationsService) Edit(ctx context.Context, name string, org *github.Organization) (*github.Organization, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", ctx, name, org)
	ret0, _ := ret[0].(*github.Organization)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Edit indicates an expected call of Edit.
func (mr *MockOrganizationsServiceMockRecorder) Edit(ctx, name, org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockOrganizationsService)(nil).Edit), ctx, name, org)
}

// EditActionsAllowed mocks base method.
func (m *MockOrganizationsService) EditActionsAllowed(ctx context.Context, org string, actionsAllowed github.ActionsAllowed) (*github.ActionsAllowed, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditActionsAllowed", ctx, org, actionsAllowed)
	ret0, _ := ret[0].(*github.ActionsAllowed)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditActionsAllowed indicates an expected call of EditActionsAllowed.
func (mr *MockOrganizationsServiceMockRecorder) EditActionsAllowed(ctx, org, actionsAllowed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditActionsAllowed", reflect.TypeOf((*MockOrganizationsService)(nil).EditActionsAllowed), ctx, org, actionsAllowed)
}

// EditActionsPermissions mocks base method.
func (m *MockOrganizationsService) EditActionsPermissions(ctx context.Context, org string, actionsPermissions github.ActionsPermissions) (*github.ActionsPermissions, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditActionsPermissions", ctx, org, actionsPermissions)
	ret0, _ := ret[0].(*github.ActionsPermissions)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditActionsPermissions indicates an expected call of EditActionsPermissions.
func (mr *MockOrganizationsServiceMockRecorder) EditActionsPermissions(ctx, org, actionsPermissions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditActionsPermissions", reflect.TypeOf((*MockOrganizationsService)(nil).EditActionsPermissions), ctx, org, actionsPermissions)
}

// EditHook mocks base method.
func (m *MockOrganizationsService) EditHook(ctx context.Context, org string, id int64, hook *github.Hook) (*github.Hook, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditHook", ctx, org, id, hook)
	ret0, _ := ret[0].(*github.Hook)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditHook indicates an expected call of EditHook.
func (mr *MockOrganizationsServiceMockRecorder) EditHook(ctx, org, id, hook interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditHook", reflect.TypeOf((*MockOrganizationsService)(nil).EditHook), ctx, org, id, hook)
}

// EditOrgMembership mocks base method.
func (m *MockOrganizationsService) EditOrgMembership(ctx context.Context, user, org string, membership *github.Membership) (*github.Membership, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditOrgMembership", ctx, user, org, membership)
	ret0, _ := ret[0].(*github.Membership)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditOrgMembership indicates an expected call of EditOrgMembership.
func (mr *MockOrganizationsServiceMockRecorder) EditOrgMembership(ctx, user, org, membership interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditOrgMembership", reflect.TypeOf((*MockOrganizationsService)(nil).EditOrgMembership), ctx, user, org, membership)
}

// Get mocks base method.
func (m *MockOrganizationsService) Get(ctx context.Context, org string) (*github.Organization, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, org)
	ret0, _ := ret[0].(*github.Organization)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockOrganizationsServiceMockRecorder) Get(ctx, org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOrganizationsService)(nil).Get), ctx, org)
}

// GetActionsAllowed mocks base method.
func (m *MockOrganizationsService) GetActionsAllowed(ctx context.Context, org string) (*github.ActionsAllowed, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionsAllowed", ctx, org)
	ret0, _ := ret[0].(*github.ActionsAllowed)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetActionsAllowed indicates an expected call of GetActionsAllowed.
func (mr *MockOrganizationsServiceMockRecorder) GetActionsAllowed(ctx, org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionsAllowed", reflect.TypeOf((*MockOrganizationsService)(nil).GetActionsAllowed), ctx, org)
}

// GetActionsPermissions mocks base method.
func (m *MockOrganizationsService) GetActionsPermissions(ctx context.Context, org string) (*github.ActionsPermissions, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionsPermissions", ctx, org)
	ret0, _ := ret[0].(*github.ActionsPermissions)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetActionsPermissions indicates an expected call of GetActionsPermissions.
func (mr *MockOrganizationsServiceMockRecorder) GetActionsPermissions(ctx, org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionsPermissions", reflect.TypeOf((*MockOrganizationsService)(nil).GetActionsPermissions), ctx, org)
}

// GetAuditLog mocks base method.
func (m *MockOrganizationsService) GetAuditLog(ctx context.Context, org string, opts *github.GetAuditLogOptions) ([]*github.AuditEntry, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuditLog", ctx, org, opts)
	ret0, _ := ret[0].([]*github.AuditEntry)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAuditLog indicates an expected call of GetAuditLog.
func (mr *MockOrganizationsServiceMockRecorder) GetAuditLog(ctx, org, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuditLog", reflect.TypeOf((*MockOrganizationsService)(nil).GetAuditLog), ctx, org, opts)
}

// GetByID mocks base method.
func (m *MockOrganizationsService) GetByID(ctx context.Context, id int64) (*github.Organization, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*github.Organization)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByID indicates an expected call of GetByID.
func (mr *MockOrganizationsServiceMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockOrganizationsService)(nil).GetByID), ctx, id)
}

// GetHook mocks base method.
func (m *MockOrganizationsService) GetHook(ctx context.Context, org string, id int64) (*github.Hook, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHook", ctx, org, id)
	ret0, _ := ret[0].(*github.Hook)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetHook indicates an expected call of GetHook.
func (mr *MockOrganizationsServiceMockRecorder) GetHook(ctx, org, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHook", reflect.TypeOf((*MockOrganizationsService)(nil).GetHook), ctx, org, id)
}

// GetHookDelivery mocks base method.
func (m *MockOrganizationsService) GetHookDelivery(ctx context.Context, owner string, hookID, deliveryID int64) (*github.HookDelivery, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHookDelivery", ctx, owner, hookID, deliveryID)
	ret0, _ := ret[0].(*github.HookDelivery)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetHookDelivery indicates an expected call of GetHookDelivery.
func (mr *MockOrganizationsServiceMockRecorder) GetHookDelivery(ctx, owner, hookID, deliveryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHookDelivery", reflect.TypeOf((*MockOrganizationsService)(nil).GetHookDelivery), ctx, owner, hookID, deliveryID)
}

// GetOrgMembership mocks base method.
func (m *MockOrganizationsService) GetOrgMembership(ctx context.Context, user, org string) (*github.Membership, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrgMembership", ctx, user, org)
	ret0, _ := ret[0].(*github.Membership)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrgMembership indicates an expected call of GetOrgMembership.
func (mr *MockOrganizationsServiceMockRecorder) GetOrgMembership(ctx, user, org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgMembership", reflect.TypeOf((*MockOrganizationsService)(nil).GetOrgMembership), ctx, user, org)
}

// GetPackage mocks base method.
func (m *MockOrganizationsService) GetPackage(ctx context.Context, org, packageType, packageName string) (*github.Package, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackage", ctx, org, packageType, packageName)
	ret0, _ := ret[0].(*github.Package)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPackage indicates an expected call of GetPackage.
func (mr *MockOrganizationsServiceMockRecorder) GetPackage(ctx, org, packageType, packageName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackage", reflect.TypeOf((*MockOrganizationsService)(nil).GetPackage), ctx, org, packageType, packageName)
}

// IsBlocked mocks base method.
func (m *MockOrganizationsService) IsBlocked(ctx context.Context, org, user string) (bool, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBlocked", ctx, org, user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsBlocked indicates an expected call of IsBlocked.
func (mr *MockOrganizationsServiceMockRecorder) IsBlocked(ctx, org, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBlocked", reflect.TypeOf((*MockOrganizationsService)(nil).IsBlocked), ctx, org, user)
}

// IsMember mocks base method.
func (m *MockOrganizationsService) IsMember(ctx context.Context, org, user string) (bool, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMember", ctx, org, user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsMember indicates an expected call of IsMember.
func (mr *MockOrganizationsServiceMockRecorder) IsMember(ctx, org, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMember", reflect.TypeOf((*MockOrganizationsService)(nil).IsMember), ctx, org, user)
}

// IsPublicMember mocks base method.
func (m *MockOrganizationsService) IsPublicMember(ctx context.Context, org, user string) (bool, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPublicMember", ctx, org, user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsPublicMember indicates an expected call of IsPublicMember.
func (mr *MockOrganizationsServiceMockRecorder) IsPublicMember(ctx, org, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPublicMember", reflect.TypeOf((*MockOrganizationsService)(nil).IsPublicMember), ctx, org, user)
}

// List mocks base method.
func (m *MockOrganizationsService) List(ctx context.Context, user string, opts *github.ListOptions) ([]*github.Organization, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, user, opts)
	ret0, _ := ret[0].([]*github.Organization)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockOrganizationsServiceMockRecorder) List(ctx, user, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOrganizationsService)(nil).List), ctx, user, opts)
}

// ListAll mocks base method.
func (m *MockOrganizationsService) ListAll(ctx context.Context, opts *github.OrganizationsListOptions) ([]*github.Organization, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx, opts)
	ret0, _ := ret[0].([]*github.Organization)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAll indicates an expected call of ListAll.
func (mr *MockOrganizationsServiceMockRecorder) ListAll(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockOrganizationsService)(nil).ListAll), ctx, opts)
}

// ListBlockedUsers mocks base method.
func (m *MockOrganizationsService) ListBlockedUsers(ctx context.Context, org string, opts *github.ListOptions) ([]*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBlockedUsers", ctx, org, opts)
	ret0, _ := ret[0].([]*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBlockedUsers indicates an expected call of ListBlockedUsers.
func (mr *MockOrganizationsServiceMockRecorder) ListBlockedUsers(ctx, org, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBlockedUsers", reflect.TypeOf((*MockOrganizationsService)(nil).ListBlockedUsers), ctx, org, opts)
}

// ListCustomRepoRoles mocks base method.
func (m *MockOrganizationsService) ListCustomRepoRoles(ctx context.Context, org string) (*github.OrganizationCustomRepoRoles, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomRepoRoles", ctx, org)
	ret0, _ := ret[0].(*github.OrganizationCustomRepoRoles)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCustomRepoRoles indicates an expected call of ListCustomRepoRoles.
func (mr *MockOrganizationsServiceMockRecorder) ListCustomRepoRoles(ctx, org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomRepoRoles", reflect.TypeOf((*MockOrganizationsService)(nil).ListCustomRepoRoles), ctx, org)
}

// ListFailedOrgInvitations mocks base method.
func (m *MockOrganizationsService) ListFailedOrgInvitations(ctx context.Context, org string, opts *github.ListOptions) ([]*github.Invitation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFailedOrgInvitations", ctx, org, opts)
	ret0, _ := ret[0].([]*github.Invitation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFailedOrgInvitations indicates an expected call of ListFailedOrgInvitations.
func (mr *MockOrganizationsServiceMockRecorder) ListFailedOrgInvitations(ctx, org, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFailedOrgInvitations", reflect.TypeOf((*MockOrganizationsService)(nil).ListFailedOrgInvitations), ctx, org, opts)
}

// ListHookDeliveries mocks base method.
func (m *MockOrganizationsService) ListHookDeliveries(ctx context.Context, org string, id int64, opts *github.ListCursorOptions) ([]*github.HookDelivery, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHookDeliveries", ctx, org, id, opts)
	ret0, _ := ret[0].([]*github.HookDelivery)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListHookDeliveries indicates an expected call of ListHookDeliveries.
func (mr *MockOrganizationsServiceMockRecorder) ListHookDeliveries(ctx, org, id, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHookDeliveries", reflect.TypeOf((*MockOrganizationsService)(nil).ListHookDeliveries), ctx, org, id, opts)
}

// ListHooks mocks base method.
func (m *MockOrganizationsService) ListHooks(ctx context.Context, org string, opts *github.ListOptions) ([]*github.Hook, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHooks", ctx, org, opts)
	ret0, _ := ret[0].([]*github.Hook)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListHooks indicates an expected call of ListHooks.
func (mr *MockOrganizationsServiceMockRecorder) ListHooks(ctx, org, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHooks", reflect.TypeOf((*MockOrganizationsService)(nil).ListHooks), ctx, org, opts)
}

// ListInstallations mocks base method.
func (m *MockOrganizationsService) ListInstallations(ctx context.Context, org string, opts *github.ListOptions) (*github.OrganizationInstallations, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstallations", ctx, org, opts)
	ret0, _ := ret[0].(*github.OrganizationInstallations)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListInstallations indicates an expected call of ListInstallations.
func (mr *MockOrganizationsServiceMockRecorder) ListInstallations(ctx, org, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstallations", reflect.TypeOf((*MockOrganizationsService)(nil).ListInstallations), ctx, org, opts)
}

// ListMembers mocks base method.
func (m *MockOrganizationsService) ListMembers(ctx context.Context, org string, opts *github.ListMembersOptions) ([]*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembers", ctx, org, opts)
	ret0, _ := ret[0].([]*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMembers indicates an expected call of ListMembers.
func (mr *MockOrganizationsServiceMockRecorder) ListMembers(ctx, org, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembers", reflect.TypeOf((*MockOrganizationsService)(nil).ListMembers), ctx, org, opts)
}

// ListOrgInvitationTeams mocks base method.
func (m *MockOrganizationsService) ListOrgInvitationTeams(ctx context.Context, org, invitationID string, opts *github.ListOptions) ([]*github.Team, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrgInvitationTeams", ctx, org, invitationID, opts)
	ret0, _ := ret[0].([]*github.Team)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrgInvitationTeams indicates an expected call of ListOrgInvitationTeams.
func (mr *MockOrganizationsServiceMockRecorder) ListOrgInvitationTeams(ctx, org, invitationID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrgInvitationTeams", reflect.TypeOf((*MockOrganizationsService)(nil).ListOrgInvitationTeams), ctx, org, invitationID, opts)
}

// ListOrgMemberships mocks base method.
func (m *MockOrganizationsService) ListOrgMemberships(ctx context.Context, opts *github.ListOrgMembershipsOptions) ([]*github.Membership, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrgMemberships", ctx, opts)
	ret0, _ := ret[0].([]*github.Membership)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrgMemberships indicates an expected call of ListOrgMemberships.
func (mr *MockOrganizationsServiceMockRecorder) ListOrgMemberships(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrgMemberships", reflect.TypeOf((*MockOrganizationsService)(nil).ListOrgMemberships), ctx, opts)
}

// ListOutsideCollaborators mocks base method.
func (m *MockOrganizationsService) ListOutsideCollaborators(ctx context.Context, org string, opts *github.ListOutsideCollaboratorsOptions) ([]*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOutsideCollaborators", ctx, org, opts)
	ret0, _ := ret[0].([]*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOutsideCollaborators indicates an expected call of ListOutsideCollaborators.
func (mr *MockOrganizationsServiceMockRecorder) ListOutsideCollaborators(ctx, org, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOutsideCollaborators", reflect.TypeOf((*MockOrganizationsService)(nil).ListOutsideCollaborators), ctx, org, opts)
}

// ListPackages mocks base method.
func (m *MockOrganizationsService) ListPackages(ctx context.Context, org string, opts *github.PackageListOptions) ([]*github.Package, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPackages", ctx, org, opts)
	ret0, _ := ret[0].([]*github.Package)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPackages indicates an expected call of ListPackages.
func (mr *MockOrganizationsServiceMockRecorder) ListPackages(ctx, org, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackages", reflect.TypeOf((*MockOrganizationsService)(nil).ListPackages), ctx, org, opts)
}

// ListPendingOrgInvitations mocks base method.
func (m *MockOrganizationsService) ListPendingOrgInvitations(ctx context.Context, org string, opts *github.ListOptions) ([]*github.Invitation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPendingOrgInvitations", ctx, org, opts)
	ret0, _ := ret[0].([]*github.Invitation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPendingOrgInvitations indicates an expected call of ListPendingOrgInvitations.
func (mr *MockOrganizationsServiceMockRecorder) ListPendingOrgInvitations(ctx, org, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPendingOrgInvitations", reflect.TypeOf((*MockOrganizationsService)(nil).ListPendingOrgInvitations), ctx, org, opts)
}

// ListProjects mocks base method.
func (m *MockOrganizationsService) ListProjects(ctx context.Context, org string, opts *github.ProjectListOptions) ([]*github.Project, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects", ctx, org, opts)
	ret0, _ := ret[0].([]*github.Project)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockOrganizationsServiceMockRecorder) ListProjects(ctx, org, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockOrganizationsService)(nil).ListProjects), ctx, org, opts)
}

// PackageDeleteVersion mocks base method.
func (m *MockOrganizationsService) PackageDeleteVersion(ctx context.Context, org, packageType, packageName string, packageVersionID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PackageDeleteVersion", ctx, org, packageType, packageName, packageVersionID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PackageDeleteVersion indicates an expected call of PackageDeleteVersion.
func (mr *MockOrganizationsServiceMockRecorder) PackageDeleteVersion(ctx, org, packageType, packageName, packageVersionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PackageDeleteVersion", reflect.TypeOf((*MockOrganizationsService)(nil).PackageDeleteVersion), ctx, org, packageType, packageName, packageVersionID)
}

// PackageGetAllVersions mocks base method.
func (m *MockOrganizationsService) PackageGetAllVersions(ctx context.Context, org, packageType, packageName string, opts *github.PackageListOptions) ([]*github.PackageVersion, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PackageGetAllVersions", ctx, org, packageType, packageName, opts)
	ret0, _ := ret[0].([]*github.PackageVersion)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PackageGetAllVersions indicates an expected call of PackageGetAllVersions.
func (mr *MockOrganizationsServiceMockRecorder) PackageGetAllVersions(ctx, org, packageType, packageName, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PackageGetAllVersions", reflect.TypeOf((*MockOrganizationsService)(nil).PackageGetAllVersions), ctx, org, packageType, packageName, opts)
}

// PackageGetVersion mocks base method.
func (m *MockOrganizationsService) PackageGetVersion(ctx context.Context, org, packageType, packageName string, packageVersionID int64) (*github.PackageVersion, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PackageGetVersion", ctx, org, packageType, packageName, packageVersionID)
	ret0, _ := ret[0].(*github.PackageVersion)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PackageGetVersion indicates an expected call of PackageGetVersion.
func (mr *MockOrganizationsServiceMockRecorder) PackageGetVersion(ctx, org, packageType, packageName, packageVersionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PackageGetVersion", reflect.TypeOf((*MockOrganizationsService)(nil).PackageGetVersion), ctx, org, packageType, packageName, packageVersionID)
}

// PackageRestoreVersion mocks base method.
func (m *MockOrganizationsService) PackageRestoreVersion(ctx context.Context, org, packageType, packageName string, packageVersionID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PackageRestoreVersion", ctx, org, packageType, packageName, packageVersionID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PackageRestoreVersion indicates an expected call of PackageRestoreVersion.
func (mr *MockOrganizationsServiceMockRecorder) PackageRestoreVersion(ctx, org, packageType, packageName, packageVersionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PackageRestoreVersion", reflect.TypeOf((*MockOrganizationsService)(nil).PackageRestoreVersion), ctx, org, packageType, packageName, packageVersionID)
}

// PingHook mocks base method.
func (m *MockOrganizationsService) PingHook(ctx context.Context, org string, id int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingHook", ctx, org, id)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingHook indicates an expected call of PingHook.
func (mr *MockOrganizationsServiceMockRecorder) PingHook(ctx, org, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingHook", reflect.TypeOf((*MockOrganizationsService)(nil).PingHook), ctx, org, id)
}

// PublicizeMembership mocks base method.
func (m *MockOrganizationsService) PublicizeMembership(ctx context.Context, org, user string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicizeMembership", ctx, org, user)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicizeMembership indicates an expected call of PublicizeMembership.
func (mr *MockOrganizationsServiceMockRecorder) PublicizeMembership(ctx, org, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicizeMembership", reflect.TypeOf((*MockOrganizationsService)(nil).PublicizeMembership), ctx, org, user)
}

// RedeliverHookDelivery mocks base method.
func (m *MockOrganizationsService) RedeliverHookDelivery(ctx context.Context, owner string, hookID, deliveryID int64) (*github.HookDelivery, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedeliverHookDelivery", ctx, owner, hookID, deliveryID)
	ret0, _ := ret[0].(*github.HookDelivery)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RedeliverHookDelivery indicates an expected call of RedeliverHookDelivery.
func (mr *MockOrganizationsServiceMockRecorder) RedeliverHookDelivery(ctx, owner, hookID, deliveryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedeliverHookDelivery", reflect.TypeOf((*MockOrganizationsService)(nil).RedeliverHookDelivery), ctx, owner, hookID, deliveryID)
}

// RemoveMember mocks base method.
func (m *MockOrganizationsService) RemoveMember(ctx context.Context, org, user string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMember", ctx, org, user)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveMember indicates an expected call of RemoveMember.
func (mr *MockOrganizationsServiceMockRecorder) RemoveMember(ctx, org, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMember", reflect.TypeOf((*MockOrganizationsService)(nil).RemoveMember), ctx, org, user)
}

// RemoveOrgMembership mocks base method.
func (m *MockOrganizationsService) RemoveOrgMembership(ctx context.Context, user, org string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOrgMembership", ctx, user, org)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveOrgMembership indicates an expected call of RemoveOrgMembership.
func (mr *MockOrganizationsServiceMockRecorder) RemoveOrgMembership(ctx, user, org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOrgMembership", reflect.TypeOf((*MockOrganizationsService)(nil).RemoveOrgMembership), ctx, user, org)
}

// RemoveOutsideCollaborator mocks base method.
func (m *MockOrganizationsService) RemoveOutsideCollaborator(ctx context.Context, org, user string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOutsideCollaborator", ctx, org, user)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveOutsideCollaborator indicates an expected call of RemoveOutsideCollaborator.
func (mr *MockOrganizationsServiceMockRecorder) RemoveOutsideCollaborator(ctx, org, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOutsideCollaborator", reflect.TypeOf((*MockOrganizationsService)(nil).RemoveOutsideCollaborator), ctx, org, user)
}

// RestorePackage mocks base method.
func (m *MockOrganizationsService) RestorePackage(ctx context.Context, org, packageType, packageName string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestorePackage", ctx, org, packageType, packageName)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestorePackage indicates an expected call of RestorePackage.
func (mr *MockOrganizationsServiceMockRecorder) RestorePackage(ctx, org, packageType, packageName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestorePackage", reflect.TypeOf((*MockOrganizationsService)(nil).RestorePackage), ctx, org, packageType, packageName)
}

// UnblockUser mocks base method.
func (m *MockOrganizationsService) UnblockUser(ctx context.Context, org, user string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnblockUser", ctx, org, user)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnblockUser indicates an expected call of UnblockUser.
func (mr *MockOrganizationsServiceMockRecorder) UnblockUser(ctx, org, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnblockUser", reflect.TypeOf((*MockOrganizationsService)(nil).UnblockUser), ctx, org, user)
}

// UpdateCustomRepoRole mocks base method.
func (m *MockOrganizationsService) UpdateCustomRepoRole(ctx context.Context, org, roleID string, opts *github.CreateOrUpdateCustomRoleOptions) (*github.CustomRepoRoles, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomRepoRole", ctx, org, roleID, opts)
	ret0, _ := ret[0].(*github.CustomRepoRoles)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateCustomRepoRole indicates an expected call of UpdateCustomRepoRole.
func (mr *MockOrganizationsServiceMockRecorder) UpdateCustomRepoRole(ctx, org, roleID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomRepoRole", reflect.TypeOf((*MockOrganizationsService)(nil).UpdateCustomRepoRole), ctx, org, roleID, opts)
}

// MockProjectsService is a mock of ProjectsService interface.
type MockProjectsService struct {
	ctrl     *gomock.Controller
	recorder *MockProjectsServiceMockRecorder
}

// MockProjectsServiceMockRecorder is the mock recorder for MockProjectsService.
type MockProjectsServiceMockRecorder struct {
	mock *MockProjectsService
}

// NewMockProjectsService creates a new mock instance.
func NewMockProjectsService(ctrl *gomock.Controller) *MockProjectsService {
	mock := &MockProjectsService{ctrl: ctrl}
	mock.recorder = &MockProjectsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectsService) EXPECT() *MockProjectsServiceMockRecorder {
	return m.recorder
}

// AddProjectCollaborator mocks base method.
func (m *MockProjectsService) AddProjectCollaborator(ctx context.Context, id int64, username string, opts *github.ProjectCollaboratorOptions) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProjectCollaborator", ctx, id, username, opts)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProjectCollaborator indicates an expected call of AddProjectCollaborator.
func (mr *MockProjectsServiceMockRecorder) AddProjectCollaborator(ctx, id, username, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProjectCollaborator", reflect.TypeOf((*MockProjectsService)(nil).AddProjectCollaborator), ctx, id, username, opts)
}

// CreateProjectCard mocks base method.
func (m *MockProjectsService) CreateProjectCard(ctx context.Context, columnID int64, opts *github.ProjectCardOptions) (*github.ProjectCard, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectCard", ctx, columnID, opts)
	ret0, _ := ret[0].(*github.ProjectCard)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateProjectCard indicates an expected call of CreateProjectCard.
func (mr *MockProjectsServiceMockRecorder) CreateProjectCard(ctx, columnID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectCard", reflect.TypeOf((*MockProjectsService)(nil).CreateProjectCard), ctx, columnID, opts)
}

// CreateProjectColumn mocks base method.
func (m *MockProjectsService) CreateProjectColumn(ctx context.Context, projectID int64, opts *github.ProjectColumnOptions) (*github.ProjectColumn, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectColumn", ctx, projectID, opts)
	ret0, _ := ret[0].(*github.ProjectColumn)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateProjectColumn indicates an expected call of CreateProjectColumn.
func (mr *MockProjectsServiceMockRecorder) CreateProjectColumn(ctx, projectID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectColumn", reflect.TypeOf((*MockProjectsService)(nil).CreateProjectColumn), ctx, projectID, opts)
}

// DeleteProject mocks base method.
func (m *MockProjectsService) DeleteProject(ctx context.Context, id int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", ctx, id)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockProjectsServiceMockRecorder) DeleteProject(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockProjectsService)(nil).DeleteProject), ctx, id)
}

// DeleteProjectCard mocks base method.
func (m *MockProjectsService) DeleteProjectCard(ctx context.Context, cardID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectCard", ctx, cardID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectCard indicates an expected call of DeleteProjectCard.
func (mr *MockProjectsServiceMockRecorder) DeleteProjectCard(ctx, cardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectCard", reflect.TypeOf((*MockProjectsService)(nil).DeleteProjectCard), ctx, cardID)
}

// DeleteProjectColumn mocks base method.
func (m *MockProjectsService) DeleteProjectColumn(ctx context.Context, columnID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectColumn", ctx, columnID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectColumn indicates an expected call of DeleteProjectColumn.
func (mr *MockProjectsServiceMockRecorder) DeleteProjectColumn(ctx, columnID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectColumn", reflect.TypeOf((*MockProjectsService)(nil).DeleteProjectColumn), ctx, columnID)
}

// GetProject mocks base method.
func (m *MockProjectsService) GetProject(ctx context.Context, id int64) (*github.Project, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", ctx, id)
	ret0, _ := ret[0].(*github.Project)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProject indicates an expected call of GetProject.
func (mr *MockProjectsServiceMockRecorder) GetProject(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockProjectsService)(nil).GetProject), ctx, id)
}

// GetProjectCard mocks base method.
func (m *MockProjectsService) GetProjectCard(ctx context.Context, cardID int64) (*github.ProjectCard, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectCard", ctx, cardID)
	ret0, _ := ret[0].(*github.ProjectCard)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProjectCard indicates an expected call of GetProjectCard.
func (mr *MockProjectsServiceMockRecorder) GetProjectCard(ctx, cardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectCard", reflect.TypeOf((*MockProjectsService)(nil).GetProjectCard), ctx, cardID)
}

// GetProjectColumn mocks base method.
func (m *MockProjectsService) GetProjectColumn(ctx context.Context, id int64) (*github.ProjectColumn, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectColumn", ctx, id)
	ret0, _ := ret[0].(*github.ProjectColumn)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProjectColumn indicates an expected call of GetProjectColumn.
func (mr *MockProjectsServiceMockRecorder) GetProjectColumn(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectColumn", reflect.TypeOf((*MockProjectsService)(nil).GetProjectColumn), ctx, id)
}

// ListProjectCards mocks base method.
func (m *MockProjectsService) ListProjectCards(ctx context.Context, columnID int64, opts *github.ProjectCardListOptions) ([]*github.ProjectCard, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectCards", ctx, columnID, opts)
	ret0, _ := ret[0].([]*github.ProjectCard)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectCards indicates an expected call of ListProjectCards.
func (mr *MockProjectsServiceMockRecorder) ListProjectCards(ctx, columnID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectCards", reflect.TypeOf((*MockProjectsService)(nil).ListProjectCards), ctx, columnID, opts)
}

// ListProjectCollaborators mocks base method.
func (m *MockProjectsService) ListProjectCollaborators(ctx context.Context, id int64, opts *github.ListCollaboratorOptions) ([]*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectCollaborators", ctx, id, opts)
	ret0, _ := ret[0].([]*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectCollaborators indicates an expected call of ListProjectCollaborators.
func (mr *MockProjectsServiceMockRecorder) ListProjectCollaborators(ctx, id, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectCollaborators", reflect.TypeOf((*MockProjectsService)(nil).ListProjectCollaborators), ctx, id, opts)
}

// ListProjectColumns mocks base method.
func (m *MockProjectsService) ListProjectColumns(ctx context.Context, projectID int64, opts *github.ListOptions) ([]*github.ProjectColumn, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectColumns", ctx, projectID, opts)
	ret0, _ := ret[0].([]*github.ProjectColumn)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectColumns indicates an expected call of ListProjectColumns.
func (mr *MockProjectsServiceMockRecorder) ListProjectColumns(ctx, projectID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectColumns", reflect.TypeOf((*MockProjectsService)(nil).ListProjectColumns), ctx, projectID, opts)
}

// MoveProjectCard mocks base method.
func (m *MockProjectsService) MoveProjectCard(ctx context.Context, cardID int64, opts *github.ProjectCardMoveOptions) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveProjectCard", ctx, cardID, opts)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveProjectCard indicates an expected call of MoveProjectCard.
func (mr *MockProjectsServiceMockRecorder) MoveProjectCard(ctx, cardID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveProjectCard", reflect.TypeOf((*MockProjectsService)(nil).MoveProjectCard), ctx, cardID, opts)
}

// MoveProjectColumn mocks base method.
func (m *MockProjectsService) MoveProjectColumn(ctx context.Context, columnID int64, opts *github.ProjectColumnMoveOptions) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveProjectColumn", ctx, columnID, opts)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveProjectColumn indicates an expected call of MoveProjectColumn.
func (mr *MockProjectsServiceMockRecorder) MoveProjectColumn(ctx, columnID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveProjectColumn", reflect.TypeOf((*MockProjectsService)(nil).MoveProjectColumn), ctx, columnID, opts)
}

// RemoveProjectCollaborator mocks base method.
func (m *MockProjectsService) RemoveProjectCollaborator(ctx context.Context, id int64, username string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProjectCollaborator", ctx, id, username)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveProjectCollaborator indicates an expected call of RemoveProjectCollaborator.
func (mr *MockProjectsServiceMockRecorder) RemoveProjectCollaborator(ctx, id, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProjectCollaborator", reflect.TypeOf((*MockProjectsService)(nil).RemoveProjectCollaborator), ctx, id, username)
}

// ReviewProjectCollaboratorPermission mocks base method.
func (m *MockProjectsService) ReviewProjectCollaboratorPermission(ctx context.Context, id int64, username string) (*github.ProjectPermissionLevel, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReviewProjectCollaboratorPermission", ctx, id, username)
	ret0, _ := ret[0].(*github.ProjectPermissionLevel)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReviewProjectCollaboratorPermission indicates an expected call of ReviewProjectCollaboratorPermission.
func (mr *MockProjectsServiceMockRecorder) ReviewProjectCollaboratorPermission(ctx, id, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReviewProjectCollaboratorPermission", reflect.TypeOf((*MockProjectsService)(nil).ReviewProjectCollaboratorPermission), ctx, id, username)
}

// UpdateProject mocks base method.
func (m *MockProjectsService) UpdateProject(ctx context.Context, id int64, opts *github.ProjectOptions) (*github.Project, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", ctx, id, opts)
	ret0, _ := ret[0].(*github.Project)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockProjectsServiceMockRecorder) UpdateProject(ctx, id, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockProjectsService)(nil).UpdateProject), ctx, id, opts)
}

// UpdateProjectCard mocks base method.
func (m *MockProjectsService) UpdateProjectCard(ctx context.Context, cardID int64, opts *github.ProjectCardOptions) (*github.ProjectCard, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectCard", ctx, cardID, opts)
	ret0, _ := ret[0].(*github.ProjectCard)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateProjectCard indicates an expected call of UpdateProjectCard.
func (mr *MockProjectsServiceMockRecorder) UpdateProjectCard(ctx, cardID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectCard", reflect.TypeOf((*MockProjectsService)(nil).UpdateProjectCard), ctx, cardID, opts)
}

// UpdateProjectColumn mocks base method.
func (m *MockProjectsService) UpdateProjectColumn(ctx context.Context, columnID int64, opts *github.ProjectColumnOptions) (*github.ProjectColumn, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectColumn", ctx, columnID, opts)
	ret0, _ := ret[0].(*github.ProjectColumn)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateProjectColumn indicates an expected call of UpdateProjectColumn.
func (mr *MockProjectsServiceMockRecorder) UpdateProjectColumn(ctx, columnID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectColumn", reflect.TypeOf((*MockProjectsService)(nil).UpdateProjectColumn), ctx, columnID, opts)
}

// MockPullRequestsService is a mock of PullRequestsService interface.
type MockPullRequestsService struct {
	ctrl     *gomock.Controller
	recorder *MockPullRequestsServiceMockRecorder
}

// MockPullRequestsServiceMockRecorder is the mock recorder for MockPullRequestsService.
type MockPullRequestsServiceMockRecorder struct {
	mock *MockPullRequestsService
}

// NewMockPullRequestsService creates a new mock instance.
func NewMockPullRequestsService(ctrl *gomock.Controller) *MockPullRequestsService {
	mock := &MockPullRequestsService{ctrl: ctrl}
	mock.recorder = &MockPullRequestsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPullRequestsService) EXPECT() *MockPullRequestsServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPullRequestsService) Create(ctx context.Context, owner, repo string, pull *github.NewPullRequest) (*github.PullRequest, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, owner, repo, pull)
	ret0, _ := ret[0].(*github.PullRequest)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockPullRequestsServiceMockRecorder) Create(ctx, owner, repo, pull interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPullRequestsService)(nil).Create), ctx, owner, repo, pull)
}

// CreateComment mocks base method.
func (m *MockPullRequestsService) CreateComment(ctx context.Context, owner, repo string, number int, comment *github.PullRequestComment) (*github.PullRequestComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, owner, repo, number, comment)
	ret0, _ := ret[0].(*github.PullRequestComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockPullRequestsServiceMockRecorder) CreateComment(ctx, owner, repo, number, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockPullRequestsService)(nil).CreateComment), ctx, owner, repo, number, comment)
}

// CreateCommentInReplyTo mocks base method.
func (m *MockPullRequestsService) CreateCommentInReplyTo(ctx context.Context, owner, repo string, number int, body string, commentID int64) (*github.PullRequestComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommentInReplyTo", ctx, owner, repo, number, body, commentID)
	ret0, _ := ret[0].(*github.PullRequestComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCommentInReplyTo indicates an expected call of CreateCommentInReplyTo.
func (mr *MockPullRequestsServiceMockRecorder) CreateCommentInReplyTo(ctx, owner, repo, number, body, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentInReplyTo", reflect.TypeOf((*MockPullRequestsService)(nil).CreateCommentInReplyTo), ctx, owner, repo, number, body, commentID)
}

// CreateReview mocks base method.
func (m *MockPullRequestsService) CreateReview(ctx context.Context, owner, repo string, number int, review *github.PullRequestReviewRequest) (*github.PullRequestReview, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReview", ctx, owner, repo, number, review)
	ret0, _ := ret[0].(*github.PullRequestReview)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateReview indicates an expected call of CreateReview.
func (mr *MockPullRequestsServiceMockRecorder) CreateReview(ctx, owner, repo, number, review interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReview", reflect.TypeOf((*MockPullRequestsService)(nil).CreateReview), ctx, owner, repo, number, review)
}

// DeleteComment mocks base method.
func (m *MockPullRequestsService) DeleteComment(ctx context.Context, owner, repo string, commentID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, owner, repo, commentID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockPullRequestsServiceMockRecorder) DeleteComment(ctx, owner, repo, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockPullRequestsService)(nil).DeleteComment), ctx, owner, repo, commentID)
}

// DeletePendingReview mocks base method.
func (m *MockPullRequestsService) DeletePendingReview(ctx context.Context, owner, repo string, number int, reviewID int64) (*github.PullRequestReview, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePendingReview", ctx, owner, repo, number, reviewID)
	ret0, _ := ret[0].(*github.PullRequestReview)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeletePendingReview indicates an expected call of DeletePendingReview.
func (mr *MockPullRequestsServiceMockRecorder) DeletePendingReview(ctx, owner, repo, number, reviewID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePendingReview", reflect.TypeOf((*MockPullRequestsService)(nil).DeletePendingReview), ctx, owner, repo, number, reviewID)
}

// DismissReview mocks base method.
func (m *MockPullRequestsService) DismissReview(ctx context.Context, owner, repo string, number int, reviewID int64, review *github.PullRequestReviewDismissalRequest) (*github.PullRequestReview, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DismissReview", ctx, owner, repo, number, reviewID, review)
	ret0, _ := ret[0].(*github.PullRequestReview)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DismissReview indicates an expected call of DismissReview.
func (mr *MockPullRequestsServiceMockRecorder) DismissReview(ctx, owner, repo, number, reviewID, review interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DismissReview", reflect.TypeOf((*MockPullRequestsService)(nil).DismissReview), ctx, owner, repo, number, reviewID, review)
}

// Edit mocks base method.
func (m *MockPullRequestsService) Edit(ctx context.Context, owner, repo string, number int, pull *github.PullRequest) (*github.PullRequest, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", ctx, owner, repo, number, pull)
	ret0, _ := ret[0].(*github.PullRequest)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Edit indicates an expected call of Edit.
func (mr *MockPullRequestsServiceMockRecorder) Edit(ctx, owner, repo, number, pull interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockPullRequestsService)(nil).Edit), ctx, owner, repo, number, pull)
}

// EditComment mocks base method.
func (m *MockPullRequestsService) EditComment(ctx context.Context, owner, repo string, commentID int64, comment *github.PullRequestComment) (*github.PullRequestComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditComment", ctx, owner, repo, commentID, comment)
	ret0, _ := ret[0].(*github.PullRequestComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditComment indicates an expected call of EditComment.
func (mr *MockPullRequestsServiceMockRecorder) EditComment(ctx, owner, repo, commentID, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditComment", reflect.TypeOf((*MockPullRequestsService)(nil).EditComment), ctx, owner, repo, commentID, comment)
}

// Get mocks base method.
func (m *MockPullRequestsService) Get(ctx context.Context, owner, repo string, number int) (*github.PullRequest, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, owner, repo, number)
	ret0, _ := ret[0].(*github.PullRequest)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockPullRequestsServiceMockRecorder) Get(ctx, owner, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPullRequestsService)(nil).Get), ctx, owner, repo, number)
}

// GetComment mocks base method.
func (m *MockPullRequestsService) GetComment(ctx context.Context, owner, repo string, commentID int64) (*github.PullRequestComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", ctx, owner, repo, commentID)
	ret0, _ := ret[0].(*github.PullRequestComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetComment indicates an expected call of GetComment.
func (mr *MockPullRequestsServiceMockRecorder) GetComment(ctx, owner, repo, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockPullRequestsService)(nil).GetComment), ctx, owner, repo, commentID)
}

// GetRaw mocks base method.
func (m *MockPullRequestsService) GetRaw(ctx context.Context, owner, repo string, number int, opts github.RawOptions) (string, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRaw", ctx, owner, repo, number, opts)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRaw indicates an expected call of GetRaw.
func (mr *MockPullRequestsServiceMockRecorder) GetRaw(ctx, owner, repo, number, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRaw", reflect.TypeOf((*MockPullRequestsService)(nil).GetRaw), ctx, owner, repo, number, opts)
}

// GetReview mocks base method.
func (m *MockPullRequestsService) GetReview(ctx context.Context, owner, repo string, number int, reviewID int64) (*github.PullRequestReview, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReview", ctx, owner, repo, number, reviewID)
	ret0, _ := ret[0].(*github.PullRequestReview)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetReview indicates an expected call of GetReview.
func (mr *MockPullRequestsServiceMockRecorder) GetReview(ctx, owner, repo, number, reviewID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReview", reflect.TypeOf((*MockPullRequestsService)(nil).GetReview), ctx, owner, repo, number, reviewID)
}

// IsMerged mocks base method.
func (m *MockPullRequestsService) IsMerged(ctx context.Context, owner, repo string, number int) (bool, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMerged", ctx, owner, repo, number)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsMerged indicates an expected call of IsMerged.
func (mr *MockPullRequestsServiceMockRecorder) IsMerged(ctx, owner, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMerged", reflect.TypeOf((*MockPullRequestsService)(nil).IsMerged), ctx, owner, repo, number)
}

// List mocks base method.
func (m *MockPullRequestsService) List(ctx context.Context, owner, repo string, opts *github.PullRequestListOptions) ([]*github.PullRequest, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.PullRequest)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockPullRequestsServiceMockRecorder) List(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPullRequestsService)(nil).List), ctx, owner, repo, opts)
}

// ListComments mocks base method.
func (m *MockPullRequestsService) ListComments(ctx context.Context, owner, repo string, number int, opts *github.PullRequestListCommentsOptions) ([]*github.PullRequestComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComments", ctx, owner, repo, number, opts)
	ret0, _ := ret[0].([]*github.PullRequestComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListComments indicates an expected call of ListComments.
func (mr *MockPullRequestsServiceMockRecorder) ListComments(ctx, owner, repo, number, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComments", reflect.TypeOf((*MockPullRequestsService)(nil).ListComments), ctx, owner, repo, number, opts)
}

// ListCommits mocks base method.
func (m *MockPullRequestsService) ListCommits(ctx context.Context, owner, repo string, number int, opts *github.ListOptions) ([]*github.RepositoryCommit, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommits", ctx, owner, repo, number, opts)
	ret0, _ := ret[0].([]*github.RepositoryCommit)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCommits indicates an expected call of ListCommits.
func (mr *MockPullRequestsServiceMockRecorder) ListCommits(ctx, owner, repo, number, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommits", reflect.TypeOf((*MockPullRequestsService)(nil).ListCommits), ctx, owner, repo, number, opts)
}

// ListFiles mocks base method.
func (m *MockPullRequestsService) ListFiles(ctx context.Context, owner, repo string, number int, opts *github.ListOptions) ([]*github.CommitFile, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", ctx, owner, repo, number, opts)
	ret0, _ := ret[0].([]*github.CommitFile)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockPullRequestsServiceMockRecorder) ListFiles(ctx, owner, repo, number, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockPullRequestsService)(nil).ListFiles), ctx, owner, repo, number, opts)
}

// ListPullRequestsWithCommit mocks base method.
func (m *MockPullRequestsService) ListPullRequestsWithCommit(ctx context.Context, owner, repo, sha string, opts *github.PullRequestListOptions) ([]*github.PullRequest, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPullRequestsWithCommit", ctx, owner, repo, sha, opts)
	ret0, _ := ret[0].([]*github.PullRequest)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPullRequestsWithCommit indicates an expected call of ListPullRequestsWithCommit.
func (mr *MockPullRequestsServiceMockRecorder) ListPullRequestsWithCommit(ctx, owner, repo, sha, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPullRequestsWithCommit", reflect.TypeOf((*MockPullRequestsService)(nil).ListPullRequestsWithCommit), ctx, owner, repo, sha, opts)
}

// ListReviewComments mocks base method.
func (m *MockPullRequestsService) ListReviewComments(ctx context.Context, owner, repo string, number int, reviewID int64, opts *github.ListOptions) ([]*github.PullRequestComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReviewComments", ctx, owner, repo, number, reviewID, opts)
	ret0, _ := ret[0].([]*github.PullRequestComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListReviewComments indicates an expected call of ListReviewComments.
func (mr *MockPullRequestsServiceMockRecorder) ListReviewComments(ctx, owner, repo, number, reviewID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReviewComments", reflect.TypeOf((*MockPullRequestsService)(nil).ListReviewComments), ctx, owner, repo, number, reviewID, opts)
}

// ListReviewers mocks base method.
func (m *MockPullRequestsService) ListReviewers(ctx context.Context, owner, repo string, number int, opts *github.ListOptions) (*github.Reviewers, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReviewers", ctx, owner, repo, number, opts)
	ret0, _ := ret[0].(*github.Reviewers)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListReviewers indicates an expected call of ListReviewers.
func (mr *MockPullRequestsServiceMockRecorder) ListReviewers(ctx, owner, repo, number, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReviewers", reflect.TypeOf((*MockPullRequestsService)(nil).ListReviewers), ctx, owner, repo, number, opts)
}

// ListReviews mocks base method.
func (m *MockPullRequestsService) ListReviews(ctx context.Context, owner, repo string, number int, opts *github.ListOptions) ([]*github.PullRequestReview, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReviews", ctx, owner, repo, number, opts)
	ret0, _ := ret[0].([]*github.PullRequestReview)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListReviews indicates an expected call of ListReviews.
func (mr *MockPullRequestsServiceMockRecorder) ListReviews(ctx, owner, repo, number, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReviews", reflect.TypeOf((*MockPullRequestsService)(nil).ListReviews), ctx, owner, repo, number, opts)
}

// Merge mocks base method.
func (m *MockPullRequestsService) Merge(ctx context.Context, owner, repo string, number int, commitMessage string, options *github.PullRequestOptions) (*github.PullRequestMergeResult, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Merge", ctx, owner, repo, number, commitMessage, options)
	ret0, _ := ret[0].(*github.PullRequestMergeResult)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Merge indicates an expected call of Merge.
func (mr *MockPullRequestsServiceMockRecorder) Merge(ctx, owner, repo, number, commitMessage, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockPullRequestsService)(nil).Merge), ctx, owner, repo, number, commitMessage, options)
}

// RemoveReviewers mocks base method.
func (m *MockPullRequestsService) RemoveReviewers(ctx context.Context, owner, repo string, number int, reviewers github.ReviewersRequest) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReviewers", ctx, owner, repo, number, reviewers)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveReviewers indicates an expected call of RemoveReviewers.
func (mr *MockPullRequestsServiceMockRecorder) RemoveReviewers(ctx, owner, repo, number, reviewers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReviewers", reflect.TypeOf((*MockPullRequestsService)(nil).RemoveReviewers), ctx, owner, repo, number, reviewers)
}

// RequestReviewers mocks base method.
func (m *MockPullRequestsService) RequestReviewers(ctx context.Context, owner, repo string, number int, reviewers github.ReviewersRequest) (*github.PullRequest, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestReviewers", ctx, owner, repo, number, reviewers)
	ret0, _ := ret[0].(*github.PullRequest)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RequestReviewers indicates an expected call of RequestReviewers.
func (mr *MockPullRequestsServiceMockRecorder) RequestReviewers(ctx, owner, repo, number, reviewers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestReviewers", reflect.TypeOf((*MockPullRequestsService)(nil).RequestReviewers), ctx, owner, repo, number, reviewers)
}

// SubmitReview mocks base method.
func (m *MockPullRequestsService) SubmitReview(ctx context.Context, owner, repo string, number int, reviewID int64, review *github.PullRequestReviewRequest) (*github.PullRequestReview, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitReview", ctx, owner, repo, number, reviewID, review)
	ret0, _ := ret[0].(*github.PullRequestReview)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SubmitReview indicates an expected call of SubmitReview.
func (mr *MockPullRequestsServiceMockRecorder) SubmitReview(ctx, owner, repo, number, reviewID, review interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitReview", reflect.TypeOf((*MockPullRequestsService)(nil).SubmitReview), ctx, owner, repo, number, reviewID, review)
}

// UpdateBranch mocks base method.
func (m *MockPullRequestsService) UpdateBranch(ctx context.Context, owner, repo string, number int, opts *github.PullRequestBranchUpdateOptions) (*github.PullRequestBranchUpdateResponse, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBranch", ctx, owner, repo, number, opts)
	ret0, _ := ret[0].(*github.PullRequestBranchUpdateResponse)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateBranch indicates an expected call of UpdateBranch.
func (mr *MockPullRequestsServiceMockRecorder) UpdateBranch(ctx, owner, repo, number, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBranch", reflect.TypeOf((*MockPullRequestsService)(nil).UpdateBranch), ctx, owner, repo, number, opts)
}

// UpdateReview mocks base method.
func (m *MockPullRequestsService) UpdateReview(ctx context.Context, owner, repo string, number int, reviewID int64, body string) (*github.PullRequestReview, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReview", ctx, owner, repo, number, reviewID, body)
	ret0, _ := ret[0].(*github.PullRequestReview)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateReview indicates an expected call of UpdateReview.
func (mr *MockPullRequestsServiceMockRecorder) UpdateReview(ctx, owner, repo, number, reviewID, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReview", reflect.TypeOf((*MockPullRequestsService)(nil).UpdateReview), ctx, owner, repo, number, reviewID, body)
}

// MockReactionsService is a mock of ReactionsService interface.
type MockReactionsService struct {
	ctrl     *gomock.Controller
	recorder *MockReactionsServiceMockRecorder
}

// MockReactionsServiceMockRecorder is the mock recorder for MockReactionsService.
type MockReactionsServiceMockRecorder struct {
	mock *MockReactionsService
}

// NewMockReactionsService creates a new mock instance.
func NewMockReactionsService(ctrl *gomock.Controller) *MockReactionsService {
	mock := &MockReactionsService{ctrl: ctrl}
	mock.recorder = &MockReactionsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReactionsService) EXPECT() *MockReactionsServiceMockRecorder {
	return m.recorder
}

// CreateCommentReaction mocks base method.
func (m *MockReactionsService) CreateCommentReaction(ctx context.Context, owner, repo string, id int64, content string) (*github.Reaction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommentReaction", ctx, owner, repo, id, content)
	ret0, _ := ret[0].(*github.Reaction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCommentReaction indicates an expected call of CreateCommentReaction.
func (mr *MockReactionsServiceMockRecorder) CreateCommentReaction(ctx, owner, repo, id, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentReaction", reflect.TypeOf((*MockReactionsService)(nil).CreateCommentReaction), ctx, owner, repo, id, content)
}

// CreateIssueCommentReaction mocks base method.
func (m *MockReactionsService) CreateIssueCommentReaction(ctx context.Context, owner, repo string, id int64, content string) (*github.Reaction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIssueCommentReaction", ctx, owner, repo, id, content)
	ret0, _ := ret[0].(*github.Reaction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateIssueCommentReaction indicates an expected call of CreateIssueCommentReaction.
func (mr *MockReactionsServiceMockRecorder) CreateIssueCommentReaction(ctx, owner, repo, id, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssueCommentReaction", reflect.TypeOf((*MockReactionsService)(nil).CreateIssueCommentReaction), ctx, owner, repo, id, content)
}

// CreateIssueReaction mocks base method.
func (m *MockReactionsService) CreateIssueReaction(ctx context.Context, owner, repo string, number int, content string) (*github.Reaction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIssueReaction", ctx, owner, repo, number, content)
	ret0, _ := ret[0].(*github.Reaction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateIssueReaction indicates an expected call of CreateIssueReaction.
func (mr *MockReactionsServiceMockRecorder) CreateIssueReaction(ctx, owner, repo, number, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssueReaction", reflect.TypeOf((*MockReactionsService)(nil).CreateIssueReaction), ctx, owner, repo, number, content)
}

// CreatePullRequestCommentReaction mocks base method.
func (m *MockReactionsService) CreatePullRequestCommentReaction(ctx context.Context, owner, repo string, id int64, content string) (*github.Reaction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePullRequestCommentReaction", ctx, owner, repo, id, content)
	ret0, _ := ret[0].(*github.Reaction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreatePullRequestCommentReaction indicates an expected call of CreatePullRequestCommentReaction.
func (mr *MockReactionsServiceMockRecorder) CreatePullRequestCommentReaction(ctx, owner, repo, id, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePullRequestCommentReaction", reflect.TypeOf((*MockReactionsService)(nil).CreatePullRequestCommentReaction), ctx, owner, repo, id, content)
}

// CreateReleaseReaction mocks base method.
func (m *MockReactionsService) CreateReleaseReaction(ctx context.Context, owner, repo string, releaseID int64, content string) (*github.Reaction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReleaseReaction", ctx, owner, repo, releaseID, content)
	ret0, _ := ret[0].(*github.Reaction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateReleaseReaction indicates an expected call of CreateReleaseReaction.
func (mr *MockReactionsServiceMockRecorder) CreateReleaseReaction(ctx, owner, repo, releaseID, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReleaseReaction", reflect.TypeOf((*MockReactionsService)(nil).CreateReleaseReaction), ctx, owner, repo, releaseID, content)
}

// CreateTeamDiscussionCommentReaction mocks base method.
func (m *MockReactionsService) CreateTeamDiscussionCommentReaction(ctx context.Context, teamID int64, discussionNumber, commentNumber int, content string) (*github.Reaction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeamDiscussionCommentReaction", ctx, teamID, discussionNumber, commentNumber, content)
	ret0, _ := ret[0].(*github.Reaction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTeamDiscussionCommentReaction indicates an expected call of CreateTeamDiscussionCommentReaction.
func (mr *MockReactionsServiceMockRecorder) CreateTeamDiscussionCommentReaction(ctx, teamID, discussionNumber, commentNumber, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeamDiscussionCommentReaction", reflect.TypeOf((*MockReactionsService)(nil).CreateTeamDiscussionCommentReaction), ctx, teamID, discussionNumber, commentNumber, content)
}

// CreateTeamDiscussionReaction mocks base method.
func (m *MockReactionsService) CreateTeamDiscussionReaction(ctx context.Context, teamID int64, discussionNumber int, content string) (*github.Reaction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeamDiscussionReaction", ctx, teamID, discussionNumber, content)
	ret0, _ := ret[0].(*github.Reaction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTeamDiscussionReaction indicates an expected call of CreateTeamDiscussionReaction.
func (mr *MockReactionsServiceMockRecorder) CreateTeamDiscussionReaction(ctx, teamID, discussionNumber, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeamDiscussionReaction", reflect.TypeOf((*MockReactionsService)(nil).CreateTeamDiscussionReaction), ctx, teamID, discussionNumber, content)
}

// DeleteCommentReaction mocks base method.
func (m *MockReactionsService) DeleteCommentReaction(ctx context.Context, owner, repo string, commentID, reactionID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommentReaction", ctx, owner, repo, commentID, reactionID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCommentReaction indicates an expected call of DeleteCommentReaction.
func (mr *MockReactionsServiceMockRecorder) DeleteCommentReaction(ctx, owner, repo, commentID, reactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommentReaction", reflect.TypeOf((*MockReactionsService)(nil).DeleteCommentReaction), ctx, owner, repo, commentID, reactionID)
}

// DeleteCommentReactionByID mocks base method.
func (m *MockReactionsService) DeleteCommentReactionByID(ctx context.Context, repoID, commentID, reactionID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommentReactionByID", ctx, repoID, commentID, reactionID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCommentReactionByID indicates an expected call of DeleteCommentReactionByID.
func (mr *MockReactionsServiceMockRecorder) DeleteCommentReactionByID(ctx, repoID, commentID, reactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommentReactionByID", reflect.TypeOf((*MockReactionsService)(nil).DeleteCommentReactionByID), ctx, repoID, commentID, reactionID)
}

// DeleteIssueCommentReaction mocks base method.
func (m *MockReactionsService) DeleteIssueCommentReaction(ctx context.Context, owner, repo string, commentID, reactionID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIssueCommentReaction", ctx, owner, repo, commentID, reactionID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIssueCommentReaction indicates an expected call of DeleteIssueCommentReaction.
func (mr *MockReactionsServiceMockRecorder) DeleteIssueCommentReaction(ctx, owner, repo, commentID, reactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIssueCommentReaction", reflect.TypeOf((*MockReactionsService)(nil).DeleteIssueCommentReaction), ctx, owner, repo, commentID, reactionID)
}

// DeleteIssueCommentReactionByID mocks base method.
func (m *MockReactionsService) DeleteIssueCommentReactionByID(ctx context.Context, repoID, commentID, reactionID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIssueCommentReactionByID", ctx, repoID, commentID, reactionID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIssueCommentReactionByID indicates an expected call of DeleteIssueCommentReactionByID.
func (mr *MockReactionsServiceMockRecorder) DeleteIssueCommentReactionByID(ctx, repoID, commentID, reactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIssueCommentReactionByID", reflect.TypeOf((*MockReactionsService)(nil).DeleteIssueCommentReactionByID), ctx, repoID, commentID, reactionID)
}

// DeleteIssueReaction mocks base method.
func (m *MockReactionsService) DeleteIssueReaction(ctx context.Context, owner, repo string, issueNumber int, reactionID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIssueReaction", ctx, owner, repo, issueNumber, reactionID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIssueReaction indicates an expected call of DeleteIssueReaction.
func (mr *MockReactionsServiceMockRecorder) DeleteIssueReaction(ctx, owner, repo, issueNumber, reactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIssueReaction", reflect.TypeOf((*MockReactionsService)(nil).DeleteIssueReaction), ctx, owner, repo, issueNumber, reactionID)
}

// DeleteIssueReactionByID mocks base method.
func (m *MockReactionsService) DeleteIssueReactionByID(ctx context.Context, repoID, issueNumber int, reactionID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIssueReactionByID", ctx, repoID, issueNumber, reactionID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIssueReactionByID indicates an expected call of DeleteIssueReactionByID.
func (mr *MockReactionsServiceMockRecorder) DeleteIssueReactionByID(ctx, repoID, issueNumber, reactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIssueReactionByID", reflect.TypeOf((*MockReactionsService)(nil).DeleteIssueReactionByID), ctx, repoID, issueNumber, reactionID)
}

// DeletePullRequestCommentReaction mocks base method.
func (m *MockReactionsService) DeletePullRequestCommentReaction(ctx context.Context, owner, repo string, commentID, reactionID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePullRequestCommentReaction", ctx, owner, repo, commentID, reactionID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePullRequestCommentReaction indicates an expected call of DeletePullRequestCommentReaction.
func (mr *MockReactionsServiceMockRecorder) DeletePullRequestCommentReaction(ctx, owner, repo, commentID, reactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePullRequestCommentReaction", reflect.TypeOf((*MockReactionsService)(nil).DeletePullRequestCommentReaction), ctx, owner, repo, commentID, reactionID)
}

// DeletePullRequestCommentReactionByID mocks base method.
func (m *MockReactionsService) DeletePullRequestCommentReactionByID(ctx context.Context, repoID, commentID, reactionID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePullRequestCommentReactionByID", ctx, repoID, commentID, reactionID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePullRequestCommentReactionByID indicates an expected call of DeletePullRequestCommentReactionByID.
func (mr *MockReactionsServiceMockRecorder) DeletePullRequestCommentReactionByID(ctx, repoID, commentID, reactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePullRequestCommentReactionByID", reflect.TypeOf((*MockReactionsService)(nil).DeletePullRequestCommentReactionByID), ctx, repoID, commentID, reactionID)
}

// DeleteTeamDiscussionCommentReaction mocks base method.
func (m *MockReactionsService) DeleteTeamDiscussionCommentReaction(ctx context.Context, org, teamSlug string, discussionNumber, commentNumber int, reactionID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeamDiscussionCommentReaction", ctx, org, teamSlug, discussionNumber, commentNumber, reactionID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTeamDiscussionCommentReaction indicates an expected call of DeleteTeamDiscussionCommentReaction.
func (mr *MockReactionsServiceMockRecorder) DeleteTeamDiscussionCommentReaction(ctx, org, teamSlug, discussionNumber, commentNumber, reactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeamDiscussionCommentReaction", reflect.TypeOf((*MockReactionsService)(nil).DeleteTeamDiscussionCommentReaction), ctx, org, teamSlug, discussionNumber, commentNumber, reactionID)
}

// DeleteTeamDiscussionCommentReactionByOrgIDAndTeamID mocks base method.
func (m *MockReactionsService) DeleteTeamDiscussionCommentReactionByOrgIDAndTeamID(ctx context.Context, orgID, teamID, discussionNumber, commentNumber int, reactionID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeamDiscussionCommentReactionByOrgIDAndTeamID", ctx, orgID, teamID, discussionNumber, commentNumber, reactionID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTeamDiscussionCommentReactionByOrgIDAndTeamID indicates an expected call of DeleteTeamDiscussionCommentReactionByOrgIDAndTeamID.
func (mr *MockReactionsServiceMockRecorder) DeleteTeamDiscussionCommentReactionByOrgIDAndTeamID(ctx, orgID, teamID, discussionNumber, commentNumber, reactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeamDiscussionCommentReactionByOrgIDAndTeamID", reflect.TypeOf((*MockReactionsService)(nil).DeleteTeamDiscussionCommentReactionByOrgIDAndTeamID), ctx, orgID, teamID, discussionNumber, commentNumber, reactionID)
}

// DeleteTeamDiscussionReaction mocks base method.
func (m *MockReactionsService) DeleteTeamDiscussionReaction(ctx context.Context, org, teamSlug string, discussionNumber int, reactionID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeamDiscussionReaction", ctx, org, teamSlug, discussionNumber, reactionID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTeamDiscussionReaction indicates an expected call of DeleteTeamDiscussionReaction.
func (mr *MockReactionsServiceMockRecorder) DeleteTeamDiscussionReaction(ctx, org, teamSlug, discussionNumber, reactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeamDiscussionReaction", reflect.TypeOf((*MockReactionsService)(nil).DeleteTeamDiscussionReaction), ctx, org, teamSlug, discussionNumber, reactionID)
}

// DeleteTeamDiscussionReactionByOrgIDAndTeamID mocks base method.
func (m *MockReactionsService) DeleteTeamDiscussionReactionByOrgIDAndTeamID(ctx context.Context, orgID, teamID, discussionNumber int, reactionID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeamDiscussionReactionByOrgIDAndTeamID", ctx, orgID, teamID, discussionNumber, reactionID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTeamDiscussionReactionByOrgIDAndTeamID indicates an expected call of DeleteTeamDiscussionReactionByOrgIDAndTeamID.
func (mr *MockReactionsServiceMockRecorder) DeleteTeamDiscussionReactionByOrgIDAndTeamID(ctx, orgID, teamID, discussionNumber, reactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeamDiscussionReactionByOrgIDAndTeamID", reflect.TypeOf((*MockReactionsService)(nil).DeleteTeamDiscussionReactionByOrgIDAndTeamID), ctx, orgID, teamID, discussionNumber, reactionID)
}

// ListCommentReactions mocks base method.
func (m *MockReactionsService) ListCommentReactions(ctx context.Context, owner, repo string, id int64, opts *github.ListCommentReactionOptions) ([]*github.Reaction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommentReactions", ctx, owner, repo, id, opts)
	ret0, _ := ret[0].([]*github.Reaction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCommentReactions indicates an expected call of ListCommentReactions.
func (mr *MockReactionsServiceMockRecorder) ListCommentReactions(ctx, owner, repo, id, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommentReactions", reflect.TypeOf((*MockReactionsService)(nil).ListCommentReactions), ctx, owner, repo, id, opts)
}

// ListIssueCommentReactions mocks base method.
func (m *MockReactionsService) ListIssueCommentReactions(ctx context.Context, owner, repo string, id int64, opts *github.ListOptions) ([]*github.Reaction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIssueCommentReactions", ctx, owner, repo, id, opts)
	ret0, _ := ret[0].([]*github.Reaction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListIssueCommentReactions indicates an expected call of ListIssueCommentReactions.
func (mr *MockReactionsServiceMockRecorder) ListIssueCommentReactions(ctx, owner, repo, id, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssueCommentReactions", reflect.TypeOf((*MockReactionsService)(nil).ListIssueCommentReactions), ctx, owner, repo, id, opts)
}

// ListIssueReactions mocks base method.
func (m *MockReactionsService) ListIssueReactions(ctx context.Context, owner, repo string, number int, opts *github.ListOptions) ([]*github.Reaction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIssueReactions", ctx, owner, repo, number, opts)
	ret0, _ := ret[0].([]*github.Reaction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListIssueReactions indicates an expected call of ListIssueReactions.
func (mr *MockReactionsServiceMockRecorder) ListIssueReactions(ctx, owner, repo, number, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssueReactions", reflect.TypeOf((*MockReactionsService)(nil).ListIssueReactions), ctx, owner, repo, number, opts)
}

// ListPullRequestCommentReactions mocks base method.
func (m *MockReactionsService) ListPullRequestCommentReactions(ctx context.Context, owner, repo string, id int64, opts *github.ListOptions) ([]*github.Reaction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPullRequestCommentReactions", ctx, owner, repo, id, opts)
	ret0, _ := ret[0].([]*github.Reaction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPullRequestCommentReactions indicates an expected call of ListPullRequestCommentReactions.
func (mr *MockReactionsServiceMockRecorder) ListPullRequestCommentReactions(ctx, owner, repo, id, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPullRequestCommentReactions", reflect.TypeOf((*MockReactionsService)(nil).ListPullRequestCommentReactions), ctx, owner, repo, id, opts)
}

// ListTeamDiscussionCommentReactions mocks base method.
func (m *MockReactionsService) ListTeamDiscussionCommentReactions(ctx context.Context, teamID int64, discussionNumber, commentNumber int, opts *github.ListOptions) ([]*github.Reaction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeamDiscussionCommentReactions", ctx, teamID, discussionNumber, commentNumber, opts)
	ret0, _ := ret[0].([]*github.Reaction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTeamDiscussionCommentReactions indicates an expected call of ListTeamDiscussionCommentReactions.
func (mr *MockReactionsServiceMockRecorder) ListTeamDiscussionCommentReactions(ctx, teamID, discussionNumber, commentNumber, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeamDiscussionCommentReactions", reflect.TypeOf((*MockReactionsService)(nil).ListTeamDiscussionCommentReactions), ctx, teamID, discussionNumber, commentNumber, opts)
}

// ListTeamDiscussionReactions mocks base method.
func (m *MockReactionsService) ListTeamDiscussionReactions(ctx context.Context, teamID int64, discussionNumber int, opts *github.ListOptions) ([]*github.Reaction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeamDiscussionReactions", ctx, teamID, discussionNumber, opts)
	ret0, _ := ret[0].([]*github.Reaction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTeamDiscussionReactions indicates an expected call of ListTeamDiscussionReactions.
func (mr *MockReactionsServiceMockRecorder) ListTeamDiscussionReactions(ctx, teamID, discussionNumber, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeamDiscussionReactions", reflect.TypeOf((*MockReactionsService)(nil).ListTeamDiscussionReactions), ctx, teamID, discussionNumber, opts)
}

// MockRepositoriesService is a mock of RepositoriesService interface.
type MockRepositoriesService struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoriesServiceMockRecorder
}

// MockRepositoriesServiceMockRecorder is the mock recorder for MockRepositoriesService.
type MockRepositoriesServiceMockRecorder struct {
	mock *MockRepositoriesService
}

// NewMockRepositoriesService creates a new mock instance.
func NewMockRepositoriesService(ctrl *gomock.Controller) *MockRepositoriesService {
	mock := &MockRepositoriesService{ctrl: ctrl}
	mock.recorder = &MockRepositoriesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoriesService) EXPECT() *MockRepositoriesServiceMockRecorder {
	return m.recorder
}

// AddAdminEnforcement mocks base method.
func (m *MockRepositoriesService) AddAdminEnforcement(ctx context.Context, owner, repo, branch string) (*github.AdminEnforcement, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAdminEnforcement", ctx, owner, repo, branch)
	ret0, _ := ret[0].(*github.AdminEnforcement)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddAdminEnforcement indicates an expected call of AddAdminEnforcement.
func (mr *MockRepositoriesServiceMockRecorder) AddAdminEnforcement(ctx, owner, repo, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAdminEnforcement", reflect.TypeOf((*MockRepositoriesService)(nil).AddAdminEnforcement), ctx, owner, repo, branch)
}

// AddAppRestrictions mocks base method.
func (m *MockRepositoriesService) AddAppRestrictions(ctx context.Context, owner, repo, branch string, slug []string) ([]*github.App, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAppRestrictions", ctx, owner, repo, branch, slug)
	ret0, _ := ret[0].([]*github.App)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddAppRestrictions indicates an expected call of AddAppRestrictions.
func (mr *MockRepositoriesServiceMockRecorder) AddAppRestrictions(ctx, owner, repo, branch, slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAppRestrictions", reflect.TypeOf((*MockRepositoriesService)(nil).AddAppRestrictions), ctx, owner, repo, branch, slug)
}

// AddAutolink mocks base method.
func (m *MockRepositoriesService) AddAutolink(ctx context.Context, owner, repo string, opts *github.AutolinkOptions) (*github.Autolink, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAutolink", ctx, owner, repo, opts)
	ret0, _ := ret[0].(*github.Autolink)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddAutolink indicates an expected call of AddAutolink.
func (mr *MockRepositoriesServiceMockRecorder) AddAutolink(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAutolink", reflect.TypeOf((*MockRepositoriesService)(nil).AddAutolink), ctx, owner, repo, opts)
}

// AddCollaborator mocks base method.
func (m *MockRepositoriesService) AddCollaborator(ctx context.Context, owner, repo, user string, opts *github.RepositoryAddCollaboratorOptions) (*github.CollaboratorInvitation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCollaborator", ctx, owner, repo, user, opts)
	ret0, _ := ret[0].(*github.CollaboratorInvitation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddCollaborator indicates an expected call of AddCollaborator.
func (mr *MockRepositoriesServiceMockRecorder) AddCollaborator(ctx, owner, repo, user, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCollaborator", reflect.TypeOf((*MockRepositoriesService)(nil).AddCollaborator), ctx, owner, repo, user, opts)
}

// CompareCommits mocks base method.
func (m *MockRepositoriesService) CompareCommits(ctx context.Context, owner, repo, base, head string, opts *github.ListOptions) (*github.CommitsComparison, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareCommits", ctx, owner, repo, base, head, opts)
	ret0, _ := ret[0].(*github.CommitsComparison)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CompareCommits indicates an expected call of CompareCommits.
func (mr *MockRepositoriesServiceMockRecorder) CompareCommits(ctx, owner, repo, base, head, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareCommits", reflect.TypeOf((*MockRepositoriesService)(nil).CompareCommits), ctx, owner, repo, base, head, opts)
}

// CompareCommitsRaw mocks base method.
func (m *MockRepositoriesService) CompareCommitsRaw(ctx context.Context, owner, repo, base, head string, opts github.RawOptions) (string, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareCommitsRaw", ctx, owner, repo, base, head, opts)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CompareCommitsRaw indicates an expected call of CompareCommitsRaw.
func (mr *MockRepositoriesServiceMockRecorder) CompareCommitsRaw(ctx, owner, repo, base, head, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareCommitsRaw", reflect.TypeOf((*MockRepositoriesService)(nil).CompareCommitsRaw), ctx, owner, repo, base, head, opts)
}

// Create mocks base method.
func (m *MockRepositoriesService) Create(ctx context.Context, org string, repo *github.Repository) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, org, repo)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockRepositoriesServiceMockRecorder) Create(ctx, org, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepositoriesService)(nil).Create), ctx, org, repo)
}

// CreateComment mocks base method.
func (m *MockRepositoriesService) CreateComment(ctx context.Context, owner, repo, sha string, comment *github.RepositoryComment) (*github.RepositoryComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, owner, repo, sha, comment)
	ret0, _ := ret[0].(*github.RepositoryComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockRepositoriesServiceMockRecorder) CreateComment(ctx, owner, repo, sha, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockRepositoriesService)(nil).CreateComment), ctx, owner, repo, sha, comment)
}

// CreateDeployment mocks base method.
func (m *MockRepositoriesService) CreateDeployment(ctx context.Context, owner, repo string, request *github.DeploymentRequest) (*github.Deployment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeployment", ctx, owner, repo, request)
	ret0, _ := ret[0].(*github.Deployment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDeployment indicates an expected call of CreateDeployment.
func (mr *MockRepositoriesServiceMockRecorder) CreateDeployment(ctx, owner, repo, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeployment", reflect.TypeOf((*MockRepositoriesService)(nil).CreateDeployment), ctx, owner, repo, request)
}

// CreateDeploymentStatus mocks base method.
func (m *MockRepositoriesService) CreateDeploymentStatus(ctx context.Context, owner, repo string, deployment int64, request *github.DeploymentStatusRequest) (*github.DeploymentStatus, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeploymentStatus", ctx, owner, repo, deployment, request)
	ret0, _ := ret[0].(*github.DeploymentStatus)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDeploymentStatus indicates an expected call of CreateDeploymentStatus.
func (mr *MockRepositoriesServiceMockRecorder) CreateDeploymentStatus(ctx, owner, repo, deployment, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeploymentStatus", reflect.TypeOf((*MockRepositoriesService)(nil).CreateDeploymentStatus), ctx, owner, repo, deployment, request)
}

// CreateFile mocks base method.
func (m *MockRepositoriesService) CreateFile(ctx context.Context, owner, repo, path string, opts *github.RepositoryContentFileOptions) (*github.RepositoryContentResponse, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", ctx, owner, repo, path, opts)
	ret0, _ := ret[0].(*github.RepositoryContentResponse)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockRepositoriesServiceMockRecorder) CreateFile(ctx, owner, repo, path, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockRepositoriesService)(nil).CreateFile), ctx, owner, repo, path, opts)
}

// CreateFork mocks base method.
func (m *MockRepositoriesService) CreateFork(ctx context.Context, owner, repo string, opts *github.RepositoryCreateForkOptions) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFork", ctx, owner, repo, opts)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateFork indicates an expected call of CreateFork.
func (mr *MockRepositoriesServiceMockRecorder) CreateFork(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFork", reflect.TypeOf((*MockRepositoriesService)(nil).CreateFork), ctx, owner, repo, opts)
}

// CreateFromTemplate mocks base method.
func (m *MockRepositoriesService) CreateFromTemplate(ctx context.Context, templateOwner, templateRepo string, templateRepoReq *github.TemplateRepoRequest) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFromTemplate", ctx, templateOwner, templateRepo, templateRepoReq)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateFromTemplate indicates an expected call of CreateFromTemplate.
func (mr *MockRepositoriesServiceMockRecorder) CreateFromTemplate(ctx, templateOwner, templateRepo, templateRepoReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFromTemplate", reflect.TypeOf((*MockRepositoriesService)(nil).CreateFromTemplate), ctx, templateOwner, templateRepo, templateRepoReq)
}

// CreateHook mocks base method.
func (m *MockRepositoriesService) CreateHook(ctx context.Context, owner, repo string, hook *github.Hook) (*github.Hook, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHook", ctx, owner, repo, hook)
	ret0, _ := ret[0].(*github.Hook)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateHook indicates an expected call of CreateHook.
func (mr *MockRepositoriesServiceMockRecorder) CreateHook(ctx, owner, repo, hook interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHook", reflect.TypeOf((*MockRepositoriesService)(nil).CreateHook), ctx, owner, repo, hook)
}

// CreateKey mocks base method.
func (m *MockRepositoriesService) CreateKey(ctx context.Context, owner, repo string, key *github.Key) (*github.Key, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKey", ctx, owner, repo, key)
	ret0, _ := ret[0].(*github.Key)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateKey indicates an expected call of CreateKey.
func (mr *MockRepositoriesServiceMockRecorder) CreateKey(ctx, owner, repo, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKey", reflect.TypeOf((*MockRepositoriesService)(nil).CreateKey), ctx, owner, repo, key)
}

// CreateProject mocks base method.
func (m *MockRepositoriesService) CreateProject(ctx context.Context, owner, repo string, opts *github.ProjectOptions) (*github.Project, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", ctx, owner, repo, opts)
	ret0, _ := ret[0].(*github.Project)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockRepositoriesServiceMockRecorder) CreateProject(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockRepositoriesService)(nil).CreateProject), ctx, owner, repo, opts)
}

// CreateRelease mocks base method.
func (m *MockRepositoriesService) CreateRelease(ctx context.Context, owner, repo string, release *github.RepositoryRelease) (*github.RepositoryRelease, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRelease", ctx, owner, repo, release)
	ret0, _ := ret[0].(*github.RepositoryRelease)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRelease indicates an expected call of CreateRelease.
func (mr *MockRepositoriesServiceMockRecorder) CreateRelease(ctx, owner, repo, release interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRelease", reflect.TypeOf((*MockRepositoriesService)(nil).CreateRelease), ctx, owner, repo, release)
}

// CreateStatus mocks base method.
func (m *MockRepositoriesService) CreateStatus(ctx context.Context, owner, repo, ref string, status *github.RepoStatus) (*github.RepoStatus, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStatus", ctx, owner, repo, ref, status)
	ret0, _ := ret[0].(*github.RepoStatus)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateStatus indicates an expected call of CreateStatus.
func (mr *MockRepositoriesServiceMockRecorder) CreateStatus(ctx, owner, repo, ref, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStatus", reflect.TypeOf((*MockRepositoriesService)(nil).CreateStatus), ctx, owner, repo, ref, status)
}

// CreateTagProtection mocks base method.
func (m *MockRepositoriesService) CreateTagProtection(ctx context.Context, owner, repo, pattern string) (*github.TagProtection, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTagProtection", ctx, owner, repo, pattern)
	ret0, _ := ret[0].(*github.TagProtection)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTagProtection indicates an expected call of CreateTagProtection.
func (mr *MockRepositoriesServiceMockRecorder) CreateTagProtection(ctx, owner, repo, pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTagProtection", reflect.TypeOf((*MockRepositoriesService)(nil).CreateTagProtection), ctx, owner, repo, pattern)
}

// CreateUpdateEnvironment mocks base method.
func (m *MockRepositoriesService) CreateUpdateEnvironment(ctx context.Context, owner, repo, name string, environment *github.CreateUpdateEnvironment) (*github.Environment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUpdateEnvironment", ctx, owner, repo, name, environment)
	ret0, _ := ret[0].(*github.Environment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateUpdateEnvironment indicates an expected call of CreateUpdateEnvironment.
func (mr *MockRepositoriesServiceMockRecorder) CreateUpdateEnvironment(ctx, owner, repo, name, environment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUpdateEnvironment", reflect.TypeOf((*MockRepositoriesService)(nil).CreateUpdateEnvironment), ctx, owner, repo, name, environment)
}

// Delete mocks base method.
func (m *MockRepositoriesService) Delete(ctx context.Context, owner, repo string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, owner, repo)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoriesServiceMockRecorder) Delete(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepositoriesService)(nil).Delete), ctx, owner, repo)
}

// DeleteAutolink mocks base method.
func (m *MockRepositoriesService) DeleteAutolink(ctx context.Context, owner, repo string, id int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAutolink", ctx, owner, repo, id)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAutolink indicates an expected call of DeleteAutolink.
func (mr *MockRepositoriesServiceMockRecorder) DeleteAutolink(ctx, owner, repo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAutolink", reflect.TypeOf((*MockRepositoriesService)(nil).DeleteAutolink), ctx, owner, repo, id)
}

// DeleteComment mocks base method.
func (m *MockRepositoriesService) DeleteComment(ctx context.Context, owner, repo string, id int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, owner, repo, id)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockRepositoriesServiceMockRecorder) DeleteComment(ctx, owner, repo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockRepositoriesService)(nil).DeleteComment), ctx, owner, repo, id)
}

// DeleteDeployment mocks base method.
func (m *MockRepositoriesService) DeleteDeployment(ctx context.Context, owner, repo string, deploymentID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeployment", ctx, owner, repo, deploymentID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDeployment indicates an expected call of DeleteDeployment.
func (mr *MockRepositoriesServiceMockRecorder) DeleteDeployment(ctx, owner, repo, deploymentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeployment", reflect.TypeOf((*MockRepositoriesService)(nil).DeleteDeployment), ctx, owner, repo, deploymentID)
}

// DeleteEnvironment mocks base method.
func (m *MockRepositoriesService) DeleteEnvironment(ctx context.Context, owner, repo, name string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironment", ctx, owner, repo, name)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment.
func (mr *MockRepositoriesServiceMockRecorder) DeleteEnvironment(ctx, owner, repo, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*MockRepositoriesService)(nil).DeleteEnvironment), ctx, owner, repo, name)
}

// DeleteFile mocks base method.
func (m *MockRepositoriesService) DeleteFile(ctx context.Context, owner, repo, path string, opts *github.RepositoryContentFileOptions) (*github.RepositoryContentResponse, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, owner, repo, path, opts)
	ret0, _ := ret[0].(*github.RepositoryContentResponse)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockRepositoriesServiceMockRecorder) DeleteFile(ctx, owner, repo, path, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockRepositoriesService)(nil).DeleteFile), ctx, owner, repo, path, opts)
}

// DeleteHook mocks base method.
func (m *MockRepositoriesService) DeleteHook(ctx context.Context, owner, repo string, id int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHook", ctx, owner, repo, id)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHook indicates an expected call of DeleteHook.
func (mr *MockRepositoriesServiceMockRecorder) DeleteHook(ctx, owner, repo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHook", reflect.TypeOf((*MockRepositoriesService)(nil).DeleteHook), ctx, owner, repo, id)
}

// DeleteInvitation mocks base method.
func (m *MockRepositoriesService) DeleteInvitation(ctx context.Context, owner, repo string, invitationID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvitation", ctx, owner, repo, invitationID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInvitation indicates an expected call of DeleteInvitation.
func (mr *MockRepositoriesServiceMockRecorder) DeleteInvitation(ctx, owner, repo, invitationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvitation", reflect.TypeOf((*MockRepositoriesService)(nil).DeleteInvitation), ctx, owner, repo, invitationID)
}

// DeleteKey mocks base method.
func (m *MockRepositoriesService) DeleteKey(ctx context.Context, owner, repo string, id int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKey", ctx, owner, repo, id)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKey indicates an expected call of DeleteKey.
func (mr *MockRepositoriesServiceMockRecorder) DeleteKey(ctx, owner, repo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKey", reflect.TypeOf((*MockRepositoriesService)(nil).DeleteKey), ctx, owner, repo, id)
}

// DeletePreReceiveHook mocks base method.
func (m *MockRepositoriesService) DeletePreReceiveHook(ctx context.Context, owner, repo string, id int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePreReceiveHook", ctx, owner, repo, id)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePreReceiveHook indicates an expected call of DeletePreReceiveHook.
func (mr *MockRepositoriesServiceMockRecorder) DeletePreReceiveHook(ctx, owner, repo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePreReceiveHook", reflect.TypeOf((*MockRepositoriesService)(nil).DeletePreReceiveHook), ctx, owner, repo, id)
}

// DeleteRelease mocks base method.
func (m *MockRepositoriesService) DeleteRelease(ctx context.Context, owner, repo string, id int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRelease", ctx, owner, repo, id)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRelease indicates an expected call of DeleteRelease.
func (mr *MockRepositoriesServiceMockRecorder) DeleteRelease(ctx, owner, repo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRelease", reflect.TypeOf((*MockRepositoriesService)(nil).DeleteRelease), ctx, owner, repo, id)
}

// DeleteReleaseAsset mocks base method.
func (m *MockRepositoriesService) DeleteReleaseAsset(ctx context.Context, owner, repo string, id int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReleaseAsset", ctx, owner, repo, id)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReleaseAsset indicates an expected call of DeleteReleaseAsset.
func (mr *MockRepositoriesServiceMockRecorder) DeleteReleaseAsset(ctx, owner, repo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReleaseAsset", reflect.TypeOf((*MockRepositoriesService)(nil).DeleteReleaseAsset), ctx, owner, repo, id)
}

// DeleteTagProtection mocks base method.
func (m *MockRepositoriesService) DeleteTagProtection(ctx context.Context, owner, repo string, tagProtectionID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTagProtection", ctx, owner, repo, tagProtectionID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTagProtection indicates an expected call of DeleteTagProtection.
func (mr *MockRepositoriesServiceMockRecorder) DeleteTagProtection(ctx, owner, repo, tagProtectionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTagProtection", reflect.TypeOf((*MockRepositoriesService)(nil).DeleteTagProtection), ctx, owner, repo, tagProtectionID)
}

// DisableAutomatedSecurityFixes mocks base method.
func (m *MockRepositoriesService) DisableAutomatedSecurityFixes(ctx context.Context, owner, repository string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableAutomatedSecurityFixes", ctx, owner, repository)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableAutomatedSecurityFixes indicates an expected call of DisableAutomatedSecurityFixes.
func (mr *MockRepositoriesServiceMockRecorder) DisableAutomatedSecurityFixes(ctx, owner, repository interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableAutomatedSecurityFixes", reflect.TypeOf((*MockRepositoriesService)(nil).DisableAutomatedSecurityFixes), ctx, owner, repository)
}

// DisableDismissalRestrictions mocks base method.
func (m *MockRepositoriesService) DisableDismissalRestrictions(ctx context.Context, owner, repo, branch string) (*github.PullRequestReviewsEnforcement, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableDismissalRestrictions", ctx, owner, repo, branch)
	ret0, _ := ret[0].(*github.PullRequestReviewsEnforcement)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DisableDismissalRestrictions indicates an expected call of DisableDismissalRestrictions.
func (mr *MockRepositoriesServiceMockRecorder) DisableDismissalRestrictions(ctx, owner, repo, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableDismissalRestrictions", reflect.TypeOf((*MockRepositoriesService)(nil).DisableDismissalRestrictions), ctx, owner, repo, branch)
}

// DisableLFS mocks base method.
func (m *MockRepositoriesService) DisableLFS(ctx context.Context, owner, repo string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableLFS", ctx, owner, repo)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableLFS indicates an expected call of DisableLFS.
func (mr *MockRepositoriesServiceMockRecorder) DisableLFS(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableLFS", reflect.TypeOf((*MockRepositoriesService)(nil).DisableLFS), ctx, owner, repo)
}

// DisablePages mocks base method.
func (m *MockRepositoriesService) DisablePages(ctx context.Context, owner, repo string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisablePages", ctx, owner, repo)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisablePages indicates an expected call of DisablePages.
func (mr *MockRepositoriesServiceMockRecorder) DisablePages(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisablePages", reflect.TypeOf((*MockRepositoriesService)(nil).DisablePages), ctx, owner, repo)
}

// DisableVulnerabilityAlerts mocks base method.
func (m *MockRepositoriesService) DisableVulnerabilityAlerts(ctx context.Context, owner, repository string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableVulnerabilityAlerts", ctx, owner, repository)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableVulnerabilityAlerts indicates an expected call of DisableVulnerabilityAlerts.
func (mr *MockRepositoriesServiceMockRecorder) DisableVulnerabilityAlerts(ctx, owner, repository interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableVulnerabilityAlerts", reflect.TypeOf((*MockRepositoriesService)(nil).DisableVulnerabilityAlerts), ctx, owner, repository)
}

// Dispatch mocks base method.
func (m *MockRepositoriesService) Dispatch(ctx context.Context, owner, repo string, opts github.DispatchRequestOptions) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dispatch", ctx, owner, repo, opts)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Dispatch indicates an expected call of Dispatch.
func (mr *MockRepositoriesServiceMockRecorder) Dispatch(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockRepositoriesService)(nil).Dispatch), ctx, owner, repo, opts)
}

// DownloadContents mocks base method.
func (m *MockRepositoriesService) DownloadContents(ctx context.Context, owner, repo, filepath string, opts *github.RepositoryContentGetOptions) (io.ReadCloser, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadContents", ctx, owner, repo, filepath, opts)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DownloadContents indicates an expected call of DownloadContents.
func (mr *MockRepositoriesServiceMockRecorder) DownloadContents(ctx, owner, repo, filepath, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadContents", reflect.TypeOf((*MockRepositoriesService)(nil).DownloadContents), ctx, owner, repo, filepath, opts)
}

// DownloadContentsWithMeta mocks base method.
func (m *MockRepositoriesService) DownloadContentsWithMeta(ctx context.Context, owner, repo, filepath string, opts *github.RepositoryContentGetOptions) (io.ReadCloser, *github.RepositoryContent, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadContentsWithMeta", ctx, owner, repo, filepath, opts)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(*github.RepositoryContent)
	ret2, _ := ret[2].(*github.Response)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// DownloadContentsWithMeta indicates an expected call of DownloadContentsWithMeta.
func (mr *MockRepositoriesServiceMockRecorder) DownloadContentsWithMeta(ctx, owner, repo, filepath, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadContentsWithMeta", reflect.TypeOf((*MockRepositoriesService)(nil).DownloadContentsWithMeta), ctx, owner, repo, filepath, opts)
}

// DownloadReleaseAsset mocks base method.
func (m *MockRepositoriesService) DownloadReleaseAsset(ctx context.Context, owner, repo string, id int64, followRedirectsClient *http.Client) (io.ReadCloser, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadReleaseAsset", ctx, owner, repo, id, followRedirectsClient)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DownloadReleaseAsset indicates an expected call of DownloadReleaseAsset.
func (mr *MockRepositoriesServiceMockRecorder) DownloadReleaseAsset(ctx, owner, repo, id, followRedirectsClient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadReleaseAsset", reflect.TypeOf((*MockRepositoriesService)(nil).DownloadReleaseAsset), ctx, owner, repo, id, followRedirectsClient)
}

// Edit mocks base method.
func (m *MockRepositoriesService) Edit(ctx context.Context, owner, repo string, repository *github.Repository) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", ctx, owner, repo, repository)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Edit indicates an expected call of Edit.
func (mr *MockRepositoriesServiceMockRecorder) Edit(ctx, owner, repo, repository interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockRepositoriesService)(nil).Edit), ctx, owner, repo, repository)
}

// EditActionsAllowed mocks base method.
func (m *MockRepositoriesService) EditActionsAllowed(ctx context.Context, org, repo string, actionsAllowed github.ActionsAllowed) (*github.ActionsAllowed, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditActionsAllowed", ctx, org, repo, actionsAllowed)
	ret0, _ := ret[0].(*github.ActionsAllowed)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditActionsAllowed indicates an expected call of EditActionsAllowed.
func (mr *MockRepositoriesServiceMockRecorder) EditActionsAllowed(ctx, org, repo, actionsAllowed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditActionsAllowed", reflect.TypeOf((*MockRepositoriesService)(nil).EditActionsAllowed), ctx, org, repo, actionsAllowed)
}

// EditActionsPermissions mocks base method.
func (m *MockRepositoriesService) EditActionsPermissions(ctx context.Context, owner, repo string, actionsPermissionsRepository github.ActionsPermissionsRepository) (*github.ActionsPermissionsRepository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditActionsPermissions", ctx, owner, repo, actionsPermissionsRepository)
	ret0, _ := ret[0].(*github.ActionsPermissionsRepository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditActionsPermissions indicates an expected call of EditActionsPermissions.
func (mr *MockRepositoriesServiceMockRecorder) EditActionsPermissions(ctx, owner, repo, actionsPermissionsRepository interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditActionsPermissions", reflect.TypeOf((*MockRepositoriesService)(nil).EditActionsPermissions), ctx, owner, repo, actionsPermissionsRepository)
}

// EditHook mocks base method.
func (m *MockRepositoriesService) EditHook(ctx context.Context, owner, repo string, id int64, hook *github.Hook) (*github.Hook, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditHook", ctx, owner, repo, id, hook)
	ret0, _ := ret[0].(*github.Hook)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditHook indicates an expected call of EditHook.
func (mr *MockRepositoriesServiceMockRecorder) EditHook(ctx, owner, repo, id, hook interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditHook", reflect.TypeOf((*MockRepositoriesService)(nil).EditHook), ctx, owner, repo, id, hook)
}

// EditRelease mocks base method.
func (m *MockRepositoriesService) EditRelease(ctx context.Context, owner, repo string, id int64, release *github.RepositoryRelease) (*github.RepositoryRelease, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditRelease", ctx, owner, repo, id, release)
	ret0, _ := ret[0].(*github.RepositoryRelease)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditRelease indicates an expected call of EditRelease.
func (mr *MockRepositoriesServiceMockRecorder) EditRelease(ctx, owner, repo, id, release interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditRelease", reflect.TypeOf((*MockRepositoriesService)(nil).EditRelease), ctx, owner, repo, id, release)
}

// EditReleaseAsset mocks base method.
func (m *MockRepositoriesService) EditReleaseAsset(ctx context.Context, owner, repo string, id int64, release *github.ReleaseAsset) (*github.ReleaseAsset, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditReleaseAsset", ctx, owner, repo, id, release)
	ret0, _ := ret[0].(*github.ReleaseAsset)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditReleaseAsset indicates an expected call of EditReleaseAsset.
func (mr *MockRepositoriesServiceMockRecorder) EditReleaseAsset(ctx, owner, repo, id, release interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditReleaseAsset", reflect.TypeOf((*MockRepositoriesService)(nil).EditReleaseAsset), ctx, owner, repo, id, release)
}

// EnableAutomatedSecurityFixes mocks base method.
func (m *MockRepositoriesService) EnableAutomatedSecurityFixes(ctx context.Context, owner, repository string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableAutomatedSecurityFixes", ctx, owner, repository)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableAutomatedSecurityFixes indicates an expected call of EnableAutomatedSecurityFixes.
func (mr *MockRepositoriesServiceMockRecorder) EnableAutomatedSecurityFixes(ctx, owner, repository interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableAutomatedSecurityFixes", reflect.TypeOf((*MockRepositoriesService)(nil).EnableAutomatedSecurityFixes), ctx, owner, repository)
}

// EnableLFS mocks base method.
func (m *MockRepositoriesService) EnableLFS(ctx context.Context, owner, repo string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableLFS", ctx, owner, repo)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableLFS indicates an expected call of EnableLFS.
func (mr *MockRepositoriesServiceMockRecorder) EnableLFS(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableLFS", reflect.TypeOf((*MockRepositoriesService)(nil).EnableLFS), ctx, owner, repo)
}

// EnablePages mocks base method.
func (m *MockRepositoriesService) EnablePages(ctx context.Context, owner, repo string, pages *github.Pages) (*github.Pages, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnablePages", ctx, owner, repo, pages)
	ret0, _ := ret[0].(*github.Pages)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EnablePages indicates an expected call of EnablePages.
func (mr *MockRepositoriesServiceMockRecorder) EnablePages(ctx, owner, repo, pages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnablePages", reflect.TypeOf((*MockRepositoriesService)(nil).EnablePages), ctx, owner, repo, pages)
}

// EnableVulnerabilityAlerts mocks base method.
func (m *MockRepositoriesService) EnableVulnerabilityAlerts(ctx context.Context, owner, repository string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableVulnerabilityAlerts", ctx, owner, repository)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableVulnerabilityAlerts indicates an expected call of EnableVulnerabilityAlerts.
func (mr *MockRepositoriesServiceMockRecorder) EnableVulnerabilityAlerts(ctx, owner, repository interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableVulnerabilityAlerts", reflect.TypeOf((*MockRepositoriesService)(nil).EnableVulnerabilityAlerts), ctx, owner, repository)
}

// GenerateReleaseNotes mocks base method.
func (m *MockRepositoriesService) GenerateReleaseNotes(ctx context.Context, owner, repo string, opts *github.GenerateNotesOptions) (*github.RepositoryReleaseNotes, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateReleaseNotes", ctx, owner, repo, opts)
	ret0, _ := ret[0].(*github.RepositoryReleaseNotes)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateReleaseNotes indicates an expected call of GenerateReleaseNotes.
func (mr *MockRepositoriesServiceMockRecorder) GenerateReleaseNotes(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateReleaseNotes", reflect.TypeOf((*MockRepositoriesService)(nil).GenerateReleaseNotes), ctx, owner, repo, opts)
}

// Get mocks base method.
func (m *MockRepositoriesService) Get(ctx context.Context, owner, repo string) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, owner, repo)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockRepositoriesServiceMockRecorder) Get(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepositoriesService)(nil).Get), ctx, owner, repo)
}

// GetActionsAllowed mocks base method.
func (m *MockRepositoriesService) GetActionsAllowed(ctx context.Context, org, repo string) (*github.ActionsAllowed, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionsAllowed", ctx, org, repo)
	ret0, _ := ret[0].(*github.ActionsAllowed)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetActionsAllowed indicates an expected call of GetActionsAllowed.
func (mr *MockRepositoriesServiceMockRecorder) GetActionsAllowed(ctx, org, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionsAllowed", reflect.TypeOf((*MockRepositoriesService)(nil).GetActionsAllowed), ctx, org, repo)
}

// GetActionsPermissions mocks base method.
func (m *MockRepositoriesService) GetActionsPermissions(ctx context.Context, owner, repo string) (*github.ActionsPermissionsRepository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionsPermissions", ctx, owner, repo)
	ret0, _ := ret[0].(*github.ActionsPermissionsRepository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetActionsPermissions indicates an expected call of GetActionsPermissions.
func (mr *MockRepositoriesServiceMockRecorder) GetActionsPermissions(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionsPermissions", reflect.TypeOf((*MockRepositoriesService)(nil).GetActionsPermissions), ctx, owner, repo)
}

// GetAdminEnforcement mocks base method.
func (m *MockRepositoriesService) GetAdminEnforcement(ctx context.Context, owner, repo, branch string) (*github.AdminEnforcement, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminEnforcement", ctx, owner, repo, branch)
	ret0, _ := ret[0].(*github.AdminEnforcement)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAdminEnforcement indicates an expected call of GetAdminEnforcement.
func (mr *MockRepositoriesServiceMockRecorder) GetAdminEnforcement(ctx, owner, repo, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminEnforcement", reflect.TypeOf((*MockRepositoriesService)(nil).GetAdminEnforcement), ctx, owner, repo, branch)
}

// GetArchiveLink mocks base method.
func (m *MockRepositoriesService) GetArchiveLink(ctx context.Context, owner, repo string, archiveformat github.ArchiveFormat, opts *github.RepositoryContentGetOptions, followRedirects bool) (*url.URL, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchiveLink", ctx, owner, repo, archiveformat, opts, followRedirects)
	ret0, _ := ret[0].(*url.URL)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetArchiveLink indicates an expected call of GetArchiveLink.
func (mr *MockRepositoriesServiceMockRecorder) GetArchiveLink(ctx, owner, repo, archiveformat, opts, followRedirects interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveLink", reflect.TypeOf((*MockRepositoriesService)(nil).GetArchiveLink), ctx, owner, repo, archiveformat, opts, followRedirects)
}

// GetAutolink mocks base method.
func (m *MockRepositoriesService) GetAutolink(ctx context.Context, owner, repo string, id int64) (*github.Autolink, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutolink", ctx, owner, repo, id)
	ret0, _ := ret[0].(*github.Autolink)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAutolink indicates an expected call of GetAutolink.
func (mr *MockRepositoriesServiceMockRecorder) GetAutolink(ctx, owner, repo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutolink", reflect.TypeOf((*MockRepositoriesService)(nil).GetAutolink), ctx, owner, repo, id)
}

// GetBranch mocks base method.
func (m *MockRepositoriesService) GetBranch(ctx context.Context, owner, repo, branch string, followRedirects bool) (*github.Branch, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranch", ctx, owner, repo, branch, followRedirects)
	ret0, _ := ret[0].(*github.Branch)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBranch indicates an expected call of GetBranch.
func (mr *MockRepositoriesServiceMockRecorder) GetBranch(ctx, owner, repo, branch, followRedirects interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranch", reflect.TypeOf((*MockRepositoriesService)(nil).GetBranch), ctx, owner, repo, branch, followRedirects)
}

// GetBranchProtection mocks base method.
func (m *MockRepositoriesService) GetBranchProtection(ctx context.Context, owner, repo, branch string) (*github.Protection, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranchProtection", ctx, owner, repo, branch)
	ret0, _ := ret[0].(*github.Protection)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBranchProtection indicates an expected call of GetBranchProtection.
func (mr *MockRepositoriesServiceMockRecorder) GetBranchProtection(ctx, owner, repo, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranchProtection", reflect.TypeOf((*MockRepositoriesService)(nil).GetBranchProtection), ctx, owner, repo, branch)
}

// GetByID mocks base method.
func (m *MockRepositoriesService) GetByID(ctx context.Context, id int64) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepositoriesServiceMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepositoriesService)(nil).GetByID), ctx, id)
}

// GetCodeOfConduct mocks base method.
func (m *MockRepositoriesService) GetCodeOfConduct(ctx context.Context, owner, repo string) (*github.CodeOfConduct, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeOfConduct", ctx, owner, repo)
	ret0, _ := ret[0].(*github.CodeOfConduct)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCodeOfConduct indicates an expected call of GetCodeOfConduct.
func (mr *MockRepositoriesServiceMockRecorder) GetCodeOfConduct(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeOfConduct", reflect.TypeOf((*MockRepositoriesService)(nil).GetCodeOfConduct), ctx, owner, repo)
}

// GetCodeownersErrors mocks base method.
func (m *MockRepositoriesService) GetCodeownersErrors(ctx context.Context, owner, repo string) (*github.CodeownersErrors, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeownersErrors", ctx, owner, repo)
	ret0, _ := ret[0].(*github.CodeownersErrors)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCodeownersErrors indicates an expected call of GetCodeownersErrors.
func (mr *MockRepositoriesServiceMockRecorder) GetCodeownersErrors(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeownersErrors", reflect.TypeOf((*MockRepositoriesService)(nil).GetCodeownersErrors), ctx, owner, repo)
}

// GetCombinedStatus mocks base method.
func (m *MockRepositoriesService) GetCombinedStatus(ctx context.Context, owner, repo, ref string, opts *github.ListOptions) (*github.CombinedStatus, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCombinedStatus", ctx, owner, repo, ref, opts)
	ret0, _ := ret[0].(*github.CombinedStatus)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCombinedStatus indicates an expected call of GetCombinedStatus.
func (mr *MockRepositoriesServiceMockRecorder) GetCombinedStatus(ctx, owner, repo, ref, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCombinedStatus", reflect.TypeOf((*MockRepositoriesService)(nil).GetCombinedStatus), ctx, owner, repo, ref, opts)
}

// GetComment mocks base method.
func (m *MockRepositoriesService) GetComment(ctx context.Context, owner, repo string, id int64) (*github.RepositoryComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", ctx, owner, repo, id)
	ret0, _ := ret[0].(*github.RepositoryComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetComment indicates an expected call of GetComment.
func (mr *MockRepositoriesServiceMockRecorder) GetComment(ctx, owner, repo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockRepositoriesService)(nil).GetComment), ctx, owner, repo, id)
}

// GetCommit mocks base method.
func (m *MockRepositoriesService) GetCommit(ctx context.Context, owner, repo, sha string, opts *github.ListOptions) (*github.RepositoryCommit, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommit", ctx, owner, repo, sha, opts)
	ret0, _ := ret[0].(*github.RepositoryCommit)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommit indicates an expected call of GetCommit.
func (mr *MockRepositoriesServiceMockRecorder) GetCommit(ctx, owner, repo, sha, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommit", reflect.TypeOf((*MockRepositoriesService)(nil).GetCommit), ctx, owner, repo, sha, opts)
}

// GetCommitRaw mocks base method.
func (m *MockRepositoriesService) GetCommitRaw(ctx context.Context, owner, repo, sha string, opts github.RawOptions) (string, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitRaw", ctx, owner, repo, sha, opts)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommitRaw indicates an expected call of GetCommitRaw.
func (mr *MockRepositoriesServiceMockRecorder) GetCommitRaw(ctx, owner, repo, sha, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitRaw", reflect.TypeOf((*MockRepositoriesService)(nil).GetCommitRaw), ctx, owner, repo, sha, opts)
}

// GetCommitSHA1 mocks base method.
func (m *MockRepositoriesService) GetCommitSHA1(ctx context.Context, owner, repo, ref, lastSHA string) (string, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitSHA1", ctx, owner, repo, ref, lastSHA)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommitSHA1 indicates an expected call of GetCommitSHA1.
func (mr *MockRepositoriesServiceMockRecorder) GetCommitSHA1(ctx, owner, repo, ref, lastSHA interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitSHA1", reflect.TypeOf((*MockRepositoriesService)(nil).GetCommitSHA1), ctx, owner, repo, ref, lastSHA)
}

// GetCommunityHealthMetrics mocks base method.
func (m *MockRepositoriesService) GetCommunityHealthMetrics(ctx context.Context, owner, repo string) (*github.CommunityHealthMetrics, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommunityHealthMetrics", ctx, owner, repo)
	ret0, _ := ret[0].(*github.CommunityHealthMetrics)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommunityHealthMetrics indicates an expected call of GetCommunityHealthMetrics.
func (mr *MockRepositoriesServiceMockRecorder) GetCommunityHealthMetrics(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommunityHealthMetrics", reflect.TypeOf((*MockRepositoriesService)(nil).GetCommunityHealthMetrics), ctx, owner, repo)
}

// GetContents mocks base method.
func (m *MockRepositoriesService) GetContents(ctx context.Context, owner, repo, path string, opts *github.RepositoryContentGetOptions) (*github.RepositoryContent, []*github.RepositoryContent, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContents", ctx, owner, repo, path, opts)
	ret0, _ := ret[0].(*github.RepositoryContent)
	ret1, _ := ret[1].([]*github.RepositoryContent)
	ret2, _ := ret[2].(*github.Response)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetContents indicates an expected call of GetContents.
func (mr *MockRepositoriesServiceMockRecorder) GetContents(ctx, owner, repo, path, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContents", reflect.TypeOf((*MockRepositoriesService)(nil).GetContents), ctx, owner, repo, path, opts)
}

// GetDeployment mocks base method.
func (m *MockRepositoriesService) GetDeployment(ctx context.Context, owner, repo string, deploymentID int64) (*github.Deployment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployment", ctx, owner, repo, deploymentID)
	ret0, _ := ret[0].(*github.Deployment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDeployment indicates an expected call of GetDeployment.
func (mr *MockRepositoriesServiceMockRecorder) GetDeployment(ctx, owner, repo, deploymentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployment", reflect.TypeOf((*MockRepositoriesService)(nil).GetDeployment), ctx, owner, repo, deploymentID)
}

// GetDeploymentStatus mocks base method.
func (m *MockRepositoriesService) GetDeploymentStatus(ctx context.Context, owner, repo string, deploymentID, deploymentStatusID int64) (*github.DeploymentStatus, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentStatus", ctx, owner, repo, deploymentID, deploymentStatusID)
	ret0, _ := ret[0].(*github.DeploymentStatus)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDeploymentStatus indicates an expected call of GetDeploymentStatus.
func (mr *MockRepositoriesServiceMockRecorder) GetDeploymentStatus(ctx, owner, repo, deploymentID, deploymentStatusID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentStatus", reflect.TypeOf((*MockRepositoriesService)(nil).GetDeploymentStatus), ctx, owner, repo, deploymentID, deploymentStatusID)
}

// GetEnvironment mocks base method.
func (m *MockRepositoriesService) GetEnvironment(ctx context.Context, owner, repo, name string) (*github.Environment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", ctx, owner, repo, name)
	ret0, _ := ret[0].(*github.Environment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEnvironment indicates an expected call of GetEnvironment.
func (mr *MockRepositoriesServiceMockRecorder) GetEnvironment(ctx, owner, repo, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockRepositoriesService)(nil).GetEnvironment), ctx, owner, repo, name)
}

// GetHook mocks base method.
func (m *MockRepositoriesService) GetHook(ctx context.Context, owner, repo string, id int64) (*github.Hook, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHook", ctx, owner, repo, id)
	ret0, _ := ret[0].(*github.Hook)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetHook indicates an expected call of GetHook.
func (mr *MockRepositoriesServiceMockRecorder) GetHook(ctx, owner, repo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHook", reflect.TypeOf((*MockRepositoriesService)(nil).GetHook), ctx, owner, repo, id)
}

// GetHookDelivery mocks base method.
func (m *MockRepositoriesService) GetHookDelivery(ctx context.Context, owner, repo string, hookID, deliveryID int64) (*github.HookDelivery, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHookDelivery", ctx, owner, repo, hookID, deliveryID)
	ret0, _ := ret[0].(*github.HookDelivery)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetHookDelivery indicates an expected call of GetHookDelivery.
func (mr *MockRepositoriesServiceMockRecorder) GetHookDelivery(ctx, owner, repo, hookID, deliveryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHookDelivery", reflect.TypeOf((*MockRepositoriesService)(nil).GetHookDelivery), ctx, owner, repo, hookID, deliveryID)
}

// GetKey mocks base method.
func (m *MockRepositoriesService) GetKey(ctx context.Context, owner, repo string, id int64) (*github.Key, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey", ctx, owner, repo, id)
	ret0, _ := ret[0].(*github.Key)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetKey indicates an expected call of GetKey.
func (mr *MockRepositoriesServiceMockRecorder) GetKey(ctx, owner, repo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockRepositoriesService)(nil).GetKey), ctx, owner, repo, id)
}

// GetLatestPagesBuild mocks base method.
func (m *MockRepositoriesService) GetLatestPagesBuild(ctx context.Context, owner, repo string) (*github.PagesBuild, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestPagesBuild", ctx, owner, repo)
	ret0, _ := ret[0].(*github.PagesBuild)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLatestPagesBuild indicates an expected call of GetLatestPagesBuild.
func (mr *MockRepositoriesServiceMockRecorder) GetLatestPagesBuild(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestPagesBuild", reflect.TypeOf((*MockRepositoriesService)(nil).GetLatestPagesBuild), ctx, owner, repo)
}

// GetLatestRelease mocks base method.
func (m *MockRepositoriesService) GetLatestRelease(ctx context.Context, owner, repo string) (*github.RepositoryRelease, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestRelease", ctx, owner, repo)
	ret0, _ := ret[0].(*github.RepositoryRelease)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLatestRelease indicates an expected call of GetLatestRelease.
func (mr *MockRepositoriesServiceMockRecorder) GetLatestRelease(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestRelease", reflect.TypeOf((*MockRepositoriesService)(nil).GetLatestRelease), ctx, owner, repo)
}

// GetPageBuild mocks base method.
func (m *MockRepositoriesService) GetPageBuild(ctx context.Context, owner, repo string, id int64) (*github.PagesBuild, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPageBuild", ctx, owner, repo, id)
	ret0, _ := ret[0].(*github.PagesBuild)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPageBuild indicates an expected call of GetPageBuild.
func (mr *MockRepositoriesServiceMockRecorder) GetPageBuild(ctx, owner, repo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPageBuild", reflect.TypeOf((*MockRepositoriesService)(nil).GetPageBuild), ctx, owner, repo, id)
}

// GetPagesInfo mocks base method.
func (m *MockRepositoriesService) GetPagesInfo(ctx context.Context, owner, repo string) (*github.Pages, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPagesInfo", ctx, owner, repo)
	ret0, _ := ret[0].(*github.Pages)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPagesInfo indicates an expected call of GetPagesInfo.
func (mr *MockRepositoriesServiceMockRecorder) GetPagesInfo(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPagesInfo", reflect.TypeOf((*MockRepositoriesService)(nil).GetPagesInfo), ctx, owner, repo)
}

// GetPermissionLevel mocks base method.
func (m *MockRepositoriesService) GetPermissionLevel(ctx context.Context, owner, repo, user string) (*github.RepositoryPermissionLevel, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionLevel", ctx, owner, repo, user)
	ret0, _ := ret[0].(*github.RepositoryPermissionLevel)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPermissionLevel indicates an expected call of GetPermissionLevel.
func (mr *MockRepositoriesServiceMockRecorder) GetPermissionLevel(ctx, owner, repo, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionLevel", reflect.TypeOf((*MockRepositoriesService)(nil).GetPermissionLevel), ctx, owner, repo, user)
}

// GetPreReceiveHook mocks base method.
func (m *MockRepositoriesService) GetPreReceiveHook(ctx context.Context, owner, repo string, id int64) (*github.PreReceiveHook, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreReceiveHook", ctx, owner, repo, id)
	ret0, _ := ret[0].(*github.PreReceiveHook)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPreReceiveHook indicates an expected call of GetPreReceiveHook.
func (mr *MockRepositoriesServiceMockRecorder) GetPreReceiveHook(ctx, owner, repo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreReceiveHook", reflect.TypeOf((*MockRepositoriesService)(nil).GetPreReceiveHook), ctx, owner, repo, id)
}

// GetPullRequestReviewEnforcement mocks base method.
func (m *MockRepositoriesService) GetPullRequestReviewEnforcement(ctx context.Context, owner, repo, branch string) (*github.PullRequestReviewsEnforcement, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestReviewEnforcement", ctx, owner, repo, branch)
	ret0, _ := ret[0].(*github.PullRequestReviewsEnforcement)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPullRequestReviewEnforcement indicates an expected call of GetPullRequestReviewEnforcement.
func (mr *MockRepositoriesServiceMockRecorder) GetPullRequestReviewEnforcement(ctx, owner, repo, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestReviewEnforcement", reflect.TypeOf((*MockRepositoriesService)(nil).GetPullRequestReviewEnforcement), ctx, owner, repo, branch)
}

// GetReadme mocks base method.
func (m *MockRepositoriesService) GetReadme(ctx context.Context, owner, repo string, opts *github.RepositoryContentGetOptions) (*github.RepositoryContent, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadme", ctx, owner, repo, opts)
	ret0, _ := ret[0].(*github.RepositoryContent)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetReadme indicates an expected call of GetReadme.
func (mr *MockRepositoriesServiceMockRecorder) GetReadme(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadme", reflect.TypeOf((*MockRepositoriesService)(nil).GetReadme), ctx, owner, repo, opts)
}

// GetRelease mocks base method.
func (m *MockRepositoriesService) GetRelease(ctx context.Context, owner, repo string, id int64) (*github.RepositoryRelease, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelease", ctx, owner, repo, id)
	ret0, _ := ret[0].(*github.RepositoryRelease)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRelease indicates an expected call of GetRelease.
func (mr *MockRepositoriesServiceMockRecorder) GetRelease(ctx, owner, repo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelease", reflect.TypeOf((*MockRepositoriesService)(nil).GetRelease), ctx, owner, repo, id)
}

// GetReleaseAsset mocks base method.
func (m *MockRepositoriesService) GetReleaseAsset(ctx context.Context, owner, repo string, id int64) (*github.ReleaseAsset, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReleaseAsset", ctx, owner, repo, id)
	ret0, _ := ret[0].(*github.ReleaseAsset)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetReleaseAsset indicates an expected call of GetReleaseAsset.
func (mr *MockRepositoriesServiceMockRecorder) GetReleaseAsset(ctx, owner, repo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleaseAsset", reflect.TypeOf((*MockRepositoriesService)(nil).GetReleaseAsset), ctx, owner, repo, id)
}

// GetReleaseByTag mocks base method.
func (m *MockRepositoriesService) GetReleaseByTag(ctx context.Context, owner, repo, tag string) (*github.RepositoryRelease, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReleaseByTag", ctx, owner, repo, tag)
	ret0, _ := ret[0].(*github.RepositoryRelease)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetReleaseByTag indicates an expected call of GetReleaseByTag.
func (mr *MockRepositoriesServiceMockRecorder) GetReleaseByTag(ctx, owner, repo, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleaseByTag", reflect.TypeOf((*MockRepositoriesService)(nil).GetReleaseByTag), ctx, owner, repo, tag)
}

// GetRequiredStatusChecks mocks base method.
func (m *MockRepositoriesService) GetRequiredStatusChecks(ctx context.Context, owner, repo, branch string) (*github.RequiredStatusChecks, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequiredStatusChecks", ctx, owner, repo, branch)
	ret0, _ := ret[0].(*github.RequiredStatusChecks)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRequiredStatusChecks indicates an expected call of GetRequiredStatusChecks.
func (mr *MockRepositoriesServiceMockRecorder) GetRequiredStatusChecks(ctx, owner, repo, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequiredStatusChecks", reflect.TypeOf((*MockRepositoriesService)(nil).GetRequiredStatusChecks), ctx, owner, repo, branch)
}

// GetSignaturesProtectedBranch mocks base method.
func (m *MockRepositoriesService) GetSignaturesProtectedBranch(ctx context.Context, owner, repo, branch string) (*github.SignaturesProtectedBranch, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignaturesProtectedBranch", ctx, owner, repo, branch)
	ret0, _ := ret[0].(*github.SignaturesProtectedBranch)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSignaturesProtectedBranch indicates an expected call of GetSignaturesProtectedBranch.
func (mr *MockRepositoriesServiceMockRecorder) GetSignaturesProtectedBranch(ctx, owner, repo, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignaturesProtectedBranch", reflect.TypeOf((*MockRepositoriesService)(nil).GetSignaturesProtectedBranch), ctx, owner, repo, branch)
}

// GetVulnerabilityAlerts mocks base method.
func (m *MockRepositoriesService) GetVulnerabilityAlerts(ctx context.Context, owner, repository string) (bool, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVulnerabilityAlerts", ctx, owner, repository)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVulnerabilityAlerts indicates an expected call of GetVulnerabilityAlerts.
func (mr *MockRepositoriesServiceMockRecorder) GetVulnerabilityAlerts(ctx, owner, repository interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVulnerabilityAlerts", reflect.TypeOf((*MockRepositoriesService)(nil).GetVulnerabilityAlerts), ctx, owner, repository)
}

// IsCollaborator mocks base method.
func (m *MockRepositoriesService) IsCollaborator(ctx context.Context, owner, repo, user string) (bool, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCollaborator", ctx, owner, repo, user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsCollaborator indicates an expected call of IsCollaborator.
func (mr *MockRepositoriesServiceMockRecorder) IsCollaborator(ctx, owner, repo, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCollaborator", reflect.TypeOf((*MockRepositoriesService)(nil).IsCollaborator), ctx, owner, repo, user)
}

// License mocks base method.
func (m *MockRepositoriesService) License(ctx context.Context, owner, repo string) (*github.RepositoryLicense, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "License", ctx, owner, repo)
	ret0, _ := ret[0].(*github.RepositoryLicense)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// License indicates an expected call of License.
func (mr *MockRepositoriesServiceMockRecorder) License(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "License", reflect.TypeOf((*MockRepositoriesService)(nil).License), ctx, owner, repo)
}

// List mocks base method.
func (m *MockRepositoriesService) List(ctx context.Context, user string, opts *github.RepositoryListOptions) ([]*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, user, opts)
	ret0, _ := ret[0].([]*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockRepositoriesServiceMockRecorder) List(ctx, user, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepositoriesService)(nil).List), ctx, user, opts)
}

// ListAll mocks base method.
func (m *MockRepositoriesService) ListAll(ctx context.Context, opts *github.RepositoryListAllOptions) ([]*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx, opts)
	ret0, _ := ret[0].([]*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAll indicates an expected call of ListAll.
func (mr *MockRepositoriesServiceMockRecorder) ListAll(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockRepositoriesService)(nil).ListAll), ctx, opts)
}

// ListAllTopics mocks base method.
func (m *MockRepositoriesService) ListAllTopics(ctx context.Context, owner, repo string) ([]string, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllTopics", ctx, owner, repo)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAllTopics indicates an expected call of ListAllTopics.
func (mr *MockRepositoriesServiceMockRecorder) ListAllTopics(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllTopics", reflect.TypeOf((*MockRepositoriesService)(nil).ListAllTopics), ctx, owner, repo)
}

// ListApps mocks base method.
func (m *MockRepositoriesService) ListApps(ctx context.Context, owner, repo, branch string) ([]*github.App, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApps", ctx, owner, repo, branch)
	ret0, _ := ret[0].([]*github.App)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListApps indicates an expected call of ListApps.
func (mr *MockRepositoriesServiceMockRecorder) ListApps(ctx, owner, repo, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApps", reflect.TypeOf((*MockRepositoriesService)(nil).ListApps), ctx, owner, repo, branch)
}

// ListAutolinks mocks base method.
func (m *MockRepositoriesService) ListAutolinks(ctx context.Context, owner, repo string, opts *github.ListOptions) ([]*github.Autolink, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAutolinks", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.Autolink)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAutolinks indicates an expected call of ListAutolinks.
func (mr *MockRepositoriesServiceMockRecorder) ListAutolinks(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAutolinks", reflect.TypeOf((*MockRepositoriesService)(nil).ListAutolinks), ctx, owner, repo, opts)
}

// ListBranches mocks base method.
func (m *MockRepositoriesService) ListBranches(ctx context.Context, owner, repo string, opts *github.BranchListOptions) ([]*github.Branch, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBranches", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.Branch)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBranches indicates an expected call of ListBranches.
func (mr *MockRepositoriesServiceMockRecorder) ListBranches(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBranches", reflect.TypeOf((*MockRepositoriesService)(nil).ListBranches), ctx, owner, repo, opts)
}

// ListBranchesHeadCommit mocks base method.
func (m *MockRepositoriesService) ListBranchesHeadCommit(ctx context.Context, owner, repo, sha string) ([]*github.BranchCommit, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBranchesHeadCommit", ctx, owner, repo, sha)
	ret0, _ := ret[0].([]*github.BranchCommit)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBranchesHeadCommit indicates an expected call of ListBranchesHeadCommit.
func (mr *MockRepositoriesServiceMockRecorder) ListBranchesHeadCommit(ctx, owner, repo, sha interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBranchesHeadCommit", reflect.TypeOf((*MockRepositoriesService)(nil).ListBranchesHeadCommit), ctx, owner, repo, sha)
}

// ListByOrg mocks base method.
func (m *MockRepositoriesService) ListByOrg(ctx context.Context, org string, opts *github.RepositoryListByOrgOptions) ([]*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByOrg", ctx, org, opts)
	ret0, _ := ret[0].([]*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByOrg indicates an expected call of ListByOrg.
func (mr *MockRepositoriesServiceMockRecorder) ListByOrg(ctx, org, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByOrg", reflect.TypeOf((*MockRepositoriesService)(nil).ListByOrg), ctx, org, opts)
}

// ListCodeFrequency mocks base method.
func (m *MockRepositoriesService) ListCodeFrequency(ctx context.Context, owner, repo string) ([]*github.WeeklyStats, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCodeFrequency", ctx, owner, repo)
	ret0, _ := ret[0].([]*github.WeeklyStats)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCodeFrequency indicates an expected call of ListCodeFrequency.
func (mr *MockRepositoriesServiceMockRecorder) ListCodeFrequency(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCodeFrequency", reflect.TypeOf((*MockRepositoriesService)(nil).ListCodeFrequency), ctx, owner, repo)
}

// ListCollaborators mocks base method.
func (m *MockRepositoriesService) ListCollaborators(ctx context.Context, owner, repo string, opts *github.ListCollaboratorsOptions) ([]*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCollaborators", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCollaborators indicates an expected call of ListCollaborators.
func (mr *MockRepositoriesServiceMockRecorder) ListCollaborators(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollaborators", reflect.TypeOf((*MockRepositoriesService)(nil).ListCollaborators), ctx, owner, repo, opts)
}

// ListComments mocks base method.
func (m *MockRepositoriesService) ListComments(ctx context.Context, owner, repo string, opts *github.ListOptions) ([]*github.RepositoryComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComments", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.RepositoryComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListComments indicates an expected call of ListComments.
func (mr *MockRepositoriesServiceMockRecorder) ListComments(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComments", reflect.TypeOf((*MockRepositoriesService)(nil).ListComments), ctx, owner, repo, opts)
}

// ListCommitActivity mocks base method.
func (m *MockRepositoriesService) ListCommitActivity(ctx context.Context, owner, repo string) ([]*github.WeeklyCommitActivity, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommitActivity", ctx, owner, repo)
	ret0, _ := ret[0].([]*github.WeeklyCommitActivity)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCommitActivity indicates an expected call of ListCommitActivity.
func (mr *MockRepositoriesServiceMockRecorder) ListCommitActivity(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommitActivity", reflect.TypeOf((*MockRepositoriesService)(nil).ListCommitActivity), ctx, owner, repo)
}

// ListCommitComments mocks base method.
func (m *MockRepositoriesService) ListCommitComments(ctx context.Context, owner, repo, sha string, opts *github.ListOptions) ([]*github.RepositoryComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommitComments", ctx, owner, repo, sha, opts)
	ret0, _ := ret[0].([]*github.RepositoryComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCommitComments indicates an expected call of ListCommitComments.
func (mr *MockRepositoriesServiceMockRecorder) ListCommitComments(ctx, owner, repo, sha, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommitComments", reflect.TypeOf((*MockRepositoriesService)(nil).ListCommitComments), ctx, owner, repo, sha, opts)
}

// ListCommits mocks base method.
func (m *MockRepositoriesService) ListCommits(ctx context.Context, owner, repo string, opts *github.CommitsListOptions) ([]*github.RepositoryCommit, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommits", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.RepositoryCommit)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCommits indicates an expected call of ListCommits.
func (mr *MockRepositoriesServiceMockRecorder) ListCommits(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommits", reflect.TypeOf((*MockRepositoriesService)(nil).ListCommits), ctx, owner, repo, opts)
}

// ListContributors mocks base method.
func (m *MockRepositoriesService) ListContributors(ctx context.Context, owner, repository string, opts *github.ListContributorsOptions) ([]*github.Contributor, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContributors", ctx, owner, repository, opts)
	ret0, _ := ret[0].([]*github.Contributor)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListContributors indicates an expected call of ListContributors.
func (mr *MockRepositoriesServiceMockRecorder) ListContributors(ctx, owner, repository, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContributors", reflect.TypeOf((*MockRepositoriesService)(nil).ListContributors), ctx, owner, repository, opts)
}

// ListContributorsStats mocks base method.
func (m *MockRepositoriesService) ListContributorsStats(ctx context.Context, owner, repo string) ([]*github.ContributorStats, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContributorsStats", ctx, owner, repo)
	ret0, _ := ret[0].([]*github.ContributorStats)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListContributorsStats indicates an expected call of ListContributorsStats.
func (mr *MockRepositoriesServiceMockRecorder) ListContributorsStats(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContributorsStats", reflect.TypeOf((*MockRepositoriesService)(nil).ListContributorsStats), ctx, owner, repo)
}

// ListDeploymentStatuses mocks base method.
func (m *MockRepositoriesService) ListDeploymentStatuses(ctx context.Context, owner, repo string, deployment int64, opts *github.ListOptions) ([]*github.DeploymentStatus, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploymentStatuses", ctx, owner, repo, deployment, opts)
	ret0, _ := ret[0].([]*github.DeploymentStatus)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDeploymentStatuses indicates an expected call of ListDeploymentStatuses.
func (mr *MockRepositoriesServiceMockRecorder) ListDeploymentStatuses(ctx, owner, repo, deployment, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentStatuses", reflect.TypeOf((*MockRepositoriesService)(nil).ListDeploymentStatuses), ctx, owner, repo, deployment, opts)
}

// ListDeployments mocks base method.
func (m *MockRepositoriesService) ListDeployments(ctx context.Context, owner, repo string, opts *github.DeploymentsListOptions) ([]*github.Deployment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeployments", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.Deployment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDeployments indicates an expected call of ListDeployments.
func (mr *MockRepositoriesServiceMockRecorder) ListDeployments(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeployments", reflect.TypeOf((*MockRepositoriesService)(nil).ListDeployments), ctx, owner, repo, opts)
}

// ListEnvironments mocks base method.
func (m *MockRepositoriesService) ListEnvironments(ctx context.Context, owner, repo string, opts *github.EnvironmentListOptions) (*github.EnvResponse, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironments", ctx, owner, repo, opts)
	ret0, _ := ret[0].(*github.EnvResponse)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEnvironments indicates an expected call of ListEnvironments.
func (mr *MockRepositoriesServiceMockRecorder) ListEnvironments(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockRepositoriesService)(nil).ListEnvironments), ctx, owner, repo, opts)
}

// ListForks mocks base method.
func (m *MockRepositoriesService) ListForks(ctx context.Context, owner, repo string, opts *github.RepositoryListForksOptions) ([]*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForks", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListForks indicates an expected call of ListForks.
func (mr *MockRepositoriesServiceMockRecorder) ListForks(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForks", reflect.TypeOf((*MockRepositoriesService)(nil).ListForks), ctx, owner, repo, opts)
}

// ListHookDeliveries mocks base method.
func (m *MockRepositoriesService) ListHookDeliveries(ctx context.Context, owner, repo string, id int64, opts *github.ListCursorOptions) ([]*github.HookDelivery, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHookDeliveries", ctx, owner, repo, id, opts)
	ret0, _ := ret[0].([]*github.HookDelivery)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListHookDeliveries indicates an expected call of ListHookDeliveries.
func (mr *MockRepositoriesServiceMockRecorder) ListHookDeliveries(ctx, owner, repo, id, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHookDeliveries", reflect.TypeOf((*MockRepositoriesService)(nil).ListHookDeliveries), ctx, owner, repo, id, opts)
}

// ListHooks mocks base method.
func (m *MockRepositoriesService) ListHooks(ctx context.Context, owner, repo string, opts *github.ListOptions) ([]*github.Hook, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHooks", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.Hook)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListHooks indicates an expected call of ListHooks.
func (mr *MockRepositoriesServiceMockRecorder) ListHooks(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHooks", reflect.TypeOf((*MockRepositoriesService)(nil).ListHooks), ctx, owner, repo, opts)
}

// ListInvitations mocks base method.
func (m *MockRepositoriesService) ListInvitations(ctx context.Context, owner, repo string, opts *github.ListOptions) ([]*github.RepositoryInvitation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvitations", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.RepositoryInvitation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListInvitations indicates an expected call of ListInvitations.
func (mr *MockRepositoriesServiceMockRecorder) ListInvitations(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitations", reflect.TypeOf((*MockRepositoriesService)(nil).ListInvitations), ctx, owner, repo, opts)
}

// ListKeys mocks base method.
func (m *MockRepositoriesService) ListKeys(ctx context.Context, owner, repo string, opts *github.ListOptions) ([]*github.Key, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeys", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.Key)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListKeys indicates an expected call of ListKeys.
func (mr *MockRepositoriesServiceMockRecorder) ListKeys(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeys", reflect.TypeOf((*MockRepositoriesService)(nil).ListKeys), ctx, owner, repo, opts)
}

// ListLanguages mocks base method.
func (m *MockRepositoriesService) ListLanguages(ctx context.Context, owner, repo string) (map[string]int, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLanguages", ctx, owner, repo)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListLanguages indicates an expected call of ListLanguages.
func (mr *MockRepositoriesServiceMockRecorder) ListLanguages(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLanguages", reflect.TypeOf((*MockRepositoriesService)(nil).ListLanguages), ctx, owner, repo)
}

// ListPagesBuilds mocks base method.
func (m *MockRepositoriesService) ListPagesBuilds(ctx context.Context, owner, repo string, opts *github.ListOptions) ([]*github.PagesBuild, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPagesBuilds", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.PagesBuild)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPagesBuilds indicates an expected call of ListPagesBuilds.
func (mr *MockRepositoriesServiceMockRecorder) ListPagesBuilds(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPagesBuilds", reflect.TypeOf((*MockRepositoriesService)(nil).ListPagesBuilds), ctx, owner, repo, opts)
}

// ListParticipation mocks base method.
func (m *MockRepositoriesService) ListParticipation(ctx context.Context, owner, repo string) (*github.RepositoryParticipation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListParticipation", ctx, owner, repo)
	ret0, _ := ret[0].(*github.RepositoryParticipation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListParticipation indicates an expected call of ListParticipation.
func (mr *MockRepositoriesServiceMockRecorder) ListParticipation(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParticipation", reflect.TypeOf((*MockRepositoriesService)(nil).ListParticipation), ctx, owner, repo)
}

// ListPreReceiveHooks mocks base method.
func (m *MockRepositoriesService) ListPreReceiveHooks(ctx context.Context, owner, repo string, opts *github.ListOptions) ([]*github.PreReceiveHook, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPreReceiveHooks", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.PreReceiveHook)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPreReceiveHooks indicates an expected call of ListPreReceiveHooks.
func (mr *MockRepositoriesServiceMockRecorder) ListPreReceiveHooks(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPreReceiveHooks", reflect.TypeOf((*MockRepositoriesService)(nil).ListPreReceiveHooks), ctx, owner, repo, opts)
}

// ListProjects mocks base method.
func (m *MockRepositoriesService) ListProjects(ctx context.Context, owner, repo string, opts *github.ProjectListOptions) ([]*github.Project, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.Project)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockRepositoriesServiceMockRecorder) ListProjects(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockRepositoriesService)(nil).ListProjects), ctx, owner, repo, opts)
}

// ListPunchCard mocks base method.
func (m *MockRepositoriesService) ListPunchCard(ctx context.Context, owner, repo string) ([]*github.PunchCard, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPunchCard", ctx, owner, repo)
	ret0, _ := ret[0].([]*github.PunchCard)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPunchCard indicates an expected call of ListPunchCard.
func (mr *MockRepositoriesServiceMockRecorder) ListPunchCard(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPunchCard", reflect.TypeOf((*MockRepositoriesService)(nil).ListPunchCard), ctx, owner, repo)
}

// ListReleaseAssets mocks base method.
func (m *MockRepositoriesService) ListReleaseAssets(ctx context.Context, owner, repo string, id int64, opts *github.ListOptions) ([]*github.ReleaseAsset, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReleaseAssets", ctx, owner, repo, id, opts)
	ret0, _ := ret[0].([]*github.ReleaseAsset)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListReleaseAssets indicates an expected call of ListReleaseAssets.
func (mr *MockRepositoriesServiceMockRecorder) ListReleaseAssets(ctx, owner, repo, id, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReleaseAssets", reflect.TypeOf((*MockRepositoriesService)(nil).ListReleaseAssets), ctx, owner, repo, id, opts)
}

// ListReleases mocks base method.
func (m *MockRepositoriesService) ListReleases(ctx context.Context, owner, repo string, opts *github.ListOptions) ([]*github.RepositoryRelease, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReleases", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.RepositoryRelease)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListReleases indicates an expected call of ListReleases.
func (mr *MockRepositoriesServiceMockRecorder) ListReleases(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReleases", reflect.TypeOf((*MockRepositoriesService)(nil).ListReleases), ctx, owner, repo, opts)
}

// ListRequiredStatusChecksContexts mocks base method.
func (m *MockRepositoriesService) ListRequiredStatusChecksContexts(ctx context.Context, owner, repo, branch string) ([]string, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRequiredStatusChecksContexts", ctx, owner, repo, branch)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRequiredStatusChecksContexts indicates an expected call of ListRequiredStatusChecksContexts.
func (mr *MockRepositoriesServiceMockRecorder) ListRequiredStatusChecksContexts(ctx, owner, repo, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRequiredStatusChecksContexts", reflect.TypeOf((*MockRepositoriesService)(nil).ListRequiredStatusChecksContexts), ctx, owner, repo, branch)
}

// ListStatuses mocks base method.
func (m *MockRepositoriesService) ListStatuses(ctx context.Context, owner, repo, ref string, opts *github.ListOptions) ([]*github.RepoStatus, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStatuses", ctx, owner, repo, ref, opts)
	ret0, _ := ret[0].([]*github.RepoStatus)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListStatuses indicates an expected call of ListStatuses.
func (mr *MockRepositoriesServiceMockRecorder) ListStatuses(ctx, owner, repo, ref, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStatuses", reflect.TypeOf((*MockRepositoriesService)(nil).ListStatuses), ctx, owner, repo, ref, opts)
}

// ListTagProtection mocks base method.
func (m *MockRepositoriesService) ListTagProtection(ctx context.Context, owner, repo string) ([]*github.TagProtection, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagProtection", ctx, owner, repo)
	ret0, _ := ret[0].([]*github.TagProtection)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTagProtection indicates an expected call of ListTagProtection.
func (mr *MockRepositoriesServiceMockRecorder) ListTagProtection(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagProtection", reflect.TypeOf((*MockRepositoriesService)(nil).ListTagProtection), ctx, owner, repo)
}

// ListTags mocks base method.
func (m *MockRepositoriesService) ListTags(ctx context.Context, owner, repo string, opts *github.ListOptions) ([]*github.RepositoryTag, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTags", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.RepositoryTag)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTags indicates an expected call of ListTags.
func (mr *MockRepositoriesServiceMockRecorder) ListTags(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockRepositoriesService)(nil).ListTags), ctx, owner, repo, opts)
}

// ListTeams mocks base method.
func (m *MockRepositoriesService) ListTeams(ctx context.Context, owner, repo string, opts *github.ListOptions) ([]*github.Team, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeams", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.Team)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTeams indicates an expected call of ListTeams.
func (mr *MockRepositoriesServiceMockRecorder) ListTeams(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeams", reflect.TypeOf((*MockRepositoriesService)(nil).ListTeams), ctx, owner, repo, opts)
}

// ListTrafficClones mocks base method.
func (m *MockRepositoriesService) ListTrafficClones(ctx context.Context, owner, repo string, opts *github.TrafficBreakdownOptions) (*github.TrafficClones, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrafficClones", ctx, owner, repo, opts)
	ret0, _ := ret[0].(*github.TrafficClones)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTrafficClones indicates an expected call of ListTrafficClones.
func (mr *MockRepositoriesServiceMockRecorder) ListTrafficClones(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrafficClones", reflect.TypeOf((*MockRepositoriesService)(nil).ListTrafficClones), ctx, owner, repo, opts)
}

// ListTrafficPaths mocks base method.
func (m *MockRepositoriesService) ListTrafficPaths(ctx context.Context, owner, repo string) ([]*github.TrafficPath, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrafficPaths", ctx, owner, repo)
	ret0, _ := ret[0].([]*github.TrafficPath)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTrafficPaths indicates an expected call of ListTrafficPaths.
func (mr *MockRepositoriesServiceMockRecorder) ListTrafficPaths(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrafficPaths", reflect.TypeOf((*MockRepositoriesService)(nil).ListTrafficPaths), ctx, owner, repo)
}

// ListTrafficReferrers mocks base method.
func (m *MockRepositoriesService) ListTrafficReferrers(ctx context.Context, owner, repo string) ([]*github.TrafficReferrer, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrafficReferrers", ctx, owner, repo)
	ret0, _ := ret[0].([]*github.TrafficReferrer)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTrafficReferrers indicates an expected call of ListTrafficReferrers.
func (mr *MockRepositoriesServiceMockRecorder) ListTrafficReferrers(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrafficReferrers", reflect.TypeOf((*MockRepositoriesService)(nil).ListTrafficReferrers), ctx, owner, repo)
}

// ListTrafficViews mocks base method.
func (m *MockRepositoriesService) ListTrafficViews(ctx context.Context, owner, repo string, opts *github.TrafficBreakdownOptions) (*github.TrafficViews, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrafficViews", ctx, owner, repo, opts)
	ret0, _ := ret[0].(*github.TrafficViews)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTrafficViews indicates an expected call of ListTrafficViews.
func (mr *MockRepositoriesServiceMockRecorder) ListTrafficViews(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrafficViews", reflect.TypeOf((*MockRepositoriesService)(nil).ListTrafficViews), ctx, owner, repo, opts)
}

// Merge mocks base method.
func (m *MockRepositoriesService) Merge(ctx context.Context, owner, repo string, request *github.RepositoryMergeRequest) (*github.RepositoryCommit, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Merge", ctx, owner, repo, request)
	ret0, _ := ret[0].(*github.RepositoryCommit)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Merge indicates an expected call of Merge.
func (mr *MockRepositoriesServiceMockRecorder) Merge(ctx, owner, repo, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockRepositoriesService)(nil).Merge), ctx, owner, repo, request)
}

// MergeUpstream mocks base method.
func (m *MockRepositoriesService) MergeUpstream(ctx context.Context, owner, repo string, request *github.RepoMergeUpstreamRequest) (*github.RepoMergeUpstreamResult, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeUpstream", ctx, owner, repo, request)
	ret0, _ := ret[0].(*github.RepoMergeUpstreamResult)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MergeUpstream indicates an expected call of MergeUpstream.
func (mr *MockRepositoriesServiceMockRecorder) MergeUpstream(ctx, owner, repo, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeUpstream", reflect.TypeOf((*MockRepositoriesService)(nil).MergeUpstream), ctx, owner, repo, request)
}

// OptionalSignaturesOnProtectedBranch mocks base method.
func (m *MockRepositoriesService) OptionalSignaturesOnProtectedBranch(ctx context.Context, owner, repo, branch string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OptionalSignaturesOnProtectedBranch", ctx, owner, repo, branch)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OptionalSignaturesOnProtectedBranch indicates an expected call of OptionalSignaturesOnProtectedBranch.
func (mr *MockRepositoriesServiceMockRecorder) OptionalSignaturesOnProtectedBranch(ctx, owner, repo, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptionalSignaturesOnProtectedBranch", reflect.TypeOf((*MockRepositoriesService)(nil).OptionalSignaturesOnProtectedBranch), ctx, owner, repo, branch)
}

// PingHook mocks base method.
func (m *MockRepositoriesService) PingHook(ctx context.Context, owner, repo string, id int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingHook", ctx, owner, repo, id)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingHook indicates an expected call of PingHook.
func (mr *MockRepositoriesServiceMockRecorder) PingHook(ctx, owner, repo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingHook", reflect.TypeOf((*MockRepositoriesService)(nil).PingHook), ctx, owner, repo, id)
}

// RedeliverHookDelivery mocks base method.
func (m *MockRepositoriesService) RedeliverHookDelivery(ctx context.Context, owner, repo string, hookID, deliveryID int64) (*github.HookDelivery, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedeliverHookDelivery", ctx, owner, repo, hookID, deliveryID)
	ret0, _ := ret[0].(*github.HookDelivery)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RedeliverHookDelivery indicates an expected call of RedeliverHookDelivery.
func (mr *MockRepositoriesServiceMockRecorder) RedeliverHookDelivery(ctx, owner, repo, hookID, deliveryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedeliverHookDelivery", reflect.TypeOf((*MockRepositoriesService)(nil).RedeliverHookDelivery), ctx, owner, repo, hookID, deliveryID)
}

// RemoveAdminEnforcement mocks base method.
func (m *MockRepositoriesService) RemoveAdminEnforcement(ctx context.Context, owner, repo, branch string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAdminEnforcement", ctx, owner, repo, branch)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAdminEnforcement indicates an expected call of RemoveAdminEnforcement.
func (mr *MockRepositoriesServiceMockRecorder) RemoveAdminEnforcement(ctx, owner, repo, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAdminEnforcement", reflect.TypeOf((*MockRepositoriesService)(nil).RemoveAdminEnforcement), ctx, owner, repo, branch)
}

// RemoveAppRestrictions mocks base method.
func (m *MockRepositoriesService) RemoveAppRestrictions(ctx context.Context, owner, repo, branch string, slug []string) ([]*github.App, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAppRestrictions", ctx, owner, repo, branch, slug)
	ret0, _ := ret[0].([]*github.App)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RemoveAppRestrictions indicates an expected call of RemoveAppRestrictions.
func (mr *MockRepositoriesServiceMockRecorder) RemoveAppRestrictions(ctx, owner, repo, branch, slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAppRestrictions", reflect.TypeOf((*MockRepositoriesService)(nil).RemoveAppRestrictions), ctx, owner, repo, branch, slug)
}

// RemoveBranchProtection mocks base method.
func (m *MockRepositoriesService) RemoveBranchProtection(ctx context.Context, owner, repo, branch string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBranchProtection", ctx, owner, repo, branch)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBranchProtection indicates an expected call of RemoveBranchProtection.
func (mr *MockRepositoriesServiceMockRecorder) RemoveBranchProtection(ctx, owner, repo, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBranchProtection", reflect.TypeOf((*MockRepositoriesService)(nil).RemoveBranchProtection), ctx, owner, repo, branch)
}

// RemoveCollaborator mocks base method.
func (m *MockRepositoriesService) RemoveCollaborator(ctx context.Context, owner, repo, user string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCollaborator", ctx, owner, repo, user)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveCollaborator indicates an expected call of RemoveCollaborator.
func (mr *MockRepositoriesServiceMockRecorder) RemoveCollaborator(ctx, owner, repo, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCollaborator", reflect.TypeOf((*MockRepositoriesService)(nil).RemoveCollaborator), ctx, owner, repo, user)
}

// RemovePullRequestReviewEnforcement mocks base method.
func (m *MockRepositoriesService) RemovePullRequestReviewEnforcement(ctx context.Context, owner, repo, branch string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePullRequestReviewEnforcement", ctx, owner, repo, branch)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePullRequestReviewEnforcement indicates an expected call of RemovePullRequestReviewEnforcement.
func (mr *MockRepositoriesServiceMockRecorder) RemovePullRequestReviewEnforcement(ctx, owner, repo, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePullRequestReviewEnforcement", reflect.TypeOf((*MockRepositoriesService)(nil).RemovePullRequestReviewEnforcement), ctx, owner, repo, branch)
}

// RemoveRequiredStatusChecks mocks base method.
func (m *MockRepositoriesService) RemoveRequiredStatusChecks(ctx context.Context, owner, repo, branch string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRequiredStatusChecks", ctx, owner, repo, branch)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRequiredStatusChecks indicates an expected call of RemoveRequiredStatusChecks.
func (mr *MockRepositoriesServiceMockRecorder) RemoveRequiredStatusChecks(ctx, owner, repo, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRequiredStatusChecks", reflect.TypeOf((*MockRepositoriesService)(nil).RemoveRequiredStatusChecks), ctx, owner, repo, branch)
}

// RenameBranch mocks base method.
func (m *MockRepositoriesService) RenameBranch(ctx context.Context, owner, repo, branch, newName string) (*github.Branch, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameBranch", ctx, owner, repo, branch, newName)
	ret0, _ := ret[0].(*github.Branch)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RenameBranch indicates an expected call of RenameBranch.
func (mr *MockRepositoriesServiceMockRecorder) RenameBranch(ctx, owner, repo, branch, newName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameBranch", reflect.TypeOf((*MockRepositoriesService)(nil).RenameBranch), ctx, owner, repo, branch, newName)
}

// ReplaceAllTopics mocks base method.
func (m *MockRepositoriesService) ReplaceAllTopics(ctx context.Context, owner, repo string, topics []string) ([]string, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceAllTopics", ctx, owner, repo, topics)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReplaceAllTopics indicates an expected call of ReplaceAllTopics.
func (mr *MockRepositoriesServiceMockRecorder) ReplaceAllTopics(ctx, owner, repo, topics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceAllTopics", reflect.TypeOf((*MockRepositoriesService)(nil).ReplaceAllTopics), ctx, owner, repo, topics)
}

// ReplaceAppRestrictions mocks base method.
func (m *MockRepositoriesService) ReplaceAppRestrictions(ctx context.Context, owner, repo, branch string, slug []string) ([]*github.App, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceAppRestrictions", ctx, owner, repo, branch, slug)
	ret0, _ := ret[0].([]*github.App)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReplaceAppRestrictions indicates an expected call of ReplaceAppRestrictions.
func (mr *MockRepositoriesServiceMockRecorder) ReplaceAppRestrictions(ctx, owner, repo, branch, slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceAppRestrictions", reflect.TypeOf((*MockRepositoriesService)(nil).ReplaceAppRestrictions), ctx, owner, repo, branch, slug)
}

// RequestPageBuild mocks base method.
func (m *MockRepositoriesService) RequestPageBuild(ctx context.Context, owner, repo string) (*github.PagesBuild, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestPageBuild", ctx, owner, repo)
	ret0, _ := ret[0].(*github.PagesBuild)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RequestPageBuild indicates an expected call of RequestPageBuild.
func (mr *MockRepositoriesServiceMockRecorder) RequestPageBuild(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestPageBuild", reflect.TypeOf((*MockRepositoriesService)(nil).RequestPageBuild), ctx, owner, repo)
}

// RequireSignaturesOnProtectedBranch mocks base method.
func (m *MockRepositoriesService) RequireSignaturesOnProtectedBranch(ctx context.Context, owner, repo, branch string) (*github.SignaturesProtectedBranch, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequireSignaturesOnProtectedBranch", ctx, owner, repo, branch)
	ret0, _ := ret[0].(*github.SignaturesProtectedBranch)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RequireSignaturesOnProtectedBranch indicates an expected call of RequireSignaturesOnProtectedBranch.
func (mr *MockRepositoriesServiceMockRecorder) RequireSignaturesOnProtectedBranch(ctx, owner, repo, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequireSignaturesOnProtectedBranch", reflect.TypeOf((*MockRepositoriesService)(nil).RequireSignaturesOnProtectedBranch), ctx, owner, repo, branch)
}

// Subscribe mocks base method.
func (m *MockRepositoriesService) Subscribe(ctx context.Context, owner, repo, event, callback string, secret []uint8) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, owner, repo, event, callback, secret)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockRepositoriesServiceMockRecorder) Subscribe(ctx, owner, repo, event, callback, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockRepositoriesService)(nil).Subscribe), ctx, owner, repo, event, callback, secret)
}

// TestHook mocks base method.
func (m *MockRepositoriesService) TestHook(ctx context.Context, owner, repo string, id int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestHook", ctx, owner, repo, id)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestHook indicates an expected call of TestHook.
func (mr *MockRepositoriesServiceMockRecorder) TestHook(ctx, owner, repo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestHook", reflect.TypeOf((*MockRepositoriesService)(nil).TestHook), ctx, owner, repo, id)
}

// Transfer mocks base method.
func (m *MockRepositoriesService) Transfer(ctx context.Context, owner, repo string, transfer github.TransferRequest) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, owner, repo, transfer)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Transfer indicates an expected call of Transfer.
func (mr *MockRepositoriesServiceMockRecorder) Transfer(ctx, owner, repo, transfer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockRepositoriesService)(nil).Transfer), ctx, owner, repo, transfer)
}

// Unsubscribe mocks base method.
func (m *MockRepositoriesService) Unsubscribe(ctx context.Context, owner, repo, event, callback string, secret []uint8) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", ctx, owner, repo, event, callback, secret)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockRepositoriesServiceMockRecorder) Unsubscribe(ctx, owner, repo, event, callback, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockRepositoriesService)(nil).Unsubscribe), ctx, owner, repo, event, callback, secret)
}

// UpdateBranchProtection mocks base method.
func (m *MockRepositoriesService) UpdateBranchProtection(ctx context.Context, owner, repo, branch string, preq *github.ProtectionRequest) (*github.Protection, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBranchProtection", ctx, owner, repo, branch, preq)
	ret0, _ := ret[0].(*github.Protection)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateBranchProtection indicates an expected call of UpdateBranchProtection.
func (mr *MockRepositoriesServiceMockRecorder) UpdateBranchProtection(ctx, owner, repo, branch, preq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBranchProtection", reflect.TypeOf((*MockRepositoriesService)(nil).UpdateBranchProtection), ctx, owner, repo, branch, preq)
}

// UpdateComment mocks base method.
func (m *MockRepositoriesService) UpdateComment(ctx context.Context, owner, repo string, id int64, comment *github.RepositoryComment) (*github.RepositoryComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", ctx, owner, repo, id, comment)
	ret0, _ := ret[0].(*github.RepositoryComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockRepositoriesServiceMockRecorder) UpdateComment(ctx, owner, repo, id, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockRepositoriesService)(nil).UpdateComment), ctx, owner, repo, id, comment)
}

// UpdateFile mocks base method.
func (m *MockRepositoriesService) UpdateFile(ctx context.Context, owner, repo, path string, opts *github.RepositoryContentFileOptions) (*github.RepositoryContentResponse, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFile", ctx, owner, repo, path, opts)
	ret0, _ := ret[0].(*github.RepositoryContentResponse)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateFile indicates an expected call of UpdateFile.
func (mr *MockRepositoriesServiceMockRecorder) UpdateFile(ctx, owner, repo, path, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFile", reflect.TypeOf((*MockRepositoriesService)(nil).UpdateFile), ctx, owner, repo, path, opts)
}

// UpdateInvitation mocks base method.
func (m *MockRepositoriesService) UpdateInvitation(ctx context.Context, owner, repo string, invitationID int64, permissions string) (*github.RepositoryInvitation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvitation", ctx, owner, repo, invitationID, permissions)
	ret0, _ := ret[0].(*github.RepositoryInvitation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateInvitation indicates an expected call of UpdateInvitation.
func (mr *MockRepositoriesServiceMockRecorder) UpdateInvitation(ctx, owner, repo, invitationID, permissions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvitation", reflect.TypeOf((*MockRepositoriesService)(nil).UpdateInvitation), ctx, owner, repo, invitationID, permissions)
}

// UpdatePages mocks base method.
func (m *MockRepositoriesService) UpdatePages(ctx context.Context, owner, repo string, opts *github.PagesUpdate) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePages", ctx, owner, repo, opts)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePages indicates an expected call of UpdatePages.
func (mr *MockRepositoriesServiceMockRecorder) UpdatePages(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePages", reflect.TypeOf((*MockRepositoriesService)(nil).UpdatePages), ctx, owner, repo, opts)
}

// UpdatePreReceiveHook mocks base method.
func (m *MockRepositoriesService) UpdatePreReceiveHook(ctx context.Context, owner, repo string, id int64, hook *github.PreReceiveHook) (*github.PreReceiveHook, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePreReceiveHook", ctx, owner, repo, id, hook)
	ret0, _ := ret[0].(*github.PreReceiveHook)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdatePreReceiveHook indicates an expected call of UpdatePreReceiveHook.
func (mr *MockRepositoriesServiceMockRecorder) UpdatePreReceiveHook(ctx, owner, repo, id, hook interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePreReceiveHook", reflect.TypeOf((*MockRepositoriesService)(nil).UpdatePreReceiveHook), ctx, owner, repo, id, hook)
}

// UpdatePullRequestReviewEnforcement mocks base method.
func (m *MockRepositoriesService) UpdatePullRequestReviewEnforcement(ctx context.Context, owner, repo, branch string, patch *github.PullRequestReviewsEnforcementUpdate) (*github.PullRequestReviewsEnforcement, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePullRequestReviewEnforcement", ctx, owner, repo, branch, patch)
	ret0, _ := ret[0].(*github.PullRequestReviewsEnforcement)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdatePullRequestReviewEnforcement indicates an expected call of UpdatePullRequestReviewEnforcement.
func (mr *MockRepositoriesServiceMockRecorder) UpdatePullRequestReviewEnforcement(ctx, owner, repo, branch, patch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePullRequestReviewEnforcement", reflect.TypeOf((*MockRepositoriesService)(nil).UpdatePullRequestReviewEnforcement), ctx, owner, repo, branch, patch)
}

// UpdateRequiredStatusChecks mocks base method.
func (m *MockRepositoriesService) UpdateRequiredStatusChecks(ctx context.Context, owner, repo, branch string, sreq *github.RequiredStatusChecksRequest) (*github.RequiredStatusChecks, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRequiredStatusChecks", ctx, owner, repo, branch, sreq)
	ret0, _ := ret[0].(*github.RequiredStatusChecks)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateRequiredStatusChecks indicates an expected call of UpdateRequiredStatusChecks.
func (mr *MockRepositoriesServiceMockRecorder) UpdateRequiredStatusChecks(ctx, owner, repo, branch, sreq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRequiredStatusChecks", reflect.TypeOf((*MockRepositoriesService)(nil).UpdateRequiredStatusChecks), ctx, owner, repo, branch, sreq)
}

// UploadReleaseAsset mocks base method.
func (m *MockRepositoriesService) UploadReleaseAsset(ctx context.Context, owner, repo string, id int64, opts *github.UploadOptions, file *os.File) (*github.ReleaseAsset, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadReleaseAsset", ctx, owner, repo, id, opts, file)
	ret0, _ := ret[0].(*github.ReleaseAsset)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UploadReleaseAsset indicates an expected call of UploadReleaseAsset.
func (mr *MockRepositoriesServiceMockRecorder) UploadReleaseAsset(ctx, owner, repo, id, opts, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadReleaseAsset", reflect.TypeOf((*MockRepositoriesService)(nil).UploadReleaseAsset), ctx, owner, repo, id, opts, file)
}

// MockSCIMService is a mock of SCIMService interface.
type MockSCIMService struct {
	ctrl     *gomock.Controller
	recorder *MockSCIMServiceMockRecorder
}

// MockSCIMServiceMockRecorder is the mock recorder for MockSCIMService.
type MockSCIMServiceMockRecorder struct {
	mock *MockSCIMService
}

// NewMockSCIMService creates a new mock instance.
func NewMockSCIMService(ctrl *gomock.Controller) *MockSCIMService {
	mock := &MockSCIMService{ctrl: ctrl}
	mock.recorder = &MockSCIMServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSCIMService) EXPECT() *MockSCIMServiceMockRecorder {
	return m.recorder
}

// DeleteSCIMUserFromOrg mocks base method.
func (m *MockSCIMService) DeleteSCIMUserFromOrg(ctx context.Context, org, scimUserID string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSCIMUserFromOrg", ctx, org, scimUserID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSCIMUserFromOrg indicates an expected call of DeleteSCIMUserFromOrg.
func (mr *MockSCIMServiceMockRecorder) DeleteSCIMUserFromOrg(ctx, org, scimUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSCIMUserFromOrg", reflect.TypeOf((*MockSCIMService)(nil).DeleteSCIMUserFromOrg), ctx, org, scimUserID)
}

// GetSCIMProvisioningInfoForUser mocks base method.
func (m *MockSCIMService) GetSCIMProvisioningInfoForUser(ctx context.Context, org, scimUserID string) (*github.SCIMUserAttributes, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSCIMProvisioningInfoForUser", ctx, org, scimUserID)
	ret0, _ := ret[0].(*github.SCIMUserAttributes)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSCIMProvisioningInfoForUser indicates an expected call of GetSCIMProvisioningInfoForUser.
func (mr *MockSCIMServiceMockRecorder) GetSCIMProvisioningInfoForUser(ctx, org, scimUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSCIMProvisioningInfoForUser", reflect.TypeOf((*MockSCIMService)(nil).GetSCIMProvisioningInfoForUser), ctx, org, scimUserID)
}

// ListSCIMProvisionedIdentities mocks base method.
func (m *MockSCIMService) ListSCIMProvisionedIdentities(ctx context.Context, org string, opts *github.ListSCIMProvisionedIdentitiesOptions) (*github.SCIMProvisionedIdentities, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSCIMProvisionedIdentities", ctx, org, opts)
	ret0, _ := ret[0].(*github.SCIMProvisionedIdentities)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSCIMProvisionedIdentities indicates an expected call of ListSCIMProvisionedIdentities.
func (mr *MockSCIMServiceMockRecorder) ListSCIMProvisionedIdentities(ctx, org, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSCIMProvisionedIdentities", reflect.TypeOf((*MockSCIMService)(nil).ListSCIMProvisionedIdentities), ctx, org, opts)
}

// ProvisionAndInviteSCIMUser mocks base method.
func (m *MockSCIMService) ProvisionAndInviteSCIMUser(ctx context.Context, org string, opts *github.SCIMUserAttributes) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvisionAndInviteSCIMUser", ctx, org, opts)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProvisionAndInviteSCIMUser indicates an expected call of ProvisionAndInviteSCIMUser.
func (mr *MockSCIMServiceMockRecorder) ProvisionAndInviteSCIMUser(ctx, org, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvisionAndInviteSCIMUser", reflect.TypeOf((*MockSCIMService)(nil).ProvisionAndInviteSCIMUser), ctx, org, opts)
}

// UpdateAttributeForSCIMUser mocks base method.
func (m *MockSCIMService) UpdateAttributeForSCIMUser(ctx context.Context, org, scimUserID string, opts *github.UpdateAttributeForSCIMUserOptions) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAttributeForSCIMUser", ctx, org, scimUserID, opts)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAttributeForSCIMUser indicates an expected call of UpdateAttributeForSCIMUser.
func (mr *MockSCIMServiceMockRecorder) UpdateAttributeForSCIMUser(ctx, org, scimUserID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttributeForSCIMUser", reflect.TypeOf((*MockSCIMService)(nil).UpdateAttributeForSCIMUser), ctx, org, scimUserID, opts)
}

// UpdateProvisionedOrgMembership mocks base method.
func (m *MockSCIMService) UpdateProvisionedOrgMembership(ctx context.Context, org, scimUserID string, opts *github.SCIMUserAttributes) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProvisionedOrgMembership", ctx, org, scimUserID, opts)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProvisionedOrgMembership indicates an expected call of UpdateProvisionedOrgMembership.
func (mr *MockSCIMServiceMockRecorder) UpdateProvisionedOrgMembership(ctx, org, scimUserID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProvisionedOrgMembership", reflect.TypeOf((*MockSCIMService)(nil).UpdateProvisionedOrgMembership), ctx, org, scimUserID, opts)
}

// MockSearchService is a mock of SearchService interface.
type MockSearchService struct {
	ctrl     *gomock.Controller
	recorder *MockSearchServiceMockRecorder
}

// MockSearchServiceMockRecorder is the mock recorder for MockSearchService.
type MockSearchServiceMockRecorder struct {
	mock *MockSearchService
}

// NewMockSearchService creates a new mock instance.
func NewMockSearchService(ctrl *gomock.Controller) *MockSearchService {
	mock := &MockSearchService{ctrl: ctrl}
	mock.recorder = &MockSearchServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchService) EXPECT() *MockSearchServiceMockRecorder {
	return m.recorder
}

// Code mocks base method.
func (m *MockSearchService) Code(ctx context.Context, query string, opts *github.SearchOptions) (*github.CodeSearchResult, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Code", ctx, query, opts)
	ret0, _ := ret[0].(*github.CodeSearchResult)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Code indicates an expected call of Code.
func (mr *MockSearchServiceMockRecorder) Code(ctx, query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Code", reflect.TypeOf((*MockSearchService)(nil).Code), ctx, query, opts)
}

// Commits mocks base method.
func (m *MockSearchService) Commits(ctx context.Context, query string, opts *github.SearchOptions) (*github.CommitsSearchResult, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commits", ctx, query, opts)
	ret0, _ := ret[0].(*github.CommitsSearchResult)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Commits indicates an expected call of Commits.
func (mr *MockSearchServiceMockRecorder) Commits(ctx, query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commits", reflect.TypeOf((*MockSearchService)(nil).Commits), ctx, query, opts)
}

// Issues mocks base method.
func (m *MockSearchService) Issues(ctx context.Context, query string, opts *github.SearchOptions) (*github.IssuesSearchResult, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Issues", ctx, query, opts)
	ret0, _ := ret[0].(*github.IssuesSearchResult)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Issues indicates an expected call of Issues.
func (mr *MockSearchServiceMockRecorder) Issues(ctx, query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Issues", reflect.TypeOf((*MockSearchService)(nil).Issues), ctx, query, opts)
}

// Labels mocks base method.
func (m *MockSearchService) Labels(ctx context.Context, repoID int64, query string, opts *github.SearchOptions) (*github.LabelsSearchResult, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels", ctx, repoID, query, opts)
	ret0, _ := ret[0].(*github.LabelsSearchResult)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Labels indicates an expected call of Labels.
func (mr *MockSearchServiceMockRecorder) Labels(ctx, repoID, query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockSearchService)(nil).Labels), ctx, repoID, query, opts)
}

// Repositories mocks base method.
func (m *MockSearchService) Repositories(ctx context.Context, query string, opts *github.SearchOptions) (*github.RepositoriesSearchResult, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Repositories", ctx, query, opts)
	ret0, _ := ret[0].(*github.RepositoriesSearchResult)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Repositories indicates an expected call of Repositories.
func (mr *MockSearchServiceMockRecorder) Repositories(ctx, query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Repositories", reflect.TypeOf((*MockSearchService)(nil).Repositories), ctx, query, opts)
}

// Topics mocks base method.
func (m *MockSearchService) Topics(ctx context.Context, query string, opts *github.SearchOptions) (*github.TopicsSearchResult, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topics", ctx, query, opts)
	ret0, _ := ret[0].(*github.TopicsSearchResult)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Topics indicates an expected call of Topics.
func (mr *MockSearchServiceMockRecorder) Topics(ctx, query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topics", reflect.TypeOf((*MockSearchService)(nil).Topics), ctx, query, opts)
}

// Users mocks base method.
func (m *MockSearchService) Users(ctx context.Context, query string, opts *github.SearchOptions) (*github.UsersSearchResult, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users", ctx, query, opts)
	ret0, _ := ret[0].(*github.UsersSearchResult)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Users indicates an expected call of Users.
func (mr *MockSearchServiceMockRecorder) Users(ctx, query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockSearchService)(nil).Users), ctx, query, opts)
}

// MockSecretScanningService is a mock of SecretScanningService interface.
type MockSecretScanningService struct {
	ctrl     *gomock.Controller
	recorder *MockSecretScanningServiceMockRecorder
}

// MockSecretScanningServiceMockRecorder is the mock recorder for MockSecretScanningService.
type MockSecretScanningServiceMockRecorder struct {
	mock *MockSecretScanningService
}

// NewMockSecretScanningService creates a new mock instance.
func NewMockSecretScanningService(ctrl *gomock.Controller) *MockSecretScanningService {
	mock := &MockSecretScanningService{ctrl: ctrl}
	mock.recorder = &MockSecretScanningServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretScanningService) EXPECT() *MockSecretScanningServiceMockRecorder {
	return m.recorder
}

// GetAlert mocks base method.
func (m *MockSecretScanningService) GetAlert(ctx context.Context, owner, repo string, number int64) (*github.SecretScanningAlert, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlert", ctx, owner, repo, number)
	ret0, _ := ret[0].(*github.SecretScanningAlert)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAlert indicates an expected call of GetAlert.
func (mr *MockSecretScanningServiceMockRecorder) GetAlert(ctx, owner, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlert", reflect.TypeOf((*MockSecretScanningService)(nil).GetAlert), ctx, owner, repo, number)
}

// ListAlertsForEnterprise mocks base method.
func (m *MockSecretScanningService) ListAlertsForEnterprise(ctx context.Context, enterprise string, opts *github.SecretScanningAlertListOptions) ([]*github.SecretScanningAlert, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAlertsForEnterprise", ctx, enterprise, opts)
	ret0, _ := ret[0].([]*github.SecretScanningAlert)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAlertsForEnterprise indicates an expected call of ListAlertsForEnterprise.
func (mr *MockSecretScanningServiceMockRecorder) ListAlertsForEnterprise(ctx, enterprise, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlertsForEnterprise", reflect.TypeOf((*MockSecretScanningService)(nil).ListAlertsForEnterprise), ctx, enterprise, opts)
}

// ListAlertsForOrg mocks base method.
func (m *MockSecretScanningService) ListAlertsForOrg(ctx context.Context, org string, opts *github.SecretScanningAlertListOptions) ([]*github.SecretScanningAlert, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAlertsForOrg", ctx, org, opts)
	ret0, _ := ret[0].([]*github.SecretScanningAlert)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAlertsForOrg indicates an expected call of ListAlertsForOrg.
func (mr *MockSecretScanningServiceMockRecorder) ListAlertsForOrg(ctx, org, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlertsForOrg", reflect.TypeOf((*MockSecretScanningService)(nil).ListAlertsForOrg), ctx, org, opts)
}

// ListAlertsForRepo mocks base method.
func (m *MockSecretScanningService) ListAlertsForRepo(ctx context.Context, owner, repo string, opts *github.SecretScanningAlertListOptions) ([]*github.SecretScanningAlert, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAlertsForRepo", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.SecretScanningAlert)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAlertsForRepo indicates an expected call of ListAlertsForRepo.
func (mr *MockSecretScanningServiceMockRecorder) ListAlertsForRepo(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlertsForRepo", reflect.TypeOf((*MockSecretScanningService)(nil).ListAlertsForRepo), ctx, owner, repo, opts)
}

// ListLocationsForAlert mocks base method.
func (m *MockSecretScanningService) ListLocationsForAlert(ctx context.Context, owner, repo string, number int64, opts *github.ListOptions) ([]*github.SecretScanningAlertLocation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLocationsForAlert", ctx, owner, repo, number, opts)
	ret0, _ := ret[0].([]*github.SecretScanningAlertLocation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListLocationsForAlert indicates an expected call of ListLocationsForAlert.
func (mr *MockSecretScanningServiceMockRecorder) ListLocationsForAlert(ctx, owner, repo, number, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLocationsForAlert", reflect.TypeOf((*MockSecretScanningService)(nil).ListLocationsForAlert), ctx, owner, repo, number, opts)
}

// UpdateAlert mocks base method.
func (m *MockSecretScanningService) UpdateAlert(ctx context.Context, owner, repo string, number int64, opts *github.SecretScanningAlertUpdateOptions) (*github.SecretScanningAlert, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAlert", ctx, owner, repo, number, opts)
	ret0, _ := ret[0].(*github.SecretScanningAlert)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateAlert indicates an expected call of UpdateAlert.
func (mr *MockSecretScanningServiceMockRecorder) UpdateAlert(ctx, owner, repo, number, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlert", reflect.TypeOf((*MockSecretScanningService)(nil).UpdateAlert), ctx, owner, repo, number, opts)
}

// MockTeamsService is a mock of TeamsService interface.
type MockTeamsService struct {
	ctrl     *gomock.Controller
	recorder *MockTeamsServiceMockRecorder
}

// MockTeamsServiceMockRecorder is the mock recorder for MockTeamsService.
type MockTeamsServiceMockRecorder struct {
	mock *MockTeamsService
}

// NewMockTeamsService creates a new mock instance.
func NewMockTeamsService(ctrl *gomock.Controller) *MockTeamsService {
	mock := &MockTeamsService{ctrl: ctrl}
	mock.recorder = &MockTeamsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamsService) EXPECT() *MockTeamsServiceMockRecorder {
	return m.recorder
}

// AddTeamMembershipByID mocks base method.
func (m *MockTeamsService) AddTeamMembershipByID(ctx context.Context, orgID, teamID int64, user string, opts *github.TeamAddTeamMembershipOptions) (*github.Membership, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTeamMembershipByID", ctx, orgID, teamID, user, opts)
	ret0, _ := ret[0].(*github.Membership)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddTeamMembershipByID indicates an expected call of AddTeamMembershipByID.
func (mr *MockTeamsServiceMockRecorder) AddTeamMembershipByID(ctx, orgID, teamID, user, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTeamMembershipByID", reflect.TypeOf((*MockTeamsService)(nil).AddTeamMembershipByID), ctx, orgID, teamID, user, opts)
}

// AddTeamMembershipBySlug mocks base method.
func (m *MockTeamsService) AddTeamMembershipBySlug(ctx context.Context, org, slug, user string, opts *github.TeamAddTeamMembershipOptions) (*github.Membership, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTeamMembershipBySlug", ctx, org, slug, user, opts)
	ret0, _ := ret[0].(*github.Membership)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddTeamMembershipBySlug indicates an expected call of AddTeamMembershipBySlug.
func (mr *MockTeamsServiceMockRecorder) AddTeamMembershipBySlug(ctx, org, slug, user, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTeamMembershipBySlug", reflect.TypeOf((*MockTeamsService)(nil).AddTeamMembershipBySlug), ctx, org, slug, user, opts)
}

// AddTeamProjectByID mocks base method.
func (m *MockTeamsService) AddTeamProjectByID(ctx context.Context, orgID, teamID, projectID int64, opts *github.TeamProjectOptions) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTeamProjectByID", ctx, orgID, teamID, projectID, opts)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTeamProjectByID indicates an expected call of AddTeamProjectByID.
func (mr *MockTeamsServiceMockRecorder) AddTeamProjectByID(ctx, orgID, teamID, projectID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTeamProjectByID", reflect.TypeOf((*MockTeamsService)(nil).AddTeamProjectByID), ctx, orgID, teamID, projectID, opts)
}

// AddTeamProjectBySlug mocks base method.
func (m *MockTeamsService) AddTeamProjectBySlug(ctx context.Context, org, slug string, projectID int64, opts *github.TeamProjectOptions) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTeamProjectBySlug", ctx, org, slug, projectID, opts)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTeamProjectBySlug indicates an expected call of AddTeamProjectBySlug.
func (mr *MockTeamsServiceMockRecorder) AddTeamProjectBySlug(ctx, org, slug, projectID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTeamProjectBySlug", reflect.TypeOf((*MockTeamsService)(nil).AddTeamProjectBySlug), ctx, org, slug, projectID, opts)
}

// AddTeamRepoByID mocks base method.
func (m *MockTeamsService) AddTeamRepoByID(ctx context.Context, orgID, teamID int64, owner, repo string, opts *github.TeamAddTeamRepoOptions) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTeamRepoByID", ctx, orgID, teamID, owner, repo, opts)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTeamRepoByID indicates an expected call of AddTeamRepoByID.
func (mr *MockTeamsServiceMockRecorder) AddTeamRepoByID(ctx, orgID, teamID, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTeamRepoByID", reflect.TypeOf((*MockTeamsService)(nil).AddTeamRepoByID), ctx, orgID, teamID, owner, repo, opts)
}

// AddTeamRepoBySlug mocks base method.
func (m *MockTeamsService) AddTeamRepoBySlug(ctx context.Context, org, slug, owner, repo string, opts *github.TeamAddTeamRepoOptions) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTeamRepoBySlug", ctx, org, slug, owner, repo, opts)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTeamRepoBySlug indicates an expected call of AddTeamRepoBySlug.
func (mr *MockTeamsServiceMockRecorder) AddTeamRepoBySlug(ctx, org, slug, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTeamRepoBySlug", reflect.TypeOf((*MockTeamsService)(nil).AddTeamRepoBySlug), ctx, org, slug, owner, repo, opts)
}

// CreateCommentByID mocks base method.
func (m *MockTeamsService) CreateCommentByID(ctx context.Context, orgID, teamID int64, discsusionNumber int, comment github.DiscussionComment) (*github.DiscussionComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommentByID", ctx, orgID, teamID, discsusionNumber, comment)
	ret0, _ := ret[0].(*github.DiscussionComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCommentByID indicates an expected call of CreateCommentByID.
func (mr *MockTeamsServiceMockRecorder) CreateCommentByID(ctx, orgID, teamID, discsusionNumber, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentByID", reflect.TypeOf((*MockTeamsService)(nil).CreateCommentByID), ctx, orgID, teamID, discsusionNumber, comment)
}

// CreateCommentBySlug mocks base method.
func (m *MockTeamsService) CreateCommentBySlug(ctx context.Context, org, slug string, discsusionNumber int, comment github.DiscussionComment) (*github.DiscussionComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommentBySlug", ctx, org, slug, discsusionNumber, comment)
	ret0, _ := ret[0].(*github.DiscussionComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCommentBySlug indicates an expected call of CreateCommentBySlug.
func (mr *MockTeamsServiceMockRecorder) CreateCommentBySlug(ctx, org, slug, discsusionNumber, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentBySlug", reflect.TypeOf((*MockTeamsService)(nil).CreateCommentBySlug), ctx, org, slug, discsusionNumber, comment)
}

// CreateDiscussionByID mocks base method.
func (m *MockTeamsService) CreateDiscussionByID(ctx context.Context, orgID, teamID int64, discussion github.TeamDiscussion) (*github.TeamDiscussion, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDiscussionByID", ctx, orgID, teamID, discussion)
	ret0, _ := ret[0].(*github.TeamDiscussion)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDiscussionByID indicates an expected call of CreateDiscussionByID.
func (mr *MockTeamsServiceMockRecorder) CreateDiscussionByID(ctx, orgID, teamID, discussion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiscussionByID", reflect.TypeOf((*MockTeamsService)(nil).CreateDiscussionByID), ctx, orgID, teamID, discussion)
}

// CreateDiscussionBySlug mocks base method.
func (m *MockTeamsService) CreateDiscussionBySlug(ctx context.Context, org, slug string, discussion github.TeamDiscussion) (*github.TeamDiscussion, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDiscussionBySlug", ctx, org, slug, discussion)
	ret0, _ := ret[0].(*github.TeamDiscussion)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDiscussionBySlug indicates an expected call of CreateDiscussionBySlug.
func (mr *MockTeamsServiceMockRecorder) CreateDiscussionBySlug(ctx, org, slug, discussion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiscussionBySlug", reflect.TypeOf((*MockTeamsService)(nil).CreateDiscussionBySlug), ctx, org, slug, discussion)
}

// CreateOrUpdateIDPGroupConnectionsByID mocks base method.
func (m *MockTeamsService) CreateOrUpdateIDPGroupConnectionsByID(ctx context.Context, orgID, teamID int64, opts github.IDPGroupList) (*github.IDPGroupList, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateIDPGroupConnectionsByID", ctx, orgID, teamID, opts)
	ret0, _ := ret[0].(*github.IDPGroupList)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateOrUpdateIDPGroupConnectionsByID indicates an expected call of CreateOrUpdateIDPGroupConnectionsByID.
func (mr *MockTeamsServiceMockRecorder) CreateOrUpdateIDPGroupConnectionsByID(ctx, orgID, teamID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateIDPGroupConnectionsByID", reflect.TypeOf((*MockTeamsService)(nil).CreateOrUpdateIDPGroupConnectionsByID), ctx, orgID, teamID, opts)
}

// CreateOrUpdateIDPGroupConnectionsBySlug mocks base method.
func (m *MockTeamsService) CreateOrUpdateIDPGroupConnectionsBySlug(ctx context.Context, org, slug string, opts github.IDPGroupList) (*github.IDPGroupList, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateIDPGroupConnectionsBySlug", ctx, org, slug, opts)
	ret0, _ := ret[0].(*github.IDPGroupList)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateOrUpdateIDPGroupConnectionsBySlug indicates an expected call of CreateOrUpdateIDPGroupConnectionsBySlug.
func (mr *MockTeamsServiceMockRecorder) CreateOrUpdateIDPGroupConnectionsBySlug(ctx, org, slug, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateIDPGroupConnectionsBySlug", reflect.TypeOf((*MockTeamsService)(nil).CreateOrUpdateIDPGroupConnectionsBySlug), ctx, org, slug, opts)
}

// CreateTeam mocks base method.
func (m *MockTeamsService) CreateTeam(ctx context.Context, org string, team github.NewTeam) (*github.Team, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", ctx, org, team)
	ret0, _ := ret[0].(*github.Team)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTeam indicates an expected call of CreateTeam.
func (mr *MockTeamsServiceMockRecorder) CreateTeam(ctx, org, team interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockTeamsService)(nil).CreateTeam), ctx, org, team)
}

// DeleteCommentByID mocks base method.
func (m *MockTeamsService) DeleteCommentByID(ctx context.Context, orgID, teamID int64, discussionNumber, commentNumber int) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommentByID", ctx, orgID, teamID, discussionNumber, commentNumber)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCommentByID indicates an expected call of DeleteCommentByID.
func (mr *MockTeamsServiceMockRecorder) DeleteCommentByID(ctx, orgID, teamID, discussionNumber, commentNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommentByID", reflect.TypeOf((*MockTeamsService)(nil).DeleteCommentByID), ctx, orgID, teamID, discussionNumber, commentNumber)
}

// DeleteCommentBySlug mocks base method.
func (m *MockTeamsService) DeleteCommentBySlug(ctx context.Context, org, slug string, discussionNumber, commentNumber int) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommentBySlug", ctx, org, slug, discussionNumber, commentNumber)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCommentBySlug indicates an expected call of DeleteCommentBySlug.
func (mr *MockTeamsServiceMockRecorder) DeleteCommentBySlug(ctx, org, slug, discussionNumber, commentNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommentBySlug", reflect.TypeOf((*MockTeamsService)(nil).DeleteCommentBySlug), ctx, org, slug, discussionNumber, commentNumber)
}

// DeleteDiscussionByID mocks base method.
func (m *MockTeamsService) DeleteDiscussionByID(ctx context.Context, orgID, teamID int64, discussionNumber int) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDiscussionByID", ctx, orgID, teamID, discussionNumber)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDiscussionByID indicates an expected call of DeleteDiscussionByID.
func (mr *MockTeamsServiceMockRecorder) DeleteDiscussionByID(ctx, orgID, teamID, discussionNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDiscussionByID", reflect.TypeOf((*MockTeamsService)(nil).DeleteDiscussionByID), ctx, orgID, teamID, discussionNumber)
}

// DeleteDiscussionBySlug mocks base method.
func (m *MockTeamsService) DeleteDiscussionBySlug(ctx context.Context, org, slug string, discussionNumber int) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDiscussionBySlug", ctx, org, slug, discussionNumber)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDiscussionBySlug indicates an expected call of DeleteDiscussionBySlug.
func (mr *MockTeamsServiceMockRecorder) DeleteDiscussionBySlug(ctx, org, slug, discussionNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDiscussionBySlug", reflect.TypeOf((*MockTeamsService)(nil).DeleteDiscussionBySlug), ctx, org, slug, discussionNumber)
}

// DeleteTeamByID mocks base method.
func (m *MockTeamsService) DeleteTeamByID(ctx context.Context, orgID, teamID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeamByID", ctx, orgID, teamID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTeamByID indicates an expected call of DeleteTeamByID.
func (mr *MockTeamsServiceMockRecorder) DeleteTeamByID(ctx, orgID, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeamByID", reflect.TypeOf((*MockTeamsService)(nil).DeleteTeamByID), ctx, orgID, teamID)
}

// DeleteTeamBySlug mocks base method.
func (m *MockTeamsService) DeleteTeamBySlug(ctx context.Context, org, slug string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeamBySlug", ctx, org, slug)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTeamBySlug indicates an expected call of DeleteTeamBySlug.
func (mr *MockTeamsServiceMockRecorder) DeleteTeamBySlug(ctx, org, slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeamBySlug", reflect.TypeOf((*MockTeamsService)(nil).DeleteTeamBySlug), ctx, org, slug)
}

// EditCommentByID mocks base method.
func (m *MockTeamsService) EditCommentByID(ctx context.Context, orgID, teamID int64, discussionNumber, commentNumber int, comment github.DiscussionComment) (*github.DiscussionComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditCommentByID", ctx, orgID, teamID, discussionNumber, commentNumber, comment)
	ret0, _ := ret[0].(*github.DiscussionComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditCommentByID indicates an expected call of EditCommentByID.
func (mr *MockTeamsServiceMockRecorder) EditCommentByID(ctx, orgID, teamID, discussionNumber, commentNumber, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditCommentByID", reflect.TypeOf((*MockTeamsService)(nil).EditCommentByID), ctx, orgID, teamID, discussionNumber, commentNumber, comment)
}

// EditCommentBySlug mocks base method.
func (m *MockTeamsService) EditCommentBySlug(ctx context.Context, org, slug string, discussionNumber, commentNumber int, comment github.DiscussionComment) (*github.DiscussionComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditCommentBySlug", ctx, org, slug, discussionNumber, commentNumber, comment)
	ret0, _ := ret[0].(*github.DiscussionComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditCommentBySlug indicates an expected call of EditCommentBySlug.
func (mr *MockTeamsServiceMockRecorder) EditCommentBySlug(ctx, org, slug, discussionNumber, commentNumber, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditCommentBySlug", reflect.TypeOf((*MockTeamsService)(nil).EditCommentBySlug), ctx, org, slug, discussionNumber, commentNumber, comment)
}

// EditDiscussionByID mocks base method.
func (m *MockTeamsService) EditDiscussionByID(ctx context.Context, orgID, teamID int64, discussionNumber int, discussion github.TeamDiscussion) (*github.TeamDiscussion, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditDiscussionByID", ctx, orgID, teamID, discussionNumber, discussion)
	ret0, _ := ret[0].(*github.TeamDiscussion)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditDiscussionByID indicates an expected call of EditDiscussionByID.
func (mr *MockTeamsServiceMockRecorder) EditDiscussionByID(ctx, orgID, teamID, discussionNumber, discussion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditDiscussionByID", reflect.TypeOf((*MockTeamsService)(nil).EditDiscussionByID), ctx, orgID, teamID, discussionNumber, discussion)
}

// EditDiscussionBySlug mocks base method.
func (m *MockTeamsService) EditDiscussionBySlug(ctx context.Context, org, slug string, discussionNumber int, discussion github.TeamDiscussion) (*github.TeamDiscussion, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditDiscussionBySlug", ctx, org, slug, discussionNumber, discussion)
	ret0, _ := ret[0].(*github.TeamDiscussion)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditDiscussionBySlug indicates an expected call of EditDiscussionBySlug.
func (mr *MockTeamsServiceMockRecorder) EditDiscussionBySlug(ctx, org, slug, discussionNumber, discussion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditDiscussionBySlug", reflect.TypeOf((*MockTeamsService)(nil).EditDiscussionBySlug), ctx, org, slug, discussionNumber, discussion)
}

// EditTeamByID mocks base method.
func (m *MockTeamsService) EditTeamByID(ctx context.Context, orgID, teamID int64, team github.NewTeam, removeParent bool) (*github.Team, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditTeamByID", ctx, orgID, teamID, team, removeParent)
	ret0, _ := ret[0].(*github.Team)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditTeamByID indicates an expected call of EditTeamByID.
func (mr *MockTeamsServiceMockRecorder) EditTeamByID(ctx, orgID, teamID, team, removeParent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditTeamByID", reflect.TypeOf((*MockTeamsService)(nil).EditTeamByID), ctx, orgID, teamID, team, removeParent)
}

// EditTeamBySlug mocks base method.
func (m *MockTeamsService) EditTeamBySlug(ctx context.Context, org, slug string, team github.NewTeam, removeParent bool) (*github.Team, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditTeamBySlug", ctx, org, slug, team, removeParent)
	ret0, _ := ret[0].(*github.Team)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditTeamBySlug indicates an expected call of EditTeamBySlug.
func (mr *MockTeamsServiceMockRecorder) EditTeamBySlug(ctx, org, slug, team, removeParent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditTeamBySlug", reflect.TypeOf((*MockTeamsService)(nil).EditTeamBySlug), ctx, org, slug, team, removeParent)
}

// GetCommentByID mocks base method.
func (m *MockTeamsService) GetCommentByID(ctx context.Context, orgID, teamID int64, discussionNumber, commentNumber int) (*github.DiscussionComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentByID", ctx, orgID, teamID, discussionNumber, commentNumber)
	ret0, _ := ret[0].(*github.DiscussionComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommentByID indicates an expected call of GetCommentByID.
func (mr *MockTeamsServiceMockRecorder) GetCommentByID(ctx, orgID, teamID, discussionNumber, commentNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentByID", reflect.TypeOf((*MockTeamsService)(nil).GetCommentByID), ctx, orgID, teamID, discussionNumber, commentNumber)
}

// GetCommentBySlug mocks base method.
func (m *MockTeamsService) GetCommentBySlug(ctx context.Context, org, slug string, discussionNumber, commentNumber int) (*github.DiscussionComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentBySlug", ctx, org, slug, discussionNumber, commentNumber)
	ret0, _ := ret[0].(*github.DiscussionComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommentBySlug indicates an expected call of GetCommentBySlug.
func (mr *MockTeamsServiceMockRecorder) GetCommentBySlug(ctx, org, slug, discussionNumber, commentNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentBySlug", reflect.TypeOf((*MockTeamsService)(nil).GetCommentBySlug), ctx, org, slug, discussionNumber, commentNumber)
}

// GetDiscussionByID mocks base method.
func (m *MockTeamsService) GetDiscussionByID(ctx context.Context, orgID, teamID int64, discussionNumber int) (*github.TeamDiscussion, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscussionByID", ctx, orgID, teamID, discussionNumber)
	ret0, _ := ret[0].(*github.TeamDiscussion)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDiscussionByID indicates an expected call of GetDiscussionByID.
func (mr *MockTeamsServiceMockRecorder) GetDiscussionByID(ctx, orgID, teamID, discussionNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscussionByID", reflect.TypeOf((*MockTeamsService)(nil).GetDiscussionByID), ctx, orgID, teamID, discussionNumber)
}

// GetDiscussionBySlug mocks base method.
func (m *MockTeamsService) GetDiscussionBySlug(ctx context.Context, org, slug string, discussionNumber int) (*github.TeamDiscussion, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscussionBySlug", ctx, org, slug, discussionNumber)
	ret0, _ := ret[0].(*github.TeamDiscussion)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDiscussionBySlug indicates an expected call of GetDiscussionBySlug.
func (mr *MockTeamsServiceMockRecorder) GetDiscussionBySlug(ctx, org, slug, discussionNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscussionBySlug", reflect.TypeOf((*MockTeamsService)(nil).GetDiscussionBySlug), ctx, org, slug, discussionNumber)
}

// GetExternalGroup mocks base method.
func (m *MockTeamsService) GetExternalGroup(ctx context.Context, org string, groupID int64) (*github.ExternalGroup, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalGroup", ctx, org, groupID)
	ret0, _ := ret[0].(*github.ExternalGroup)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetExternalGroup indicates an expected call of GetExternalGroup.
func (mr *MockTeamsServiceMockRecorder) GetExternalGroup(ctx, org, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalGroup", reflect.TypeOf((*MockTeamsService)(nil).GetExternalGroup), ctx, org, groupID)
}

// GetTeamByID mocks base method.
func (m *MockTeamsService) GetTeamByID(ctx context.Context, orgID, teamID int64) (*github.Team, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamByID", ctx, orgID, teamID)
	ret0, _ := ret[0].(*github.Team)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTeamByID indicates an expected call of GetTeamByID.
func (mr *MockTeamsServiceMockRecorder) GetTeamByID(ctx, orgID, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamByID", reflect.TypeOf((*MockTeamsService)(nil).GetTeamByID), ctx, orgID, teamID)
}

// GetTeamBySlug mocks base method.
func (m *MockTeamsService) GetTeamBySlug(ctx context.Context, org, slug string) (*github.Team, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamBySlug", ctx, org, slug)
	ret0, _ := ret[0].(*github.Team)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTeamBySlug indicates an expected call of GetTeamBySlug.
func (mr *MockTeamsServiceMockRecorder) GetTeamBySlug(ctx, org, slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamBySlug", reflect.TypeOf((*MockTeamsService)(nil).GetTeamBySlug), ctx, org, slug)
}

// GetTeamMembershipByID mocks base method.
func (m *MockTeamsService) GetTeamMembershipByID(ctx context.Context, orgID, teamID int64, user string) (*github.Membership, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamMembershipByID", ctx, orgID, teamID, user)
	ret0, _ := ret[0].(*github.Membership)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTeamMembershipByID indicates an expected call of GetTeamMembershipByID.
func (mr *MockTeamsServiceMockRecorder) GetTeamMembershipByID(ctx, orgID, teamID, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamMembershipByID", reflect.TypeOf((*MockTeamsService)(nil).GetTeamMembershipByID), ctx, orgID, teamID, user)
}

// GetTeamMembershipBySlug mocks base method.
func (m *MockTeamsService) GetTeamMembershipBySlug(ctx context.Context, org, slug, user string) (*github.Membership, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamMembershipBySlug", ctx, org, slug, user)
	ret0, _ := ret[0].(*github.Membership)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTeamMembershipBySlug indicates an expected call of GetTeamMembershipBySlug.
func (mr *MockTeamsServiceMockRecorder) GetTeamMembershipBySlug(ctx, org, slug, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamMembershipBySlug", reflect.TypeOf((*MockTeamsService)(nil).GetTeamMembershipBySlug), ctx, org, slug, user)
}

// IsTeamRepoByID mocks base method.
func (m *MockTeamsService) IsTeamRepoByID(ctx context.Context, orgID, teamID int64, owner, repo string) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTeamRepoByID", ctx, orgID, teamID, owner, repo)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsTeamRepoByID indicates an expected call of IsTeamRepoByID.
func (mr *MockTeamsServiceMockRecorder) IsTeamRepoByID(ctx, orgID, teamID, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTeamRepoByID", reflect.TypeOf((*MockTeamsService)(nil).IsTeamRepoByID), ctx, orgID, teamID, owner, repo)
}

// IsTeamRepoBySlug mocks base method.
func (m *MockTeamsService) IsTeamRepoBySlug(ctx context.Context, org, slug, owner, repo string) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTeamRepoBySlug", ctx, org, slug, owner, repo)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsTeamRepoBySlug indicates an expected call of IsTeamRepoBySlug.
func (mr *MockTeamsServiceMockRecorder) IsTeamRepoBySlug(ctx, org, slug, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTeamRepoBySlug", reflect.TypeOf((*MockTeamsService)(nil).IsTeamRepoBySlug), ctx, org, slug, owner, repo)
}

// ListChildTeamsByParentID mocks base method.
func (m *MockTeamsService) ListChildTeamsByParentID(ctx context.Context, orgID, teamID int64, opts *github.ListOptions) ([]*github.Team, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChildTeamsByParentID", ctx, orgID, teamID, opts)
	ret0, _ := ret[0].([]*github.Team)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListChildTeamsByParentID indicates an expected call of ListChildTeamsByParentID.
func (mr *MockTeamsServiceMockRecorder) ListChildTeamsByParentID(ctx, orgID, teamID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChildTeamsByParentID", reflect.TypeOf((*MockTeamsService)(nil).ListChildTeamsByParentID), ctx, orgID, teamID, opts)
}

// ListChildTeamsByParentSlug mocks base method.
func (m *MockTeamsService) ListChildTeamsByParentSlug(ctx context.Context, org, slug string, opts *github.ListOptions) ([]*github.Team, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChildTeamsByParentSlug", ctx, org, slug, opts)
	ret0, _ := ret[0].([]*github.Team)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListChildTeamsByParentSlug indicates an expected call of ListChildTeamsByParentSlug.
func (mr *MockTeamsServiceMockRecorder) ListChildTeamsByParentSlug(ctx, org, slug, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChildTeamsByParentSlug", reflect.TypeOf((*MockTeamsService)(nil).ListChildTeamsByParentSlug), ctx, org, slug, opts)
}

// ListCommentsByID mocks base method.
func (m *MockTeamsService) ListCommentsByID(ctx context.Context, orgID, teamID int64, discussionNumber int, options *github.DiscussionCommentListOptions) ([]*github.DiscussionComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommentsByID", ctx, orgID, teamID, discussionNumber, options)
	ret0, _ := ret[0].([]*github.DiscussionComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCommentsByID indicates an expected call of ListCommentsByID.
func (mr *MockTeamsServiceMockRecorder) ListCommentsByID(ctx, orgID, teamID, discussionNumber, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommentsByID", reflect.TypeOf((*MockTeamsService)(nil).ListCommentsByID), ctx, orgID, teamID, discussionNumber, options)
}

// ListCommentsBySlug mocks base method.
func (m *MockTeamsService) ListCommentsBySlug(ctx context.Context, org, slug string, discussionNumber int, options *github.DiscussionCommentListOptions) ([]*github.DiscussionComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommentsBySlug", ctx, org, slug, discussionNumber, options)
	ret0, _ := ret[0].([]*github.DiscussionComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCommentsBySlug indicates an expected call of ListCommentsBySlug.
func (mr *MockTeamsServiceMockRecorder) ListCommentsBySlug(ctx, org, slug, discussionNumber, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommentsBySlug", reflect.TypeOf((*MockTeamsService)(nil).ListCommentsBySlug), ctx, org, slug, discussionNumber, options)
}

// ListDiscussionsByID mocks base method.
func (m *MockTeamsService) ListDiscussionsByID(ctx context.Context, orgID, teamID int64, opts *github.DiscussionListOptions) ([]*github.TeamDiscussion, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDiscussionsByID", ctx, orgID, teamID, opts)
	ret0, _ := ret[0].([]*github.TeamDiscussion)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDiscussionsByID indicates an expected call of ListDiscussionsByID.
func (mr *MockTeamsServiceMockRecorder) ListDiscussionsByID(ctx, orgID, teamID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDiscussionsByID", reflect.TypeOf((*MockTeamsService)(nil).ListDiscussionsByID), ctx, orgID, teamID, opts)
}

// ListDiscussionsBySlug mocks base method.
func (m *MockTeamsService) ListDiscussionsBySlug(ctx context.Context, org, slug string, opts *github.DiscussionListOptions) ([]*github.TeamDiscussion, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDiscussionsBySlug", ctx, org, slug, opts)
	ret0, _ := ret[0].([]*github.TeamDiscussion)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDiscussionsBySlug indicates an expected call of ListDiscussionsBySlug.
func (mr *MockTeamsServiceMockRecorder) ListDiscussionsBySlug(ctx, org, slug, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDiscussionsBySlug", reflect.TypeOf((*MockTeamsService)(nil).ListDiscussionsBySlug), ctx, org, slug, opts)
}

// ListExternalGroups mocks base method.
func (m *MockTeamsService) ListExternalGroups(ctx context.Context, org string, opts *github.ListExternalGroupsOptions) (*github.ExternalGroupList, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExternalGroups", ctx, org, opts)
	ret0, _ := ret[0].(*github.ExternalGroupList)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListExternalGroups indicates an expected call of ListExternalGroups.
func (mr *MockTeamsServiceMockRecorder) ListExternalGroups(ctx, org, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExternalGroups", reflect.TypeOf((*MockTeamsService)(nil).ListExternalGroups), ctx, org, opts)
}

// ListIDPGroupsForTeamByID mocks base method.
func (m *MockTeamsService) ListIDPGroupsForTeamByID(ctx context.Context, orgID, teamID int64) (*github.IDPGroupList, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIDPGroupsForTeamByID", ctx, orgID, teamID)
	ret0, _ := ret[0].(*github.IDPGroupList)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListIDPGroupsForTeamByID indicates an expected call of ListIDPGroupsForTeamByID.
func (mr *MockTeamsServiceMockRecorder) ListIDPGroupsForTeamByID(ctx, orgID, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIDPGroupsForTeamByID", reflect.TypeOf((*MockTeamsService)(nil).ListIDPGroupsForTeamByID), ctx, orgID, teamID)
}

// ListIDPGroupsForTeamBySlug mocks base method.
func (m *MockTeamsService) ListIDPGroupsForTeamBySlug(ctx context.Context, org, slug string) (*github.IDPGroupList, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIDPGroupsForTeamBySlug", ctx, org, slug)
	ret0, _ := ret[0].(*github.IDPGroupList)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListIDPGroupsForTeamBySlug indicates an expected call of ListIDPGroupsForTeamBySlug.
func (mr *MockTeamsServiceMockRecorder) ListIDPGroupsForTeamBySlug(ctx, org, slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIDPGroupsForTeamBySlug", reflect.TypeOf((*MockTeamsService)(nil).ListIDPGroupsForTeamBySlug), ctx, org, slug)
}

// ListIDPGroupsInOrganization mocks base method.
func (m *MockTeamsService) ListIDPGroupsInOrganization(ctx context.Context, org string, opts *github.ListCursorOptions) (*github.IDPGroupList, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIDPGroupsInOrganization", ctx, org, opts)
	ret0, _ := ret[0].(*github.IDPGroupList)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListIDPGroupsInOrganization indicates an expected call of ListIDPGroupsInOrganization.
func (mr *MockTeamsServiceMockRecorder) ListIDPGroupsInOrganization(ctx, org, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIDPGroupsInOrganization", reflect.TypeOf((*MockTeamsService)(nil).ListIDPGroupsInOrganization), ctx, org, opts)
}

// ListPendingTeamInvitationsByID mocks base method.
func (m *MockTeamsService) ListPendingTeamInvitationsByID(ctx context.Context, orgID, teamID int64, opts *github.ListOptions) ([]*github.Invitation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPendingTeamInvitationsByID", ctx, orgID, teamID, opts)
	ret0, _ := ret[0].([]*github.Invitation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPendingTeamInvitationsByID indicates an expected call of ListPendingTeamInvitationsByID.
func (mr *MockTeamsServiceMockRecorder) ListPendingTeamInvitationsByID(ctx, orgID, teamID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPendingTeamInvitationsByID", reflect.TypeOf((*MockTeamsService)(nil).ListPendingTeamInvitationsByID), ctx, orgID, teamID, opts)
}

// ListPendingTeamInvitationsBySlug mocks base method.
func (m *MockTeamsService) ListPendingTeamInvitationsBySlug(ctx context.Context, org, slug string, opts *github.ListOptions) ([]*github.Invitation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPendingTeamInvitationsBySlug", ctx, org, slug, opts)
	ret0, _ := ret[0].([]*github.Invitation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPendingTeamInvitationsBySlug indicates an expected call of ListPendingTeamInvitationsBySlug.
func (mr *MockTeamsServiceMockRecorder) ListPendingTeamInvitationsBySlug(ctx, org, slug, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPendingTeamInvitationsBySlug", reflect.TypeOf((*MockTeamsService)(nil).ListPendingTeamInvitationsBySlug), ctx, org, slug, opts)
}

// ListTeamMembersByID mocks base method.
func (m *MockTeamsService) ListTeamMembersByID(ctx context.Context, orgID, teamID int64, opts *github.TeamListTeamMembersOptions) ([]*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeamMembersByID", ctx, orgID, teamID, opts)
	ret0, _ := ret[0].([]*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTeamMembersByID indicates an expected call of ListTeamMembersByID.
func (mr *MockTeamsServiceMockRecorder) ListTeamMembersByID(ctx, orgID, teamID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeamMembersByID", reflect.TypeOf((*MockTeamsService)(nil).ListTeamMembersByID), ctx, orgID, teamID, opts)
}

// ListTeamMembersBySlug mocks base method.
func (m *MockTeamsService) ListTeamMembersBySlug(ctx context.Context, org, slug string, opts *github.TeamListTeamMembersOptions) ([]*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeamMembersBySlug", ctx, org, slug, opts)
	ret0, _ := ret[0].([]*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTeamMembersBySlug indicates an expected call of ListTeamMembersBySlug.
func (mr *MockTeamsServiceMockRecorder) ListTeamMembersBySlug(ctx, org, slug, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeamMembersBySlug", reflect.TypeOf((*MockTeamsService)(nil).ListTeamMembersBySlug), ctx, org, slug, opts)
}

// ListTeamProjectsByID mocks base method.
func (m *MockTeamsService) ListTeamProjectsByID(ctx context.Context, orgID, teamID int64) ([]*github.Project, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeamProjectsByID", ctx, orgID, teamID)
	ret0, _ := ret[0].([]*github.Project)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTeamProjectsByID indicates an expected call of ListTeamProjectsByID.
func (mr *MockTeamsServiceMockRecorder) ListTeamProjectsByID(ctx, orgID, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeamProjectsByID", reflect.TypeOf((*MockTeamsService)(nil).ListTeamProjectsByID), ctx, orgID, teamID)
}

// ListTeamProjectsBySlug mocks base method.
func (m *MockTeamsService) ListTeamProjectsBySlug(ctx context.Context, org, slug string) ([]*github.Project, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeamProjectsBySlug", ctx, org, slug)
	ret0, _ := ret[0].([]*github.Project)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTeamProjectsBySlug indicates an expected call of ListTeamProjectsBySlug.
func (mr *MockTeamsServiceMockRecorder) ListTeamProjectsBySlug(ctx, org, slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeamProjectsBySlug", reflect.TypeOf((*MockTeamsService)(nil).ListTeamProjectsBySlug), ctx, org, slug)
}

// ListTeamReposByID mocks base method.
func (m *MockTeamsService) ListTeamReposByID(ctx context.Context, orgID, teamID int64, opts *github.ListOptions) ([]*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeamReposByID", ctx, orgID, teamID, opts)
	ret0, _ := ret[0].([]*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTeamReposByID indicates an expected call of ListTeamReposByID.
func (mr *MockTeamsServiceMockRecorder) ListTeamReposByID(ctx, orgID, teamID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeamReposByID", reflect.TypeOf((*MockTeamsService)(nil).ListTeamReposByID), ctx, orgID, teamID, opts)
}

// ListTeamReposBySlug mocks base method.
func (m *MockTeamsService) ListTeamReposBySlug(ctx context.Context, org, slug string, opts *github.ListOptions) ([]*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeamReposBySlug", ctx, org, slug, opts)
	ret0, _ := ret[0].([]*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTeamReposBySlug indicates an expected call of ListTeamReposBySlug.
func (mr *MockTeamsServiceMockRecorder) ListTeamReposBySlug(ctx, org, slug, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeamReposBySlug", reflect.TypeOf((*MockTeamsService)(nil).ListTeamReposBySlug), ctx, org, slug, opts)
}

// ListTeams mocks base method.
func (m *MockTeamsService) ListTeams(ctx context.Context, org string, opts *github.ListOptions) ([]*github.Team, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeams", ctx, org, opts)
	ret0, _ := ret[0].([]*github.Team)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTeams indicates an expected call of ListTeams.
func (mr *MockTeamsServiceMockRecorder) ListTeams(ctx, org, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeams", reflect.TypeOf((*MockTeamsService)(nil).ListTeams), ctx, org, opts)
}

// ListUserTeams mocks base method.
func (m *MockTeamsService) ListUserTeams(ctx context.Context, opts *github.ListOptions) ([]*github.Team, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserTeams", ctx, opts)
	ret0, _ := ret[0].([]*github.Team)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUserTeams indicates an expected call of ListUserTeams.
func (mr *MockTeamsServiceMockRecorder) ListUserTeams(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserTeams", reflect.TypeOf((*MockTeamsService)(nil).ListUserTeams), ctx, opts)
}

// RemoveConnectedExternalGroup mocks base method.
func (m *MockTeamsService) RemoveConnectedExternalGroup(ctx context.Context, org, slug string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveConnectedExternalGroup", ctx, org, slug)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveConnectedExternalGroup indicates an expected call of RemoveConnectedExternalGroup.
func (mr *MockTeamsServiceMockRecorder) RemoveConnectedExternalGroup(ctx, org, slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveConnectedExternalGroup", reflect.TypeOf((*MockTeamsService)(nil).RemoveConnectedExternalGroup), ctx, org, slug)
}

// RemoveTeamMembershipByID mocks base method.
func (m *MockTeamsService) RemoveTeamMembershipByID(ctx context.Context, orgID, teamID int64, user string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTeamMembershipByID", ctx, orgID, teamID, user)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTeamMembershipByID indicates an expected call of RemoveTeamMembershipByID.
func (mr *MockTeamsServiceMockRecorder) RemoveTeamMembershipByID(ctx, orgID, teamID, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTeamMembershipByID", reflect.TypeOf((*MockTeamsService)(nil).RemoveTeamMembershipByID), ctx, orgID, teamID, user)
}

// RemoveTeamMembershipBySlug mocks base method.
func (m *MockTeamsService) RemoveTeamMembershipBySlug(ctx context.Context, org, slug, user string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTeamMembershipBySlug", ctx, org, slug, user)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTeamMembershipBySlug indicates an expected call of RemoveTeamMembershipBySlug.
func (mr *MockTeamsServiceMockRecorder) RemoveTeamMembershipBySlug(ctx, org, slug, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTeamMembershipBySlug", reflect.TypeOf((*MockTeamsService)(nil).RemoveTeamMembershipBySlug), ctx, org, slug, user)
}

// RemoveTeamProjectByID mocks base method.
func (m *MockTeamsService) RemoveTeamProjectByID(ctx context.Context, orgID, teamID, projectID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTeamProjectByID", ctx, orgID, teamID, projectID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTeamProjectByID indicates an expected call of RemoveTeamProjectByID.
func (mr *MockTeamsServiceMockRecorder) RemoveTeamProjectByID(ctx, orgID, teamID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTeamProjectByID", reflect.TypeOf((*MockTeamsService)(nil).RemoveTeamProjectByID), ctx, orgID, teamID, projectID)
}

// RemoveTeamProjectBySlug mocks base method.
func (m *MockTeamsService) RemoveTeamProjectBySlug(ctx context.Context, org, slug string, projectID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTeamProjectBySlug", ctx, org, slug, projectID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTeamProjectBySlug indicates an expected call of RemoveTeamProjectBySlug.
func (mr *MockTeamsServiceMockRecorder) RemoveTeamProjectBySlug(ctx, org, slug, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTeamProjectBySlug", reflect.TypeOf((*MockTeamsService)(nil).RemoveTeamProjectBySlug), ctx, org, slug, projectID)
}

// RemoveTeamRepoByID mocks base method.
func (m *MockTeamsService) RemoveTeamRepoByID(ctx context.Context, orgID, teamID int64, owner, repo string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTeamRepoByID", ctx, orgID, teamID, owner, repo)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTeamRepoByID indicates an expected call of RemoveTeamRepoByID.
func (mr *MockTeamsServiceMockRecorder) RemoveTeamRepoByID(ctx, orgID, teamID, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTeamRepoByID", reflect.TypeOf((*MockTeamsService)(nil).RemoveTeamRepoByID), ctx, orgID, teamID, owner, repo)
}

// RemoveTeamRepoBySlug mocks base method.
func (m *MockTeamsService) RemoveTeamRepoBySlug(ctx context.Context, org, slug, owner, repo string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTeamRepoBySlug", ctx, org, slug, owner, repo)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTeamRepoBySlug indicates an expected call of RemoveTeamRepoBySlug.
func (mr *MockTeamsServiceMockRecorder) RemoveTeamRepoBySlug(ctx, org, slug, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTeamRepoBySlug", reflect.TypeOf((*MockTeamsService)(nil).RemoveTeamRepoBySlug), ctx, org, slug, owner, repo)
}

// ReviewTeamProjectsByID mocks base method.
func (m *MockTeamsService) ReviewTeamProjectsByID(ctx context.Context, orgID, teamID, projectID int64) (*github.Project, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReviewTeamProjectsByID", ctx, orgID, teamID, projectID)
	ret0, _ := ret[0].(*github.Project)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReviewTeamProjectsByID indicates an expected call of ReviewTeamProjectsByID.
func (mr *MockTeamsServiceMockRecorder) ReviewTeamProjectsByID(ctx, orgID, teamID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReviewTeamProjectsByID", reflect.TypeOf((*MockTeamsService)(nil).ReviewTeamProjectsByID), ctx, orgID, teamID, projectID)
}

// ReviewTeamProjectsBySlug mocks base method.
func (m *MockTeamsService) ReviewTeamProjectsBySlug(ctx context.Context, org, slug string, projectID int64) (*github.Project, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReviewTeamProjectsBySlug", ctx, org, slug, projectID)
	ret0, _ := ret[0].(*github.Project)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReviewTeamProjectsBySlug indicates an expected call of ReviewTeamProjectsBySlug.
func (mr *MockTeamsServiceMockRecorder) ReviewTeamProjectsBySlug(ctx, org, slug, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReviewTeamProjectsBySlug", reflect.TypeOf((*MockTeamsService)(nil).ReviewTeamProjectsBySlug), ctx, org, slug, projectID)
}

// UpdateConnectedExternalGroup mocks base method.
func (m *MockTeamsService) UpdateConnectedExternalGroup(ctx context.Context, org, slug string, eg *github.ExternalGroup) (*github.ExternalGroup, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConnectedExternalGroup", ctx, org, slug, eg)
	ret0, _ := ret[0].(*github.ExternalGroup)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateConnectedExternalGroup indicates an expected call of UpdateConnectedExternalGroup.
func (mr *MockTeamsServiceMockRecorder) UpdateConnectedExternalGroup(ctx, org, slug, eg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnectedExternalGroup", reflect.TypeOf((*MockTeamsService)(nil).UpdateConnectedExternalGroup), ctx, org, slug, eg)
}

// MockUsersService is a mock of UsersService interface.
type MockUsersService struct {
	ctrl     *gomock.Controller
	recorder *MockUsersServiceMockRecorder
}

// MockUsersServiceMockRecorder is the mock recorder for MockUsersService.
type MockUsersServiceMockRecorder struct {
	mock *MockUsersService
}

// NewMockUsersService creates a new mock instance.
func NewMockUsersService(ctrl *gomock.Controller) *MockUsersService {
	mock := &MockUsersService{ctrl: ctrl}
	mock.recorder = &MockUsersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersService) EXPECT() *MockUsersServiceMockRecorder {
	return m.recorder
}

// AcceptInvitation mocks base method.
func (m *MockUsersService) AcceptInvitation(ctx context.Context, invitationID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptInvitation", ctx, invitationID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptInvitation indicates an expected call of AcceptInvitation.
func (mr *MockUsersServiceMockRecorder) AcceptInvitation(ctx, invitationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptInvitation", reflect.TypeOf((*MockUsersService)(nil).AcceptInvitation), ctx, invitationID)
}

// AddEmails mocks base method.
func (m *MockUsersService) AddEmails(ctx context.Context, emails []string) ([]*github.UserEmail, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEmails", ctx, emails)
	ret0, _ := ret[0].([]*github.UserEmail)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddEmails indicates an expected call of AddEmails.
func (mr *MockUsersServiceMockRecorder) AddEmails(ctx, emails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEmails", reflect.TypeOf((*MockUsersService)(nil).AddEmails), ctx, emails)
}

// BlockUser mocks base method.
func (m *MockUsersService) BlockUser(ctx context.Context, user string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockUser", ctx, user)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockUser indicates an expected call of BlockUser.
func (mr *MockUsersServiceMockRecorder) BlockUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockUser", reflect.TypeOf((*MockUsersService)(nil).BlockUser), ctx, user)
}

// CreateGPGKey mocks base method.
func (m *MockUsersService) CreateGPGKey(ctx context.Context, armoredPublicKey string) (*github.GPGKey, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGPGKey", ctx, armoredPublicKey)
	ret0, _ := ret[0].(*github.GPGKey)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateGPGKey indicates an expected call of CreateGPGKey.
func (mr *MockUsersServiceMockRecorder) CreateGPGKey(ctx, armoredPublicKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGPGKey", reflect.TypeOf((*MockUsersService)(nil).CreateGPGKey), ctx, armoredPublicKey)
}

// CreateKey mocks base method.
func (m *MockUsersService) CreateKey(ctx context.Context, key *github.Key) (*github.Key, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKey", ctx, key)
	ret0, _ := ret[0].(*github.Key)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateKey indicates an expected call of CreateKey.
func (mr *MockUsersServiceMockRecorder) CreateKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKey", reflect.TypeOf((*MockUsersService)(nil).CreateKey), ctx, key)
}

// CreateProject mocks base method.
func (m *MockUsersService) CreateProject(ctx context.Context, opts *github.CreateUserProjectOptions) (*github.Project, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", ctx, opts)
	ret0, _ := ret[0].(*github.Project)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockUsersServiceMockRecorder) CreateProject(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockUsersService)(nil).CreateProject), ctx, opts)
}

// CreateSSHSigningKey mocks base method.
func (m *MockUsersService) CreateSSHSigningKey(ctx context.Context, key *github.Key) (*github.SSHSigningKey, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSSHSigningKey", ctx, key)
	ret0, _ := ret[0].(*github.SSHSigningKey)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSSHSigningKey indicates an expected call of CreateSSHSigningKey.
func (mr *MockUsersServiceMockRecorder) CreateSSHSigningKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSSHSigningKey", reflect.TypeOf((*MockUsersService)(nil).CreateSSHSigningKey), ctx, key)
}

// DeclineInvitation mocks base method.
func (m *MockUsersService) DeclineInvitation(ctx context.Context, invitationID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclineInvitation", ctx, invitationID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeclineInvitation indicates an expected call of DeclineInvitation.
func (mr *MockUsersServiceMockRecorder) DeclineInvitation(ctx, invitationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclineInvitation", reflect.TypeOf((*MockUsersService)(nil).DeclineInvitation), ctx, invitationID)
}

// DeleteEmails mocks base method.
func (m *MockUsersService) DeleteEmails(ctx context.Context, emails []string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmails", ctx, emails)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmails indicates an expected call of DeleteEmails.
func (mr *MockUsersServiceMockRecorder) DeleteEmails(ctx, emails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmails", reflect.TypeOf((*MockUsersService)(nil).DeleteEmails), ctx, emails)
}

// DeleteGPGKey mocks base method.
func (m *MockUsersService) DeleteGPGKey(ctx context.Context, id int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGPGKey", ctx, id)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGPGKey indicates an expected call of DeleteGPGKey.
func (mr *MockUsersServiceMockRecorder) DeleteGPGKey(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGPGKey", reflect.TypeOf((*MockUsersService)(nil).DeleteGPGKey), ctx, id)
}

// DeleteKey mocks base method.
func (m *MockUsersService) DeleteKey(ctx context.Context, id int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKey", ctx, id)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKey indicates an expected call of DeleteKey.
func (mr *MockUsersServiceMockRecorder) DeleteKey(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKey", reflect.TypeOf((*MockUsersService)(nil).DeleteKey), ctx, id)
}

// DeletePackage mocks base method.
func (m *MockUsersService) DeletePackage(ctx context.Context, user, packageType, packageName string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePackage", ctx, user, packageType, packageName)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePackage indicates an expected call of DeletePackage.
func (mr *MockUsersServiceMockRecorder) DeletePackage(ctx, user, packageType, packageName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePackage", reflect.TypeOf((*MockUsersService)(nil).DeletePackage), ctx, user, packageType, packageName)
}

// DeleteSSHSigningKey mocks base method.
func (m *MockUsersService) DeleteSSHSigningKey(ctx context.Context, id int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSSHSigningKey", ctx, id)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSSHSigningKey indicates an expected call of DeleteSSHSigningKey.
func (mr *MockUsersServiceMockRecorder) DeleteSSHSigningKey(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSSHSigningKey", reflect.TypeOf((*MockUsersService)(nil).DeleteSSHSigningKey), ctx, id)
}

// DemoteSiteAdmin mocks base method.
func (m *MockUsersService) DemoteSiteAdmin(ctx context.Context, user string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DemoteSiteAdmin", ctx, user)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DemoteSiteAdmin indicates an expected call of DemoteSiteAdmin.
func (mr *MockUsersServiceMockRecorder) DemoteSiteAdmin(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DemoteSiteAdmin", reflect.TypeOf((*MockUsersService)(nil).DemoteSiteAdmin), ctx, user)
}

// Edit mocks base method.
func (m *MockUsersService) Edit(ctx context.Context, user *github.User) (*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", ctx, user)
	ret0, _ := ret[0].(*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Edit indicates an expected call of Edit.
func (mr *MockUsersServiceMockRecorder) Edit(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockUsersService)(nil).Edit), ctx, user)
}

// Follow mocks base method.
func (m *MockUsersService) Follow(ctx context.Context, user string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Follow", ctx, user)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Follow indicates an expected call of Follow.
func (mr *MockUsersServiceMockRecorder) Follow(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Follow", reflect.TypeOf((*MockUsersService)(nil).Follow), ctx, user)
}

// Get mocks base method.
func (m *MockUsersService) Get(ctx context.Context, user string) (*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, user)
	ret0, _ := ret[0].(*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockUsersServiceMockRecorder) Get(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUsersService)(nil).Get), ctx, user)
}

// GetByID mocks base method.
func (m *MockUsersService) GetByID(ctx context.Context, id int64) (*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUsersServiceMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUsersService)(nil).GetByID), ctx, id)
}

// GetGPGKey mocks base method.
func (m *MockUsersService) GetGPGKey(ctx context.Context, id int64) (*github.GPGKey, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGPGKey", ctx, id)
	ret0, _ := ret[0].(*github.GPGKey)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGPGKey indicates an expected call of GetGPGKey.
func (mr *MockUsersServiceMockRecorder) GetGPGKey(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGPGKey", reflect.TypeOf((*MockUsersService)(nil).GetGPGKey), ctx, id)
}

// GetHovercard mocks base method.
func (m *MockUsersService) GetHovercard(ctx context.Context, user string, opts *github.HovercardOptions) (*github.Hovercard, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHovercard", ctx, user, opts)
	ret0, _ := ret[0].(*github.Hovercard)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetHovercard indicates an expected call of GetHovercard.
func (mr *MockUsersServiceMockRecorder) GetHovercard(ctx, user, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHovercard", reflect.TypeOf((*MockUsersService)(nil).GetHovercard), ctx, user, opts)
}

// GetKey mocks base method.
func (m *MockUsersService) GetKey(ctx context.Context, id int64) (*github.Key, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey", ctx, id)
	ret0, _ := ret[0].(*github.Key)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetKey indicates an expected call of GetKey.
func (mr *MockUsersServiceMockRecorder) GetKey(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockUsersService)(nil).GetKey), ctx, id)
}

// GetPackage mocks base method.
func (m *MockUsersService) GetPackage(ctx context.Context, user, packageType, packageName string) (*github.Package, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackage", ctx, user, packageType, packageName)
	ret0, _ := ret[0].(*github.Package)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPackage indicates an expected call of GetPackage.
func (mr *MockUsersServiceMockRecorder) GetPackage(ctx, user, packageType, packageName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackage", reflect.TypeOf((*MockUsersService)(nil).GetPackage), ctx, user, packageType, packageName)
}

// GetSSHSigningKey mocks base method.
func (m *MockUsersService) GetSSHSigningKey(ctx context.Context, id int64) (*github.SSHSigningKey, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSSHSigningKey", ctx, id)
	ret0, _ := ret[0].(*github.SSHSigningKey)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSSHSigningKey indicates an expected call of GetSSHSigningKey.
func (mr *MockUsersServiceMockRecorder) GetSSHSigningKey(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSHSigningKey", reflect.TypeOf((*MockUsersService)(nil).GetSSHSigningKey), ctx, id)
}

// IsBlocked mocks base method.
func (m *MockUsersService) IsBlocked(ctx context.Context, user string) (bool, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBlocked", ctx, user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsBlocked indicates an expected call of IsBlocked.
func (mr *MockUsersServiceMockRecorder) IsBlocked(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBlocked", reflect.TypeOf((*MockUsersService)(nil).IsBlocked), ctx, user)
}

// IsFollowing mocks base method.
func (m *MockUsersService) IsFollowing(ctx context.Context, user, target string) (bool, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFollowing", ctx, user, target)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsFollowing indicates an expected call of IsFollowing.
func (mr *MockUsersServiceMockRecorder) IsFollowing(ctx, user, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFollowing", reflect.TypeOf((*MockUsersService)(nil).IsFollowing), ctx, user, target)
}

// ListAll mocks base method.
func (m *MockUsersService) ListAll(ctx context.Context, opts *github.UserListOptions) ([]*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx, opts)
	ret0, _ := ret[0].([]*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAll indicates an expected call of ListAll.
func (mr *MockUsersServiceMockRecorder) ListAll(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockUsersService)(nil).ListAll), ctx, opts)
}

// ListBlockedUsers mocks base method.
func (m *MockUsersService) ListBlockedUsers(ctx context.Context, opts *github.ListOptions) ([]*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBlockedUsers", ctx, opts)
	ret0, _ := ret[0].([]*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBlockedUsers indicates an expected call of ListBlockedUsers.
func (mr *MockUsersServiceMockRecorder) ListBlockedUsers(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBlockedUsers", reflect.TypeOf((*MockUsersService)(nil).ListBlockedUsers), ctx, opts)
}

// ListEmails mocks base method.
func (m *MockUsersService) ListEmails(ctx context.Context, opts *github.ListOptions) ([]*github.UserEmail, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmails", ctx, opts)
	ret0, _ := ret[0].([]*github.UserEmail)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEmails indicates an expected call of ListEmails.
func (mr *MockUsersServiceMockRecorder) ListEmails(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmails", reflect.TypeOf((*MockUsersService)(nil).ListEmails), ctx, opts)
}

// ListFollowers mocks base method.
func (m *MockUsersService) ListFollowers(ctx context.Context, user string, opts *github.ListOptions) ([]*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFollowers", ctx, user, opts)
	ret0, _ := ret[0].([]*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFollowers indicates an expected call of ListFollowers.
func (mr *MockUsersServiceMockRecorder) ListFollowers(ctx, user, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFollowers", reflect.TypeOf((*MockUsersService)(nil).ListFollowers), ctx, user, opts)
}

// ListFollowing mocks base method.
func (m *MockUsersService) ListFollowing(ctx context.Context, user string, opts *github.ListOptions) ([]*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFollowing", ctx, user, opts)
	ret0, _ := ret[0].([]*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFollowing indicates an expected call of ListFollowing.
func (mr *MockUsersServiceMockRecorder) ListFollowing(ctx, user, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFollowing", reflect.TypeOf((*MockUsersService)(nil).ListFollowing), ctx, user, opts)
}

// ListGPGKeys mocks base method.
func (m *MockUsersService) ListGPGKeys(ctx context.Context, user string, opts *github.ListOptions) ([]*github.GPGKey, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGPGKeys", ctx, user, opts)
	ret0, _ := ret[0].([]*github.GPGKey)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGPGKeys indicates an expected call of ListGPGKeys.
func (mr *MockUsersServiceMockRecorder) ListGPGKeys(ctx, user, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGPGKeys", reflect.TypeOf((*MockUsersService)(nil).ListGPGKeys), ctx, user, opts)
}

// ListInvitations mocks base method.
func (m *MockUsersService) ListInvitations(ctx context.Context, opts *github.ListOptions) ([]*github.RepositoryInvitation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvitations", ctx, opts)
	ret0, _ := ret[0].([]*github.RepositoryInvitation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListInvitations indicates an expected call of ListInvitations.
func (mr *MockUsersServiceMockRecorder) ListInvitations(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitations", reflect.TypeOf((*MockUsersService)(nil).ListInvitations), ctx, opts)
}

// ListKeys mocks base method.
func (m *MockUsersService) ListKeys(ctx context.Context, user string, opts *github.ListOptions) ([]*github.Key, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeys", ctx, user, opts)
	ret0, _ := ret[0].([]*github.Key)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListKeys indicates an expected call of ListKeys.
func (mr *MockUsersServiceMockRecorder) ListKeys(ctx, user, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeys", reflect.TypeOf((*MockUsersService)(nil).ListKeys), ctx, user, opts)
}

// ListPackages mocks base method.
func (m *MockUsersService) ListPackages(ctx context.Context, user string, opts *github.PackageListOptions) ([]*github.Package, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPackages", ctx, user, opts)
	ret0, _ := ret[0].([]*github.Package)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPackages indicates an expected call of ListPackages.
func (mr *MockUsersServiceMockRecorder) ListPackages(ctx, user, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackages", reflect.TypeOf((*MockUsersService)(nil).ListPackages), ctx, user, opts)
}

// ListProjects mocks base method.
func (m *MockUsersService) ListProjects(ctx context.Context, user string, opts *github.ProjectListOptions) ([]*github.Project, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects", ctx, user, opts)
	ret0, _ := ret[0].([]*github.Project)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockUsersServiceMockRecorder) ListProjects(ctx, user, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockUsersService)(nil).ListProjects), ctx, user, opts)
}

// ListSSHSigningKeys mocks base method.
func (m *MockUsersService) ListSSHSigningKeys(ctx context.Context, user string, opts *github.ListOptions) ([]*github.SSHSigningKey, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSSHSigningKeys", ctx, user, opts)
	ret0, _ := ret[0].([]*github.SSHSigningKey)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSSHSigningKeys indicates an expected call of ListSSHSigningKeys.
func (mr *MockUsersServiceMockRecorder) ListSSHSigningKeys(ctx, user, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSSHSigningKeys", reflect.TypeOf((*MockUsersService)(nil).ListSSHSigningKeys), ctx, user, opts)
}

// PackageDeleteVersion mocks base method.
func (m *MockUsersService) PackageDeleteVersion(ctx context.Context, user, packageType, packageName string, packageVersionID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PackageDeleteVersion", ctx, user, packageType, packageName, packageVersionID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PackageDeleteVersion indicates an expected call of PackageDeleteVersion.
func (mr *MockUsersServiceMockRecorder) PackageDeleteVersion(ctx, user, packageType, packageName, packageVersionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PackageDeleteVersion", reflect.TypeOf((*MockUsersService)(nil).PackageDeleteVersion), ctx, user, packageType, packageName, packageVersionID)
}

// PackageGetAllVersions mocks base method.
func (m *MockUsersService) PackageGetAllVersions(ctx context.Context, user, packageType, packageName string, opts *github.PackageListOptions) ([]*github.PackageVersion, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PackageGetAllVersions", ctx, user, packageType, packageName, opts)
	ret0, _ := ret[0].([]*github.PackageVersion)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PackageGetAllVersions indicates an expected call of PackageGetAllVersions.
func (mr *MockUsersServiceMockRecorder) PackageGetAllVersions(ctx, user, packageType, packageName, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PackageGetAllVersions", reflect.TypeOf((*MockUsersService)(nil).PackageGetAllVersions), ctx, user, packageType, packageName, opts)
}

// PackageGetVersion mocks base method.
func (m *MockUsersService) PackageGetVersion(ctx context.Context, user, packageType, packageName string, packageVersionID int64) (*github.PackageVersion, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PackageGetVersion", ctx, user, packageType, packageName, packageVersionID)
	ret0, _ := ret[0].(*github.PackageVersion)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PackageGetVersion indicates an expected call of PackageGetVersion.
func (mr *MockUsersServiceMockRecorder) PackageGetVersion(ctx, user, packageType, packageName, packageVersionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PackageGetVersion", reflect.TypeOf((*MockUsersService)(nil).PackageGetVersion), ctx, user, packageType, packageName, packageVersionID)
}

// PackageRestoreVersion mocks base method.
func (m *MockUsersService) PackageRestoreVersion(ctx context.Context, user, packageType, packageName string, packageVersionID int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PackageRestoreVersion", ctx, user, packageType, packageName, packageVersionID)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PackageRestoreVersion indicates an expected call of PackageRestoreVersion.
func (mr *MockUsersServiceMockRecorder) PackageRestoreVersion(ctx, user, packageType, packageName, packageVersionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PackageRestoreVersion", reflect.TypeOf((*MockUsersService)(nil).PackageRestoreVersion), ctx, user, packageType, packageName, packageVersionID)
}

// PromoteSiteAdmin mocks base method.
func (m *MockUsersService) PromoteSiteAdmin(ctx context.Context, user string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromoteSiteAdmin", ctx, user)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromoteSiteAdmin indicates an expected call of PromoteSiteAdmin.
func (mr *MockUsersServiceMockRecorder) PromoteSiteAdmin(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromoteSiteAdmin", reflect.TypeOf((*MockUsersService)(nil).PromoteSiteAdmin), ctx, user)
}

// RestorePackage mocks base method.
func (m *MockUsersService) RestorePackage(ctx context.Context, user, packageType, packageName string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestorePackage", ctx, user, packageType, packageName)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestorePackage indicates an expected call of RestorePackage.
func (mr *MockUsersServiceMockRecorder) RestorePackage(ctx, user, packageType, packageName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestorePackage", reflect.TypeOf((*MockUsersService)(nil).RestorePackage), ctx, user, packageType, packageName)
}

// Suspend mocks base method.
func (m *MockUsersService) Suspend(ctx context.Context, user string, opts *github.UserSuspendOptions) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Suspend", ctx, user, opts)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Suspend indicates an expected call of Suspend.
func (mr *MockUsersServiceMockRecorder) Suspend(ctx, user, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Suspend", reflect.TypeOf((*MockUsersService)(nil).Suspend), ctx, user, opts)
}

// UnblockUser mocks base method.
func (m *MockUsersService) UnblockUser(ctx context.Context, user string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnblockUser", ctx, user)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnblockUser indicates an expected call of UnblockUser.
func (mr *MockUsersServiceMockRecorder) UnblockUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnblockUser", reflect.TypeOf((*MockUsersService)(nil).UnblockUser), ctx, user)
}

// Unfollow mocks base method.
func (m *MockUsersService) Unfollow(ctx context.Context, user string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unfollow", ctx, user)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unfollow indicates an expected call of Unfollow.
func (mr *MockUsersServiceMockRecorder) Unfollow(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unfollow", reflect.TypeOf((*MockUsersService)(nil).Unfollow), ctx, user)
}

// Unsuspend mocks base method.
func (m *MockUsersService) Unsuspend(ctx context.Context, user string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsuspend", ctx, user)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unsuspend indicates an expected call of Unsuspend.
func (mr *MockUsersServiceMockRecorder) Unsuspend(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsuspend", reflect.TypeOf((*MockUsersService)(nil).Unsuspend), ctx, user)
}
