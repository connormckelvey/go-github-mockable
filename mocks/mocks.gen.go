// Code generated by MockGen. DO NOT EDIT.
// Source: ../client.gen.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	http "net/http"
	url "net/url"
	os "os"
	reflect "reflect"
	time "time"

	gogithubmockable "github.com/connormckelvey/go-github-mockable"
	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v48/github"
)

// MockClientAPI is a mock of ClientAPI interface.
type MockClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockClientAPIMockRecorder
}

// MockClientAPIMockRecorder is the mock recorder for MockClientAPI.
type MockClientAPIMockRecorder struct {
	mock *MockClientAPI
}

// NewMockClientAPI creates a new mock instance.
func NewMockClientAPI(ctrl *gomock.Controller) *MockClientAPI {
	mock := &MockClientAPI{ctrl: ctrl}
	mock.recorder = &MockClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientAPI) EXPECT() *MockClientAPIMockRecorder {
	return m.recorder
}

// GetActions mocks base method.
func (m *MockClientAPI) GetActions() gogithubmockable.ActionsService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActions")
	ret0, _ := ret[0].(gogithubmockable.ActionsService)
	return ret0
}

// GetActions indicates an expected call of GetActions.
func (mr *MockClientAPIMockRecorder) GetActions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActions", reflect.TypeOf((*MockClientAPI)(nil).GetActions))
}

// GetActivity mocks base method.
func (m *MockClientAPI) GetActivity() gogithubmockable.ActivityService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivity")
	ret0, _ := ret[0].(gogithubmockable.ActivityService)
	return ret0
}

// GetActivity indicates an expected call of GetActivity.
func (mr *MockClientAPIMockRecorder) GetActivity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivity", reflect.TypeOf((*MockClientAPI)(nil).GetActivity))
}

// GetAdmin mocks base method.
func (m *MockClientAPI) GetAdmin() gogithubmockable.AdminService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdmin")
	ret0, _ := ret[0].(gogithubmockable.AdminService)
	return ret0
}

// GetAdmin indicates an expected call of GetAdmin.
func (mr *MockClientAPIMockRecorder) GetAdmin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdmin", reflect.TypeOf((*MockClientAPI)(nil).GetAdmin))
}

// GetApps mocks base method.
func (m *MockClientAPI) GetApps() gogithubmockable.AppsService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApps")
	ret0, _ := ret[0].(gogithubmockable.AppsService)
	return ret0
}

// GetApps indicates an expected call of GetApps.
func (mr *MockClientAPIMockRecorder) GetApps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApps", reflect.TypeOf((*MockClientAPI)(nil).GetApps))
}

// GetAuthorizations mocks base method.
func (m *MockClientAPI) GetAuthorizations() gogithubmockable.AuthorizationsService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizations")
	ret0, _ := ret[0].(gogithubmockable.AuthorizationsService)
	return ret0
}

// GetAuthorizations indicates an expected call of GetAuthorizations.
func (mr *MockClientAPIMockRecorder) GetAuthorizations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizations", reflect.TypeOf((*MockClientAPI)(nil).GetAuthorizations))
}

// GetBaseURL mocks base method.
func (m *MockClientAPI) GetBaseURL() *url.URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseURL")
	ret0, _ := ret[0].(*url.URL)
	return ret0
}

// GetBaseURL indicates an expected call of GetBaseURL.
func (mr *MockClientAPIMockRecorder) GetBaseURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseURL", reflect.TypeOf((*MockClientAPI)(nil).GetBaseURL))
}

// GetBilling mocks base method.
func (m *MockClientAPI) GetBilling() gogithubmockable.BillingService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBilling")
	ret0, _ := ret[0].(gogithubmockable.BillingService)
	return ret0
}

// GetBilling indicates an expected call of GetBilling.
func (mr *MockClientAPIMockRecorder) GetBilling() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBilling", reflect.TypeOf((*MockClientAPI)(nil).GetBilling))
}

// GetChecks mocks base method.
func (m *MockClientAPI) GetChecks() gogithubmockable.ChecksService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChecks")
	ret0, _ := ret[0].(gogithubmockable.ChecksService)
	return ret0
}

// GetChecks indicates an expected call of GetChecks.
func (mr *MockClientAPIMockRecorder) GetChecks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChecks", reflect.TypeOf((*MockClientAPI)(nil).GetChecks))
}

// GetCodeScanning mocks base method.
func (m *MockClientAPI) GetCodeScanning() gogithubmockable.CodeScanningService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeScanning")
	ret0, _ := ret[0].(gogithubmockable.CodeScanningService)
	return ret0
}

// GetCodeScanning indicates an expected call of GetCodeScanning.
func (mr *MockClientAPIMockRecorder) GetCodeScanning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeScanning", reflect.TypeOf((*MockClientAPI)(nil).GetCodeScanning))
}

// GetDependabot mocks base method.
func (m *MockClientAPI) GetDependabot() gogithubmockable.DependabotService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDependabot")
	ret0, _ := ret[0].(gogithubmockable.DependabotService)
	return ret0
}

// GetDependabot indicates an expected call of GetDependabot.
func (mr *MockClientAPIMockRecorder) GetDependabot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDependabot", reflect.TypeOf((*MockClientAPI)(nil).GetDependabot))
}

// GetEnterprise mocks base method.
func (m *MockClientAPI) GetEnterprise() gogithubmockable.EnterpriseService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnterprise")
	ret0, _ := ret[0].(gogithubmockable.EnterpriseService)
	return ret0
}

// GetEnterprise indicates an expected call of GetEnterprise.
func (mr *MockClientAPIMockRecorder) GetEnterprise() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnterprise", reflect.TypeOf((*MockClientAPI)(nil).GetEnterprise))
}

// GetGists mocks base method.
func (m *MockClientAPI) GetGists() gogithubmockable.GistsService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGists")
	ret0, _ := ret[0].(gogithubmockable.GistsService)
	return ret0
}

// GetGists indicates an expected call of GetGists.
func (mr *MockClientAPIMockRecorder) GetGists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGists", reflect.TypeOf((*MockClientAPI)(nil).GetGists))
}

// GetGit mocks base method.
func (m *MockClientAPI) GetGit() gogithubmockable.GitService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGit")
	ret0, _ := ret[0].(gogithubmockable.GitService)
	return ret0
}

// GetGit indicates an expected call of GetGit.
func (mr *MockClientAPIMockRecorder) GetGit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGit", reflect.TypeOf((*MockClientAPI)(nil).GetGit))
}

// GetGitignores mocks base method.
func (m *MockClientAPI) GetGitignores() gogithubmockable.GitignoresService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitignores")
	ret0, _ := ret[0].(gogithubmockable.GitignoresService)
	return ret0
}

// GetGitignores indicates an expected call of GetGitignores.
func (mr *MockClientAPIMockRecorder) GetGitignores() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitignores", reflect.TypeOf((*MockClientAPI)(nil).GetGitignores))
}

// GetInteractions mocks base method.
func (m *MockClientAPI) GetInteractions() gogithubmockable.InteractionsService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInteractions")
	ret0, _ := ret[0].(gogithubmockable.InteractionsService)
	return ret0
}

// GetInteractions indicates an expected call of GetInteractions.
func (mr *MockClientAPIMockRecorder) GetInteractions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInteractions", reflect.TypeOf((*MockClientAPI)(nil).GetInteractions))
}

// GetIssueImport mocks base method.
func (m *MockClientAPI) GetIssueImport() gogithubmockable.IssueImportService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueImport")
	ret0, _ := ret[0].(gogithubmockable.IssueImportService)
	return ret0
}

// GetIssueImport indicates an expected call of GetIssueImport.
func (mr *MockClientAPIMockRecorder) GetIssueImport() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueImport", reflect.TypeOf((*MockClientAPI)(nil).GetIssueImport))
}

// GetIssues mocks base method.
func (m *MockClientAPI) GetIssues() gogithubmockable.IssuesService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssues")
	ret0, _ := ret[0].(gogithubmockable.IssuesService)
	return ret0
}

// GetIssues indicates an expected call of GetIssues.
func (mr *MockClientAPIMockRecorder) GetIssues() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssues", reflect.TypeOf((*MockClientAPI)(nil).GetIssues))
}

// GetLicenses mocks base method.
func (m *MockClientAPI) GetLicenses() gogithubmockable.LicensesService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLicenses")
	ret0, _ := ret[0].(gogithubmockable.LicensesService)
	return ret0
}

// GetLicenses indicates an expected call of GetLicenses.
func (mr *MockClientAPIMockRecorder) GetLicenses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLicenses", reflect.TypeOf((*MockClientAPI)(nil).GetLicenses))
}

// GetMarketplace mocks base method.
func (m *MockClientAPI) GetMarketplace() gogithubmockable.MarketplaceService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarketplace")
	ret0, _ := ret[0].(gogithubmockable.MarketplaceService)
	return ret0
}

// GetMarketplace indicates an expected call of GetMarketplace.
func (mr *MockClientAPIMockRecorder) GetMarketplace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarketplace", reflect.TypeOf((*MockClientAPI)(nil).GetMarketplace))
}

// GetMigrations mocks base method.
func (m *MockClientAPI) GetMigrations() gogithubmockable.MigrationsService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMigrations")
	ret0, _ := ret[0].(gogithubmockable.MigrationsService)
	return ret0
}

// GetMigrations indicates an expected call of GetMigrations.
func (mr *MockClientAPIMockRecorder) GetMigrations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMigrations", reflect.TypeOf((*MockClientAPI)(nil).GetMigrations))
}

// GetOrganizations mocks base method.
func (m *MockClientAPI) GetOrganizations() gogithubmockable.OrganizationsService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizations")
	ret0, _ := ret[0].(gogithubmockable.OrganizationsService)
	return ret0
}

// GetOrganizations indicates an expected call of GetOrganizations.
func (mr *MockClientAPIMockRecorder) GetOrganizations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizations", reflect.TypeOf((*MockClientAPI)(nil).GetOrganizations))
}

// GetProjects mocks base method.
func (m *MockClientAPI) GetProjects() gogithubmockable.ProjectsService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjects")
	ret0, _ := ret[0].(gogithubmockable.ProjectsService)
	return ret0
}

// GetProjects indicates an expected call of GetProjects.
func (mr *MockClientAPIMockRecorder) GetProjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjects", reflect.TypeOf((*MockClientAPI)(nil).GetProjects))
}

// GetPullRequests mocks base method.
func (m *MockClientAPI) GetPullRequests() gogithubmockable.PullRequestsService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequests")
	ret0, _ := ret[0].(gogithubmockable.PullRequestsService)
	return ret0
}

// GetPullRequests indicates an expected call of GetPullRequests.
func (mr *MockClientAPIMockRecorder) GetPullRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequests", reflect.TypeOf((*MockClientAPI)(nil).GetPullRequests))
}

// GetReactions mocks base method.
func (m *MockClientAPI) GetReactions() gogithubmockable.ReactionsService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReactions")
	ret0, _ := ret[0].(gogithubmockable.ReactionsService)
	return ret0
}

// GetReactions indicates an expected call of GetReactions.
func (mr *MockClientAPIMockRecorder) GetReactions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReactions", reflect.TypeOf((*MockClientAPI)(nil).GetReactions))
}

// GetRepositories mocks base method.
func (m *MockClientAPI) GetRepositories() gogithubmockable.RepositoriesService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositories")
	ret0, _ := ret[0].(gogithubmockable.RepositoriesService)
	return ret0
}

// GetRepositories indicates an expected call of GetRepositories.
func (mr *MockClientAPIMockRecorder) GetRepositories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositories", reflect.TypeOf((*MockClientAPI)(nil).GetRepositories))
}

// GetSCIM mocks base method.
func (m *MockClientAPI) GetSCIM() gogithubmockable.SCIMService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSCIM")
	ret0, _ := ret[0].(gogithubmockable.SCIMService)
	return ret0
}

// GetSCIM indicates an expected call of GetSCIM.
func (mr *MockClientAPIMockRecorder) GetSCIM() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSCIM", reflect.TypeOf((*MockClientAPI)(nil).GetSCIM))
}

// GetSearch mocks base method.
func (m *MockClientAPI) GetSearch() gogithubmockable.SearchService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearch")
	ret0, _ := ret[0].(gogithubmockable.SearchService)
	return ret0
}

// GetSearch indicates an expected call of GetSearch.
func (mr *MockClientAPIMockRecorder) GetSearch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearch", reflect.TypeOf((*MockClientAPI)(nil).GetSearch))
}

// GetSecretScanning mocks base method.
func (m *MockClientAPI) GetSecretScanning() gogithubmockable.SecretScanningService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretScanning")
	ret0, _ := ret[0].(gogithubmockable.SecretScanningService)
	return ret0
}

// GetSecretScanning indicates an expected call of GetSecretScanning.
func (mr *MockClientAPIMockRecorder) GetSecretScanning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretScanning", reflect.TypeOf((*MockClientAPI)(nil).GetSecretScanning))
}

// GetTeams mocks base method.
func (m *MockClientAPI) GetTeams() gogithubmockable.TeamsService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeams")
	ret0, _ := ret[0].(gogithubmockable.TeamsService)
	return ret0
}

// GetTeams indicates an expected call of GetTeams.
func (mr *MockClientAPIMockRecorder) GetTeams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeams", reflect.TypeOf((*MockClientAPI)(nil).GetTeams))
}

// GetUploadURL mocks base method.
func (m *MockClientAPI) GetUploadURL() *url.URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploadURL")
	ret0, _ := ret[0].(*url.URL)
	return ret0
}

// GetUploadURL indicates an expected call of GetUploadURL.
func (mr *MockClientAPIMockRecorder) GetUploadURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadURL", reflect.TypeOf((*MockClientAPI)(nil).GetUploadURL))
}

// GetUserAgent mocks base method.
func (m *MockClientAPI) GetUserAgent() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAgent")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUserAgent indicates an expected call of GetUserAgent.
func (mr *MockClientAPIMockRecorder) GetUserAgent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAgent", reflect.TypeOf((*MockClientAPI)(nil).GetUserAgent))
}

// GetUsers mocks base method.
func (m *MockClientAPI) GetUsers() gogithubmockable.UsersService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].(gogithubmockable.UsersService)
	return ret0
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockClientAPIMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockClientAPI)(nil).GetUsers))
}

// SetBaseURL mocks base method.
func (m *MockClientAPI) SetBaseURL(arg0 *url.URL) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBaseURL", arg0)
}

// SetBaseURL indicates an expected call of SetBaseURL.
func (mr *MockClientAPIMockRecorder) SetBaseURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBaseURL", reflect.TypeOf((*MockClientAPI)(nil).SetBaseURL), arg0)
}

// SetUploadURL mocks base method.
func (m *MockClientAPI) SetUploadURL(arg0 *url.URL) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUploadURL", arg0)
}

// SetUploadURL indicates an expected call of SetUploadURL.
func (mr *MockClientAPIMockRecorder) SetUploadURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUploadURL", reflect.TypeOf((*MockClientAPI)(nil).SetUploadURL), arg0)
}

// SetUserAgent mocks base method.
func (m *MockClientAPI) SetUserAgent(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUserAgent", arg0)
}

// SetUserAgent indicates an expected call of SetUserAgent.
func (mr *MockClientAPIMockRecorder) SetUserAgent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserAgent", reflect.TypeOf((*MockClientAPI)(nil).SetUserAgent), arg0)
}

// MockActionsService is a mock of ActionsService interface.
type MockActionsService struct {
	ctrl     *gomock.Controller
	recorder *MockActionsServiceMockRecorder
}

// MockActionsServiceMockRecorder is the mock recorder for MockActionsService.
type MockActionsServiceMockRecorder struct {
	mock *MockActionsService
}

// NewMockActionsService creates a new mock instance.
func NewMockActionsService(ctrl *gomock.Controller) *MockActionsService {
	mock := &MockActionsService{ctrl: ctrl}
	mock.recorder = &MockActionsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActionsService) EXPECT() *MockActionsServiceMockRecorder {
	return m.recorder
}

// AddEnabledReposInOrg mocks base method.
func (m *MockActionsService) AddEnabledReposInOrg(arg0 context.Context, arg1 string, arg2 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEnabledReposInOrg", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddEnabledReposInOrg indicates an expected call of AddEnabledReposInOrg.
func (mr *MockActionsServiceMockRecorder) AddEnabledReposInOrg(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEnabledReposInOrg", reflect.TypeOf((*MockActionsService)(nil).AddEnabledReposInOrg), arg0, arg1, arg2)
}

// AddRepositoryAccessRunnerGroup mocks base method.
func (m *MockActionsService) AddRepositoryAccessRunnerGroup(arg0 context.Context, arg1 string, arg2, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRepositoryAccessRunnerGroup", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRepositoryAccessRunnerGroup indicates an expected call of AddRepositoryAccessRunnerGroup.
func (mr *MockActionsServiceMockRecorder) AddRepositoryAccessRunnerGroup(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRepositoryAccessRunnerGroup", reflect.TypeOf((*MockActionsService)(nil).AddRepositoryAccessRunnerGroup), arg0, arg1, arg2, arg3)
}

// AddRunnerGroupRunners mocks base method.
func (m *MockActionsService) AddRunnerGroupRunners(arg0 context.Context, arg1 string, arg2, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRunnerGroupRunners", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRunnerGroupRunners indicates an expected call of AddRunnerGroupRunners.
func (mr *MockActionsServiceMockRecorder) AddRunnerGroupRunners(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRunnerGroupRunners", reflect.TypeOf((*MockActionsService)(nil).AddRunnerGroupRunners), arg0, arg1, arg2, arg3)
}

// AddSelectedRepoToOrgSecret mocks base method.
func (m *MockActionsService) AddSelectedRepoToOrgSecret(arg0 context.Context, arg1, arg2 string, arg3 *github.Repository) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSelectedRepoToOrgSecret", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSelectedRepoToOrgSecret indicates an expected call of AddSelectedRepoToOrgSecret.
func (mr *MockActionsServiceMockRecorder) AddSelectedRepoToOrgSecret(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSelectedRepoToOrgSecret", reflect.TypeOf((*MockActionsService)(nil).AddSelectedRepoToOrgSecret), arg0, arg1, arg2, arg3)
}

// CancelWorkflowRunByID mocks base method.
func (m *MockActionsService) CancelWorkflowRunByID(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelWorkflowRunByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelWorkflowRunByID indicates an expected call of CancelWorkflowRunByID.
func (mr *MockActionsServiceMockRecorder) CancelWorkflowRunByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelWorkflowRunByID", reflect.TypeOf((*MockActionsService)(nil).CancelWorkflowRunByID), arg0, arg1, arg2, arg3)
}

// CreateOrUpdateEnvSecret mocks base method.
func (m *MockActionsService) CreateOrUpdateEnvSecret(arg0 context.Context, arg1 int, arg2 string, arg3 *github.EncryptedSecret) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateEnvSecret", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateEnvSecret indicates an expected call of CreateOrUpdateEnvSecret.
func (mr *MockActionsServiceMockRecorder) CreateOrUpdateEnvSecret(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateEnvSecret", reflect.TypeOf((*MockActionsService)(nil).CreateOrUpdateEnvSecret), arg0, arg1, arg2, arg3)
}

// CreateOrUpdateOrgSecret mocks base method.
func (m *MockActionsService) CreateOrUpdateOrgSecret(arg0 context.Context, arg1 string, arg2 *github.EncryptedSecret) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateOrgSecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateOrgSecret indicates an expected call of CreateOrUpdateOrgSecret.
func (mr *MockActionsServiceMockRecorder) CreateOrUpdateOrgSecret(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateOrgSecret", reflect.TypeOf((*MockActionsService)(nil).CreateOrUpdateOrgSecret), arg0, arg1, arg2)
}

// CreateOrUpdateRepoSecret mocks base method.
func (m *MockActionsService) CreateOrUpdateRepoSecret(arg0 context.Context, arg1, arg2 string, arg3 *github.EncryptedSecret) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateRepoSecret", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateRepoSecret indicates an expected call of CreateOrUpdateRepoSecret.
func (mr *MockActionsServiceMockRecorder) CreateOrUpdateRepoSecret(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateRepoSecret", reflect.TypeOf((*MockActionsService)(nil).CreateOrUpdateRepoSecret), arg0, arg1, arg2, arg3)
}

// CreateOrganizationRegistrationToken mocks base method.
func (m *MockActionsService) CreateOrganizationRegistrationToken(arg0 context.Context, arg1 string) (*github.RegistrationToken, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganizationRegistrationToken", arg0, arg1)
	ret0, _ := ret[0].(*github.RegistrationToken)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateOrganizationRegistrationToken indicates an expected call of CreateOrganizationRegistrationToken.
func (mr *MockActionsServiceMockRecorder) CreateOrganizationRegistrationToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationRegistrationToken", reflect.TypeOf((*MockActionsService)(nil).CreateOrganizationRegistrationToken), arg0, arg1)
}

// CreateOrganizationRemoveToken mocks base method.
func (m *MockActionsService) CreateOrganizationRemoveToken(arg0 context.Context, arg1 string) (*github.RemoveToken, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganizationRemoveToken", arg0, arg1)
	ret0, _ := ret[0].(*github.RemoveToken)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateOrganizationRemoveToken indicates an expected call of CreateOrganizationRemoveToken.
func (mr *MockActionsServiceMockRecorder) CreateOrganizationRemoveToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationRemoveToken", reflect.TypeOf((*MockActionsService)(nil).CreateOrganizationRemoveToken), arg0, arg1)
}

// CreateOrganizationRunnerGroup mocks base method.
func (m *MockActionsService) CreateOrganizationRunnerGroup(arg0 context.Context, arg1 string, arg2 github.CreateRunnerGroupRequest) (*github.RunnerGroup, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganizationRunnerGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.RunnerGroup)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateOrganizationRunnerGroup indicates an expected call of CreateOrganizationRunnerGroup.
func (mr *MockActionsServiceMockRecorder) CreateOrganizationRunnerGroup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationRunnerGroup", reflect.TypeOf((*MockActionsService)(nil).CreateOrganizationRunnerGroup), arg0, arg1, arg2)
}

// CreateRegistrationToken mocks base method.
func (m *MockActionsService) CreateRegistrationToken(arg0 context.Context, arg1, arg2 string) (*github.RegistrationToken, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegistrationToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.RegistrationToken)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRegistrationToken indicates an expected call of CreateRegistrationToken.
func (mr *MockActionsServiceMockRecorder) CreateRegistrationToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistrationToken", reflect.TypeOf((*MockActionsService)(nil).CreateRegistrationToken), arg0, arg1, arg2)
}

// CreateRemoveToken mocks base method.
func (m *MockActionsService) CreateRemoveToken(arg0 context.Context, arg1, arg2 string) (*github.RemoveToken, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRemoveToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.RemoveToken)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRemoveToken indicates an expected call of CreateRemoveToken.
func (mr *MockActionsServiceMockRecorder) CreateRemoveToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRemoveToken", reflect.TypeOf((*MockActionsService)(nil).CreateRemoveToken), arg0, arg1, arg2)
}

// CreateWorkflowDispatchEventByFileName mocks base method.
func (m *MockActionsService) CreateWorkflowDispatchEventByFileName(arg0 context.Context, arg1, arg2, arg3 string, arg4 github.CreateWorkflowDispatchEventRequest) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflowDispatchEventByFileName", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflowDispatchEventByFileName indicates an expected call of CreateWorkflowDispatchEventByFileName.
func (mr *MockActionsServiceMockRecorder) CreateWorkflowDispatchEventByFileName(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowDispatchEventByFileName", reflect.TypeOf((*MockActionsService)(nil).CreateWorkflowDispatchEventByFileName), arg0, arg1, arg2, arg3, arg4)
}

// CreateWorkflowDispatchEventByID mocks base method.
func (m *MockActionsService) CreateWorkflowDispatchEventByID(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 github.CreateWorkflowDispatchEventRequest) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflowDispatchEventByID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflowDispatchEventByID indicates an expected call of CreateWorkflowDispatchEventByID.
func (mr *MockActionsServiceMockRecorder) CreateWorkflowDispatchEventByID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowDispatchEventByID", reflect.TypeOf((*MockActionsService)(nil).CreateWorkflowDispatchEventByID), arg0, arg1, arg2, arg3, arg4)
}

// DeleteArtifact mocks base method.
func (m *MockActionsService) DeleteArtifact(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArtifact", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteArtifact indicates an expected call of DeleteArtifact.
func (mr *MockActionsServiceMockRecorder) DeleteArtifact(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArtifact", reflect.TypeOf((*MockActionsService)(nil).DeleteArtifact), arg0, arg1, arg2, arg3)
}

// DeleteEnvSecret mocks base method.
func (m *MockActionsService) DeleteEnvSecret(arg0 context.Context, arg1 int, arg2, arg3 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvSecret", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvSecret indicates an expected call of DeleteEnvSecret.
func (mr *MockActionsServiceMockRecorder) DeleteEnvSecret(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvSecret", reflect.TypeOf((*MockActionsService)(nil).DeleteEnvSecret), arg0, arg1, arg2, arg3)
}

// DeleteOrgSecret mocks base method.
func (m *MockActionsService) DeleteOrgSecret(arg0 context.Context, arg1, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrgSecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrgSecret indicates an expected call of DeleteOrgSecret.
func (mr *MockActionsServiceMockRecorder) DeleteOrgSecret(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrgSecret", reflect.TypeOf((*MockActionsService)(nil).DeleteOrgSecret), arg0, arg1, arg2)
}

// DeleteOrganizationRunnerGroup mocks base method.
func (m *MockActionsService) DeleteOrganizationRunnerGroup(arg0 context.Context, arg1 string, arg2 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganizationRunnerGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrganizationRunnerGroup indicates an expected call of DeleteOrganizationRunnerGroup.
func (mr *MockActionsServiceMockRecorder) DeleteOrganizationRunnerGroup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganizationRunnerGroup", reflect.TypeOf((*MockActionsService)(nil).DeleteOrganizationRunnerGroup), arg0, arg1, arg2)
}

// DeleteRepoSecret mocks base method.
func (m *MockActionsService) DeleteRepoSecret(arg0 context.Context, arg1, arg2, arg3 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepoSecret", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRepoSecret indicates an expected call of DeleteRepoSecret.
func (mr *MockActionsServiceMockRecorder) DeleteRepoSecret(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepoSecret", reflect.TypeOf((*MockActionsService)(nil).DeleteRepoSecret), arg0, arg1, arg2, arg3)
}

// DeleteWorkflowRun mocks base method.
func (m *MockActionsService) DeleteWorkflowRun(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkflowRun", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkflowRun indicates an expected call of DeleteWorkflowRun.
func (mr *MockActionsServiceMockRecorder) DeleteWorkflowRun(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflowRun", reflect.TypeOf((*MockActionsService)(nil).DeleteWorkflowRun), arg0, arg1, arg2, arg3)
}

// DeleteWorkflowRunLogs mocks base method.
func (m *MockActionsService) DeleteWorkflowRunLogs(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkflowRunLogs", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkflowRunLogs indicates an expected call of DeleteWorkflowRunLogs.
func (mr *MockActionsServiceMockRecorder) DeleteWorkflowRunLogs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflowRunLogs", reflect.TypeOf((*MockActionsService)(nil).DeleteWorkflowRunLogs), arg0, arg1, arg2, arg3)
}

// DisableWorkflowByFileName mocks base method.
func (m *MockActionsService) DisableWorkflowByFileName(arg0 context.Context, arg1, arg2, arg3 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableWorkflowByFileName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableWorkflowByFileName indicates an expected call of DisableWorkflowByFileName.
func (mr *MockActionsServiceMockRecorder) DisableWorkflowByFileName(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableWorkflowByFileName", reflect.TypeOf((*MockActionsService)(nil).DisableWorkflowByFileName), arg0, arg1, arg2, arg3)
}

// DisableWorkflowByID mocks base method.
func (m *MockActionsService) DisableWorkflowByID(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableWorkflowByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableWorkflowByID indicates an expected call of DisableWorkflowByID.
func (mr *MockActionsServiceMockRecorder) DisableWorkflowByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableWorkflowByID", reflect.TypeOf((*MockActionsService)(nil).DisableWorkflowByID), arg0, arg1, arg2, arg3)
}

// DownloadArtifact mocks base method.
func (m *MockActionsService) DownloadArtifact(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 bool) (*url.URL, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadArtifact", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*url.URL)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DownloadArtifact indicates an expected call of DownloadArtifact.
func (mr *MockActionsServiceMockRecorder) DownloadArtifact(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadArtifact", reflect.TypeOf((*MockActionsService)(nil).DownloadArtifact), arg0, arg1, arg2, arg3, arg4)
}

// EnableWorkflowByFileName mocks base method.
func (m *MockActionsService) EnableWorkflowByFileName(arg0 context.Context, arg1, arg2, arg3 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableWorkflowByFileName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableWorkflowByFileName indicates an expected call of EnableWorkflowByFileName.
func (mr *MockActionsServiceMockRecorder) EnableWorkflowByFileName(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableWorkflowByFileName", reflect.TypeOf((*MockActionsService)(nil).EnableWorkflowByFileName), arg0, arg1, arg2, arg3)
}

// EnableWorkflowByID mocks base method.
func (m *MockActionsService) EnableWorkflowByID(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableWorkflowByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableWorkflowByID indicates an expected call of EnableWorkflowByID.
func (mr *MockActionsServiceMockRecorder) EnableWorkflowByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableWorkflowByID", reflect.TypeOf((*MockActionsService)(nil).EnableWorkflowByID), arg0, arg1, arg2, arg3)
}

// GetArtifact mocks base method.
func (m *MockActionsService) GetArtifact(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Artifact, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifact", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Artifact)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetArtifact indicates an expected call of GetArtifact.
func (mr *MockActionsServiceMockRecorder) GetArtifact(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifact", reflect.TypeOf((*MockActionsService)(nil).GetArtifact), arg0, arg1, arg2, arg3)
}

// GetEnvPublicKey mocks base method.
func (m *MockActionsService) GetEnvPublicKey(arg0 context.Context, arg1 int, arg2 string) (*github.PublicKey, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvPublicKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.PublicKey)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEnvPublicKey indicates an expected call of GetEnvPublicKey.
func (mr *MockActionsServiceMockRecorder) GetEnvPublicKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvPublicKey", reflect.TypeOf((*MockActionsService)(nil).GetEnvPublicKey), arg0, arg1, arg2)
}

// GetEnvSecret mocks base method.
func (m *MockActionsService) GetEnvSecret(arg0 context.Context, arg1 int, arg2, arg3 string) (*github.Secret, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvSecret", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Secret)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEnvSecret indicates an expected call of GetEnvSecret.
func (mr *MockActionsServiceMockRecorder) GetEnvSecret(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvSecret", reflect.TypeOf((*MockActionsService)(nil).GetEnvSecret), arg0, arg1, arg2, arg3)
}

// GetOrgPublicKey mocks base method.
func (m *MockActionsService) GetOrgPublicKey(arg0 context.Context, arg1 string) (*github.PublicKey, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrgPublicKey", arg0, arg1)
	ret0, _ := ret[0].(*github.PublicKey)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrgPublicKey indicates an expected call of GetOrgPublicKey.
func (mr *MockActionsServiceMockRecorder) GetOrgPublicKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgPublicKey", reflect.TypeOf((*MockActionsService)(nil).GetOrgPublicKey), arg0, arg1)
}

// GetOrgSecret mocks base method.
func (m *MockActionsService) GetOrgSecret(arg0 context.Context, arg1, arg2 string) (*github.Secret, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrgSecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Secret)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrgSecret indicates an expected call of GetOrgSecret.
func (mr *MockActionsServiceMockRecorder) GetOrgSecret(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgSecret", reflect.TypeOf((*MockActionsService)(nil).GetOrgSecret), arg0, arg1, arg2)
}

// GetOrganizationRunner mocks base method.
func (m *MockActionsService) GetOrganizationRunner(arg0 context.Context, arg1 string, arg2 int64) (*github.Runner, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationRunner", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Runner)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrganizationRunner indicates an expected call of GetOrganizationRunner.
func (mr *MockActionsServiceMockRecorder) GetOrganizationRunner(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationRunner", reflect.TypeOf((*MockActionsService)(nil).GetOrganizationRunner), arg0, arg1, arg2)
}

// GetOrganizationRunnerGroup mocks base method.
func (m *MockActionsService) GetOrganizationRunnerGroup(arg0 context.Context, arg1 string, arg2 int64) (*github.RunnerGroup, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationRunnerGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.RunnerGroup)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrganizationRunnerGroup indicates an expected call of GetOrganizationRunnerGroup.
func (mr *MockActionsServiceMockRecorder) GetOrganizationRunnerGroup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationRunnerGroup", reflect.TypeOf((*MockActionsService)(nil).GetOrganizationRunnerGroup), arg0, arg1, arg2)
}

// GetRepoPublicKey mocks base method.
func (m *MockActionsService) GetRepoPublicKey(arg0 context.Context, arg1, arg2 string) (*github.PublicKey, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoPublicKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.PublicKey)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRepoPublicKey indicates an expected call of GetRepoPublicKey.
func (mr *MockActionsServiceMockRecorder) GetRepoPublicKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoPublicKey", reflect.TypeOf((*MockActionsService)(nil).GetRepoPublicKey), arg0, arg1, arg2)
}

// GetRepoSecret mocks base method.
func (m *MockActionsService) GetRepoSecret(arg0 context.Context, arg1, arg2, arg3 string) (*github.Secret, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoSecret", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Secret)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRepoSecret indicates an expected call of GetRepoSecret.
func (mr *MockActionsServiceMockRecorder) GetRepoSecret(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoSecret", reflect.TypeOf((*MockActionsService)(nil).GetRepoSecret), arg0, arg1, arg2, arg3)
}

// GetRunner mocks base method.
func (m *MockActionsService) GetRunner(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Runner, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunner", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Runner)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRunner indicates an expected call of GetRunner.
func (mr *MockActionsServiceMockRecorder) GetRunner(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunner", reflect.TypeOf((*MockActionsService)(nil).GetRunner), arg0, arg1, arg2, arg3)
}

// GetWorkflowByFileName mocks base method.
func (m *MockActionsService) GetWorkflowByFileName(arg0 context.Context, arg1, arg2, arg3 string) (*github.Workflow, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowByFileName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Workflow)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWorkflowByFileName indicates an expected call of GetWorkflowByFileName.
func (mr *MockActionsServiceMockRecorder) GetWorkflowByFileName(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowByFileName", reflect.TypeOf((*MockActionsService)(nil).GetWorkflowByFileName), arg0, arg1, arg2, arg3)
}

// GetWorkflowByID mocks base method.
func (m *MockActionsService) GetWorkflowByID(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Workflow, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Workflow)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWorkflowByID indicates an expected call of GetWorkflowByID.
func (mr *MockActionsServiceMockRecorder) GetWorkflowByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowByID", reflect.TypeOf((*MockActionsService)(nil).GetWorkflowByID), arg0, arg1, arg2, arg3)
}

// GetWorkflowJobByID mocks base method.
func (m *MockActionsService) GetWorkflowJobByID(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.WorkflowJob, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowJobByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.WorkflowJob)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWorkflowJobByID indicates an expected call of GetWorkflowJobByID.
func (mr *MockActionsServiceMockRecorder) GetWorkflowJobByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowJobByID", reflect.TypeOf((*MockActionsService)(nil).GetWorkflowJobByID), arg0, arg1, arg2, arg3)
}

// GetWorkflowJobLogs mocks base method.
func (m *MockActionsService) GetWorkflowJobLogs(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 bool) (*url.URL, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowJobLogs", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*url.URL)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWorkflowJobLogs indicates an expected call of GetWorkflowJobLogs.
func (mr *MockActionsServiceMockRecorder) GetWorkflowJobLogs(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowJobLogs", reflect.TypeOf((*MockActionsService)(nil).GetWorkflowJobLogs), arg0, arg1, arg2, arg3, arg4)
}

// GetWorkflowRunAttempt mocks base method.
func (m *MockActionsService) GetWorkflowRunAttempt(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 int, arg5 *github.WorkflowRunAttemptOptions) (*github.WorkflowRun, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowRunAttempt", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*github.WorkflowRun)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWorkflowRunAttempt indicates an expected call of GetWorkflowRunAttempt.
func (mr *MockActionsServiceMockRecorder) GetWorkflowRunAttempt(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowRunAttempt", reflect.TypeOf((*MockActionsService)(nil).GetWorkflowRunAttempt), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetWorkflowRunByID mocks base method.
func (m *MockActionsService) GetWorkflowRunByID(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.WorkflowRun, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowRunByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.WorkflowRun)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWorkflowRunByID indicates an expected call of GetWorkflowRunByID.
func (mr *MockActionsServiceMockRecorder) GetWorkflowRunByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowRunByID", reflect.TypeOf((*MockActionsService)(nil).GetWorkflowRunByID), arg0, arg1, arg2, arg3)
}

// GetWorkflowRunLogs mocks base method.
func (m *MockActionsService) GetWorkflowRunLogs(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 bool) (*url.URL, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowRunLogs", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*url.URL)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWorkflowRunLogs indicates an expected call of GetWorkflowRunLogs.
func (mr *MockActionsServiceMockRecorder) GetWorkflowRunLogs(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowRunLogs", reflect.TypeOf((*MockActionsService)(nil).GetWorkflowRunLogs), arg0, arg1, arg2, arg3, arg4)
}

// GetWorkflowRunUsageByID mocks base method.
func (m *MockActionsService) GetWorkflowRunUsageByID(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.WorkflowRunUsage, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowRunUsageByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.WorkflowRunUsage)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWorkflowRunUsageByID indicates an expected call of GetWorkflowRunUsageByID.
func (mr *MockActionsServiceMockRecorder) GetWorkflowRunUsageByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowRunUsageByID", reflect.TypeOf((*MockActionsService)(nil).GetWorkflowRunUsageByID), arg0, arg1, arg2, arg3)
}

// GetWorkflowUsageByFileName mocks base method.
func (m *MockActionsService) GetWorkflowUsageByFileName(arg0 context.Context, arg1, arg2, arg3 string) (*github.WorkflowUsage, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowUsageByFileName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.WorkflowUsage)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWorkflowUsageByFileName indicates an expected call of GetWorkflowUsageByFileName.
func (mr *MockActionsServiceMockRecorder) GetWorkflowUsageByFileName(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowUsageByFileName", reflect.TypeOf((*MockActionsService)(nil).GetWorkflowUsageByFileName), arg0, arg1, arg2, arg3)
}

// GetWorkflowUsageByID mocks base method.
func (m *MockActionsService) GetWorkflowUsageByID(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.WorkflowUsage, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowUsageByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.WorkflowUsage)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWorkflowUsageByID indicates an expected call of GetWorkflowUsageByID.
func (mr *MockActionsServiceMockRecorder) GetWorkflowUsageByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowUsageByID", reflect.TypeOf((*MockActionsService)(nil).GetWorkflowUsageByID), arg0, arg1, arg2, arg3)
}

// ListArtifacts mocks base method.
func (m *MockActionsService) ListArtifacts(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) (*github.ArtifactList, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArtifacts", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.ArtifactList)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListArtifacts indicates an expected call of ListArtifacts.
func (mr *MockActionsServiceMockRecorder) ListArtifacts(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArtifacts", reflect.TypeOf((*MockActionsService)(nil).ListArtifacts), arg0, arg1, arg2, arg3)
}

// ListEnabledReposInOrg mocks base method.
func (m *MockActionsService) ListEnabledReposInOrg(arg0 context.Context, arg1 string, arg2 *github.ListOptions) (*github.ActionsEnabledOnOrgRepos, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnabledReposInOrg", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.ActionsEnabledOnOrgRepos)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEnabledReposInOrg indicates an expected call of ListEnabledReposInOrg.
func (mr *MockActionsServiceMockRecorder) ListEnabledReposInOrg(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnabledReposInOrg", reflect.TypeOf((*MockActionsService)(nil).ListEnabledReposInOrg), arg0, arg1, arg2)
}

// ListEnvSecrets mocks base method.
func (m *MockActionsService) ListEnvSecrets(arg0 context.Context, arg1 int, arg2 string, arg3 *github.ListOptions) (*github.Secrets, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvSecrets", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Secrets)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEnvSecrets indicates an expected call of ListEnvSecrets.
func (mr *MockActionsServiceMockRecorder) ListEnvSecrets(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvSecrets", reflect.TypeOf((*MockActionsService)(nil).ListEnvSecrets), arg0, arg1, arg2, arg3)
}

// ListOrgSecrets mocks base method.
func (m *MockActionsService) ListOrgSecrets(arg0 context.Context, arg1 string, arg2 *github.ListOptions) (*github.Secrets, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrgSecrets", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Secrets)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrgSecrets indicates an expected call of ListOrgSecrets.
func (mr *MockActionsServiceMockRecorder) ListOrgSecrets(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrgSecrets", reflect.TypeOf((*MockActionsService)(nil).ListOrgSecrets), arg0, arg1, arg2)
}

// ListOrganizationRunnerApplicationDownloads mocks base method.
func (m *MockActionsService) ListOrganizationRunnerApplicationDownloads(arg0 context.Context, arg1 string) ([]*github.RunnerApplicationDownload, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationRunnerApplicationDownloads", arg0, arg1)
	ret0, _ := ret[0].([]*github.RunnerApplicationDownload)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrganizationRunnerApplicationDownloads indicates an expected call of ListOrganizationRunnerApplicationDownloads.
func (mr *MockActionsServiceMockRecorder) ListOrganizationRunnerApplicationDownloads(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationRunnerApplicationDownloads", reflect.TypeOf((*MockActionsService)(nil).ListOrganizationRunnerApplicationDownloads), arg0, arg1)
}

// ListOrganizationRunnerGroups mocks base method.
func (m *MockActionsService) ListOrganizationRunnerGroups(arg0 context.Context, arg1 string, arg2 *github.ListOrgRunnerGroupOptions) (*github.RunnerGroups, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationRunnerGroups", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.RunnerGroups)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrganizationRunnerGroups indicates an expected call of ListOrganizationRunnerGroups.
func (mr *MockActionsServiceMockRecorder) ListOrganizationRunnerGroups(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationRunnerGroups", reflect.TypeOf((*MockActionsService)(nil).ListOrganizationRunnerGroups), arg0, arg1, arg2)
}

// ListOrganizationRunners mocks base method.
func (m *MockActionsService) ListOrganizationRunners(arg0 context.Context, arg1 string, arg2 *github.ListOptions) (*github.Runners, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationRunners", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Runners)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrganizationRunners indicates an expected call of ListOrganizationRunners.
func (mr *MockActionsServiceMockRecorder) ListOrganizationRunners(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationRunners", reflect.TypeOf((*MockActionsService)(nil).ListOrganizationRunners), arg0, arg1, arg2)
}

// ListRepoSecrets mocks base method.
func (m *MockActionsService) ListRepoSecrets(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) (*github.Secrets, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepoSecrets", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Secrets)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRepoSecrets indicates an expected call of ListRepoSecrets.
func (mr *MockActionsServiceMockRecorder) ListRepoSecrets(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepoSecrets", reflect.TypeOf((*MockActionsService)(nil).ListRepoSecrets), arg0, arg1, arg2, arg3)
}

// ListRepositoryAccessRunnerGroup mocks base method.
func (m *MockActionsService) ListRepositoryAccessRunnerGroup(arg0 context.Context, arg1 string, arg2 int64, arg3 *github.ListOptions) (*github.ListRepositories, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoryAccessRunnerGroup", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.ListRepositories)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRepositoryAccessRunnerGroup indicates an expected call of ListRepositoryAccessRunnerGroup.
func (mr *MockActionsServiceMockRecorder) ListRepositoryAccessRunnerGroup(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoryAccessRunnerGroup", reflect.TypeOf((*MockActionsService)(nil).ListRepositoryAccessRunnerGroup), arg0, arg1, arg2, arg3)
}

// ListRepositoryWorkflowRuns mocks base method.
func (m *MockActionsService) ListRepositoryWorkflowRuns(arg0 context.Context, arg1, arg2 string, arg3 *github.ListWorkflowRunsOptions) (*github.WorkflowRuns, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoryWorkflowRuns", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.WorkflowRuns)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRepositoryWorkflowRuns indicates an expected call of ListRepositoryWorkflowRuns.
func (mr *MockActionsServiceMockRecorder) ListRepositoryWorkflowRuns(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoryWorkflowRuns", reflect.TypeOf((*MockActionsService)(nil).ListRepositoryWorkflowRuns), arg0, arg1, arg2, arg3)
}

// ListRunnerApplicationDownloads mocks base method.
func (m *MockActionsService) ListRunnerApplicationDownloads(arg0 context.Context, arg1, arg2 string) ([]*github.RunnerApplicationDownload, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunnerApplicationDownloads", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.RunnerApplicationDownload)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRunnerApplicationDownloads indicates an expected call of ListRunnerApplicationDownloads.
func (mr *MockActionsServiceMockRecorder) ListRunnerApplicationDownloads(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunnerApplicationDownloads", reflect.TypeOf((*MockActionsService)(nil).ListRunnerApplicationDownloads), arg0, arg1, arg2)
}

// ListRunnerGroupRunners mocks base method.
func (m *MockActionsService) ListRunnerGroupRunners(arg0 context.Context, arg1 string, arg2 int64, arg3 *github.ListOptions) (*github.Runners, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunnerGroupRunners", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Runners)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRunnerGroupRunners indicates an expected call of ListRunnerGroupRunners.
func (mr *MockActionsServiceMockRecorder) ListRunnerGroupRunners(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunnerGroupRunners", reflect.TypeOf((*MockActionsService)(nil).ListRunnerGroupRunners), arg0, arg1, arg2, arg3)
}

// ListRunners mocks base method.
func (m *MockActionsService) ListRunners(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) (*github.Runners, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunners", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Runners)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRunners indicates an expected call of ListRunners.
func (mr *MockActionsServiceMockRecorder) ListRunners(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunners", reflect.TypeOf((*MockActionsService)(nil).ListRunners), arg0, arg1, arg2, arg3)
}

// ListSelectedReposForOrgSecret mocks base method.
func (m *MockActionsService) ListSelectedReposForOrgSecret(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) (*github.SelectedReposList, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSelectedReposForOrgSecret", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.SelectedReposList)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSelectedReposForOrgSecret indicates an expected call of ListSelectedReposForOrgSecret.
func (mr *MockActionsServiceMockRecorder) ListSelectedReposForOrgSecret(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSelectedReposForOrgSecret", reflect.TypeOf((*MockActionsService)(nil).ListSelectedReposForOrgSecret), arg0, arg1, arg2, arg3)
}

// ListWorkflowJobs mocks base method.
func (m *MockActionsService) ListWorkflowJobs(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 *github.ListWorkflowJobsOptions) (*github.Jobs, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflowJobs", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Jobs)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListWorkflowJobs indicates an expected call of ListWorkflowJobs.
func (mr *MockActionsServiceMockRecorder) ListWorkflowJobs(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowJobs", reflect.TypeOf((*MockActionsService)(nil).ListWorkflowJobs), arg0, arg1, arg2, arg3, arg4)
}

// ListWorkflowRunArtifacts mocks base method.
func (m *MockActionsService) ListWorkflowRunArtifacts(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 *github.ListOptions) (*github.ArtifactList, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflowRunArtifacts", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.ArtifactList)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListWorkflowRunArtifacts indicates an expected call of ListWorkflowRunArtifacts.
func (mr *MockActionsServiceMockRecorder) ListWorkflowRunArtifacts(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowRunArtifacts", reflect.TypeOf((*MockActionsService)(nil).ListWorkflowRunArtifacts), arg0, arg1, arg2, arg3, arg4)
}

// ListWorkflowRunsByFileName mocks base method.
func (m *MockActionsService) ListWorkflowRunsByFileName(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.ListWorkflowRunsOptions) (*github.WorkflowRuns, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflowRunsByFileName", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.WorkflowRuns)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListWorkflowRunsByFileName indicates an expected call of ListWorkflowRunsByFileName.
func (mr *MockActionsServiceMockRecorder) ListWorkflowRunsByFileName(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowRunsByFileName", reflect.TypeOf((*MockActionsService)(nil).ListWorkflowRunsByFileName), arg0, arg1, arg2, arg3, arg4)
}

// ListWorkflowRunsByID mocks base method.
func (m *MockActionsService) ListWorkflowRunsByID(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 *github.ListWorkflowRunsOptions) (*github.WorkflowRuns, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflowRunsByID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.WorkflowRuns)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListWorkflowRunsByID indicates an expected call of ListWorkflowRunsByID.
func (mr *MockActionsServiceMockRecorder) ListWorkflowRunsByID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowRunsByID", reflect.TypeOf((*MockActionsService)(nil).ListWorkflowRunsByID), arg0, arg1, arg2, arg3, arg4)
}

// ListWorkflows mocks base method.
func (m *MockActionsService) ListWorkflows(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) (*github.Workflows, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflows", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Workflows)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListWorkflows indicates an expected call of ListWorkflows.
func (mr *MockActionsServiceMockRecorder) ListWorkflows(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflows", reflect.TypeOf((*MockActionsService)(nil).ListWorkflows), arg0, arg1, arg2, arg3)
}

// PendingDeployments mocks base method.
func (m *MockActionsService) PendingDeployments(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 *github.PendingDeploymentsRequest) ([]*github.Deployment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingDeployments", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.Deployment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PendingDeployments indicates an expected call of PendingDeployments.
func (mr *MockActionsServiceMockRecorder) PendingDeployments(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingDeployments", reflect.TypeOf((*MockActionsService)(nil).PendingDeployments), arg0, arg1, arg2, arg3, arg4)
}

// RemoveEnabledRepoInOrg mocks base method.
func (m *MockActionsService) RemoveEnabledRepoInOrg(arg0 context.Context, arg1 string, arg2 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveEnabledRepoInOrg", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveEnabledRepoInOrg indicates an expected call of RemoveEnabledRepoInOrg.
func (mr *MockActionsServiceMockRecorder) RemoveEnabledRepoInOrg(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEnabledRepoInOrg", reflect.TypeOf((*MockActionsService)(nil).RemoveEnabledRepoInOrg), arg0, arg1, arg2)
}

// RemoveOrganizationRunner mocks base method.
func (m *MockActionsService) RemoveOrganizationRunner(arg0 context.Context, arg1 string, arg2 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOrganizationRunner", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveOrganizationRunner indicates an expected call of RemoveOrganizationRunner.
func (mr *MockActionsServiceMockRecorder) RemoveOrganizationRunner(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOrganizationRunner", reflect.TypeOf((*MockActionsService)(nil).RemoveOrganizationRunner), arg0, arg1, arg2)
}

// RemoveRepositoryAccessRunnerGroup mocks base method.
func (m *MockActionsService) RemoveRepositoryAccessRunnerGroup(arg0 context.Context, arg1 string, arg2, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRepositoryAccessRunnerGroup", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRepositoryAccessRunnerGroup indicates an expected call of RemoveRepositoryAccessRunnerGroup.
func (mr *MockActionsServiceMockRecorder) RemoveRepositoryAccessRunnerGroup(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRepositoryAccessRunnerGroup", reflect.TypeOf((*MockActionsService)(nil).RemoveRepositoryAccessRunnerGroup), arg0, arg1, arg2, arg3)
}

// RemoveRunner mocks base method.
func (m *MockActionsService) RemoveRunner(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRunner", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRunner indicates an expected call of RemoveRunner.
func (mr *MockActionsServiceMockRecorder) RemoveRunner(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRunner", reflect.TypeOf((*MockActionsService)(nil).RemoveRunner), arg0, arg1, arg2, arg3)
}

// RemoveRunnerGroupRunners mocks base method.
func (m *MockActionsService) RemoveRunnerGroupRunners(arg0 context.Context, arg1 string, arg2, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRunnerGroupRunners", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRunnerGroupRunners indicates an expected call of RemoveRunnerGroupRunners.
func (mr *MockActionsServiceMockRecorder) RemoveRunnerGroupRunners(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRunnerGroupRunners", reflect.TypeOf((*MockActionsService)(nil).RemoveRunnerGroupRunners), arg0, arg1, arg2, arg3)
}

// RemoveSelectedRepoFromOrgSecret mocks base method.
func (m *MockActionsService) RemoveSelectedRepoFromOrgSecret(arg0 context.Context, arg1, arg2 string, arg3 *github.Repository) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSelectedRepoFromOrgSecret", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveSelectedRepoFromOrgSecret indicates an expected call of RemoveSelectedRepoFromOrgSecret.
func (mr *MockActionsServiceMockRecorder) RemoveSelectedRepoFromOrgSecret(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSelectedRepoFromOrgSecret", reflect.TypeOf((*MockActionsService)(nil).RemoveSelectedRepoFromOrgSecret), arg0, arg1, arg2, arg3)
}

// RerunFailedJobsByID mocks base method.
func (m *MockActionsService) RerunFailedJobsByID(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RerunFailedJobsByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RerunFailedJobsByID indicates an expected call of RerunFailedJobsByID.
func (mr *MockActionsServiceMockRecorder) RerunFailedJobsByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RerunFailedJobsByID", reflect.TypeOf((*MockActionsService)(nil).RerunFailedJobsByID), arg0, arg1, arg2, arg3)
}

// RerunJobByID mocks base method.
func (m *MockActionsService) RerunJobByID(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RerunJobByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RerunJobByID indicates an expected call of RerunJobByID.
func (mr *MockActionsServiceMockRecorder) RerunJobByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RerunJobByID", reflect.TypeOf((*MockActionsService)(nil).RerunJobByID), arg0, arg1, arg2, arg3)
}

// RerunWorkflowByID mocks base method.
func (m *MockActionsService) RerunWorkflowByID(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RerunWorkflowByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RerunWorkflowByID indicates an expected call of RerunWorkflowByID.
func (mr *MockActionsServiceMockRecorder) RerunWorkflowByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RerunWorkflowByID", reflect.TypeOf((*MockActionsService)(nil).RerunWorkflowByID), arg0, arg1, arg2, arg3)
}

// SetEnabledReposInOrg mocks base method.
func (m *MockActionsService) SetEnabledReposInOrg(arg0 context.Context, arg1 string, arg2 []int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEnabledReposInOrg", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetEnabledReposInOrg indicates an expected call of SetEnabledReposInOrg.
func (mr *MockActionsServiceMockRecorder) SetEnabledReposInOrg(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEnabledReposInOrg", reflect.TypeOf((*MockActionsService)(nil).SetEnabledReposInOrg), arg0, arg1, arg2)
}

// SetRepositoryAccessRunnerGroup mocks base method.
func (m *MockActionsService) SetRepositoryAccessRunnerGroup(arg0 context.Context, arg1 string, arg2 int64, arg3 github.SetRepoAccessRunnerGroupRequest) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRepositoryAccessRunnerGroup", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRepositoryAccessRunnerGroup indicates an expected call of SetRepositoryAccessRunnerGroup.
func (mr *MockActionsServiceMockRecorder) SetRepositoryAccessRunnerGroup(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRepositoryAccessRunnerGroup", reflect.TypeOf((*MockActionsService)(nil).SetRepositoryAccessRunnerGroup), arg0, arg1, arg2, arg3)
}

// SetRunnerGroupRunners mocks base method.
func (m *MockActionsService) SetRunnerGroupRunners(arg0 context.Context, arg1 string, arg2 int64, arg3 github.SetRunnerGroupRunnersRequest) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRunnerGroupRunners", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRunnerGroupRunners indicates an expected call of SetRunnerGroupRunners.
func (mr *MockActionsServiceMockRecorder) SetRunnerGroupRunners(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRunnerGroupRunners", reflect.TypeOf((*MockActionsService)(nil).SetRunnerGroupRunners), arg0, arg1, arg2, arg3)
}

// SetSelectedReposForOrgSecret mocks base method.
func (m *MockActionsService) SetSelectedReposForOrgSecret(arg0 context.Context, arg1, arg2 string, arg3 github.SelectedRepoIDs) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSelectedReposForOrgSecret", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSelectedReposForOrgSecret indicates an expected call of SetSelectedReposForOrgSecret.
func (mr *MockActionsServiceMockRecorder) SetSelectedReposForOrgSecret(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSelectedReposForOrgSecret", reflect.TypeOf((*MockActionsService)(nil).SetSelectedReposForOrgSecret), arg0, arg1, arg2, arg3)
}

// UpdateOrganizationRunnerGroup mocks base method.
func (m *MockActionsService) UpdateOrganizationRunnerGroup(arg0 context.Context, arg1 string, arg2 int64, arg3 github.UpdateRunnerGroupRequest) (*github.RunnerGroup, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganizationRunnerGroup", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.RunnerGroup)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateOrganizationRunnerGroup indicates an expected call of UpdateOrganizationRunnerGroup.
func (mr *MockActionsServiceMockRecorder) UpdateOrganizationRunnerGroup(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationRunnerGroup", reflect.TypeOf((*MockActionsService)(nil).UpdateOrganizationRunnerGroup), arg0, arg1, arg2, arg3)
}

// MockActivityService is a mock of ActivityService interface.
type MockActivityService struct {
	ctrl     *gomock.Controller
	recorder *MockActivityServiceMockRecorder
}

// MockActivityServiceMockRecorder is the mock recorder for MockActivityService.
type MockActivityServiceMockRecorder struct {
	mock *MockActivityService
}

// NewMockActivityService creates a new mock instance.
func NewMockActivityService(ctrl *gomock.Controller) *MockActivityService {
	mock := &MockActivityService{ctrl: ctrl}
	mock.recorder = &MockActivityServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActivityService) EXPECT() *MockActivityServiceMockRecorder {
	return m.recorder
}

// DeleteRepositorySubscription mocks base method.
func (m *MockActivityService) DeleteRepositorySubscription(arg0 context.Context, arg1, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepositorySubscription", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRepositorySubscription indicates an expected call of DeleteRepositorySubscription.
func (mr *MockActivityServiceMockRecorder) DeleteRepositorySubscription(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepositorySubscription", reflect.TypeOf((*MockActivityService)(nil).DeleteRepositorySubscription), arg0, arg1, arg2)
}

// DeleteThreadSubscription mocks base method.
func (m *MockActivityService) DeleteThreadSubscription(arg0 context.Context, arg1 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteThreadSubscription", arg0, arg1)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteThreadSubscription indicates an expected call of DeleteThreadSubscription.
func (mr *MockActivityServiceMockRecorder) DeleteThreadSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteThreadSubscription", reflect.TypeOf((*MockActivityService)(nil).DeleteThreadSubscription), arg0, arg1)
}

// GetRepositorySubscription mocks base method.
func (m *MockActivityService) GetRepositorySubscription(arg0 context.Context, arg1, arg2 string) (*github.Subscription, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositorySubscription", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Subscription)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRepositorySubscription indicates an expected call of GetRepositorySubscription.
func (mr *MockActivityServiceMockRecorder) GetRepositorySubscription(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositorySubscription", reflect.TypeOf((*MockActivityService)(nil).GetRepositorySubscription), arg0, arg1, arg2)
}

// GetThread mocks base method.
func (m *MockActivityService) GetThread(arg0 context.Context, arg1 string) (*github.Notification, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThread", arg0, arg1)
	ret0, _ := ret[0].(*github.Notification)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetThread indicates an expected call of GetThread.
func (mr *MockActivityServiceMockRecorder) GetThread(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThread", reflect.TypeOf((*MockActivityService)(nil).GetThread), arg0, arg1)
}

// GetThreadSubscription mocks base method.
func (m *MockActivityService) GetThreadSubscription(arg0 context.Context, arg1 string) (*github.Subscription, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThreadSubscription", arg0, arg1)
	ret0, _ := ret[0].(*github.Subscription)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetThreadSubscription indicates an expected call of GetThreadSubscription.
func (mr *MockActivityServiceMockRecorder) GetThreadSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThreadSubscription", reflect.TypeOf((*MockActivityService)(nil).GetThreadSubscription), arg0, arg1)
}

// IsStarred mocks base method.
func (m *MockActivityService) IsStarred(arg0 context.Context, arg1, arg2 string) (bool, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStarred", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsStarred indicates an expected call of IsStarred.
func (mr *MockActivityServiceMockRecorder) IsStarred(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStarred", reflect.TypeOf((*MockActivityService)(nil).IsStarred), arg0, arg1, arg2)
}

// ListEvents mocks base method.
func (m *MockActivityService) ListEvents(arg0 context.Context, arg1 *github.ListOptions) ([]*github.Event, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvents", arg0, arg1)
	ret0, _ := ret[0].([]*github.Event)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEvents indicates an expected call of ListEvents.
func (mr *MockActivityServiceMockRecorder) ListEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvents", reflect.TypeOf((*MockActivityService)(nil).ListEvents), arg0, arg1)
}

// ListEventsForOrganization mocks base method.
func (m *MockActivityService) ListEventsForOrganization(arg0 context.Context, arg1 string, arg2 *github.ListOptions) ([]*github.Event, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventsForOrganization", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.Event)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEventsForOrganization indicates an expected call of ListEventsForOrganization.
func (mr *MockActivityServiceMockRecorder) ListEventsForOrganization(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventsForOrganization", reflect.TypeOf((*MockActivityService)(nil).ListEventsForOrganization), arg0, arg1, arg2)
}

// ListEventsForRepoNetwork mocks base method.
func (m *MockActivityService) ListEventsForRepoNetwork(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) ([]*github.Event, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventsForRepoNetwork", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.Event)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEventsForRepoNetwork indicates an expected call of ListEventsForRepoNetwork.
func (mr *MockActivityServiceMockRecorder) ListEventsForRepoNetwork(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventsForRepoNetwork", reflect.TypeOf((*MockActivityService)(nil).ListEventsForRepoNetwork), arg0, arg1, arg2, arg3)
}

// ListEventsPerformedByUser mocks base method.
func (m *MockActivityService) ListEventsPerformedByUser(arg0 context.Context, arg1 string, arg2 bool, arg3 *github.ListOptions) ([]*github.Event, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventsPerformedByUser", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.Event)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEventsPerformedByUser indicates an expected call of ListEventsPerformedByUser.
func (mr *MockActivityServiceMockRecorder) ListEventsPerformedByUser(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventsPerformedByUser", reflect.TypeOf((*MockActivityService)(nil).ListEventsPerformedByUser), arg0, arg1, arg2, arg3)
}

// ListEventsReceivedByUser mocks base method.
func (m *MockActivityService) ListEventsReceivedByUser(arg0 context.Context, arg1 string, arg2 bool, arg3 *github.ListOptions) ([]*github.Event, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventsReceivedByUser", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.Event)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEventsReceivedByUser indicates an expected call of ListEventsReceivedByUser.
func (mr *MockActivityServiceMockRecorder) ListEventsReceivedByUser(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventsReceivedByUser", reflect.TypeOf((*MockActivityService)(nil).ListEventsReceivedByUser), arg0, arg1, arg2, arg3)
}

// ListFeeds mocks base method.
func (m *MockActivityService) ListFeeds(arg0 context.Context) (*github.Feeds, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFeeds", arg0)
	ret0, _ := ret[0].(*github.Feeds)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFeeds indicates an expected call of ListFeeds.
func (mr *MockActivityServiceMockRecorder) ListFeeds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeeds", reflect.TypeOf((*MockActivityService)(nil).ListFeeds), arg0)
}

// ListIssueEventsForRepository mocks base method.
func (m *MockActivityService) ListIssueEventsForRepository(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) ([]*github.IssueEvent, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIssueEventsForRepository", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.IssueEvent)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListIssueEventsForRepository indicates an expected call of ListIssueEventsForRepository.
func (mr *MockActivityServiceMockRecorder) ListIssueEventsForRepository(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssueEventsForRepository", reflect.TypeOf((*MockActivityService)(nil).ListIssueEventsForRepository), arg0, arg1, arg2, arg3)
}

// ListNotifications mocks base method.
func (m *MockActivityService) ListNotifications(arg0 context.Context, arg1 *github.NotificationListOptions) ([]*github.Notification, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotifications", arg0, arg1)
	ret0, _ := ret[0].([]*github.Notification)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListNotifications indicates an expected call of ListNotifications.
func (mr *MockActivityServiceMockRecorder) ListNotifications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotifications", reflect.TypeOf((*MockActivityService)(nil).ListNotifications), arg0, arg1)
}

// ListRepositoryEvents mocks base method.
func (m *MockActivityService) ListRepositoryEvents(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) ([]*github.Event, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoryEvents", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.Event)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRepositoryEvents indicates an expected call of ListRepositoryEvents.
func (mr *MockActivityServiceMockRecorder) ListRepositoryEvents(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoryEvents", reflect.TypeOf((*MockActivityService)(nil).ListRepositoryEvents), arg0, arg1, arg2, arg3)
}

// ListRepositoryNotifications mocks base method.
func (m *MockActivityService) ListRepositoryNotifications(arg0 context.Context, arg1, arg2 string, arg3 *github.NotificationListOptions) ([]*github.Notification, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoryNotifications", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.Notification)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRepositoryNotifications indicates an expected call of ListRepositoryNotifications.
func (mr *MockActivityServiceMockRecorder) ListRepositoryNotifications(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoryNotifications", reflect.TypeOf((*MockActivityService)(nil).ListRepositoryNotifications), arg0, arg1, arg2, arg3)
}

// ListStargazers mocks base method.
func (m *MockActivityService) ListStargazers(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) ([]*github.Stargazer, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStargazers", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.Stargazer)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListStargazers indicates an expected call of ListStargazers.
func (mr *MockActivityServiceMockRecorder) ListStargazers(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStargazers", reflect.TypeOf((*MockActivityService)(nil).ListStargazers), arg0, arg1, arg2, arg3)
}

// ListStarred mocks base method.
func (m *MockActivityService) ListStarred(arg0 context.Context, arg1 string, arg2 *github.ActivityListStarredOptions) ([]*github.StarredRepository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStarred", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.StarredRepository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListStarred indicates an expected call of ListStarred.
func (mr *MockActivityServiceMockRecorder) ListStarred(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStarred", reflect.TypeOf((*MockActivityService)(nil).ListStarred), arg0, arg1, arg2)
}

// ListUserEventsForOrganization mocks base method.
func (m *MockActivityService) ListUserEventsForOrganization(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) ([]*github.Event, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserEventsForOrganization", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.Event)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUserEventsForOrganization indicates an expected call of ListUserEventsForOrganization.
func (mr *MockActivityServiceMockRecorder) ListUserEventsForOrganization(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserEventsForOrganization", reflect.TypeOf((*MockActivityService)(nil).ListUserEventsForOrganization), arg0, arg1, arg2, arg3)
}

// ListWatched mocks base method.
func (m *MockActivityService) ListWatched(arg0 context.Context, arg1 string, arg2 *github.ListOptions) ([]*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWatched", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListWatched indicates an expected call of ListWatched.
func (mr *MockActivityServiceMockRecorder) ListWatched(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWatched", reflect.TypeOf((*MockActivityService)(nil).ListWatched), arg0, arg1, arg2)
}

// ListWatchers mocks base method.
func (m *MockActivityService) ListWatchers(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) ([]*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWatchers", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListWatchers indicates an expected call of ListWatchers.
func (mr *MockActivityServiceMockRecorder) ListWatchers(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWatchers", reflect.TypeOf((*MockActivityService)(nil).ListWatchers), arg0, arg1, arg2, arg3)
}

// MarkNotificationsRead mocks base method.
func (m *MockActivityService) MarkNotificationsRead(arg0 context.Context, arg1 time.Time) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkNotificationsRead", arg0, arg1)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkNotificationsRead indicates an expected call of MarkNotificationsRead.
func (mr *MockActivityServiceMockRecorder) MarkNotificationsRead(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkNotificationsRead", reflect.TypeOf((*MockActivityService)(nil).MarkNotificationsRead), arg0, arg1)
}

// MarkRepositoryNotificationsRead mocks base method.
func (m *MockActivityService) MarkRepositoryNotificationsRead(arg0 context.Context, arg1, arg2 string, arg3 time.Time) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkRepositoryNotificationsRead", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkRepositoryNotificationsRead indicates an expected call of MarkRepositoryNotificationsRead.
func (mr *MockActivityServiceMockRecorder) MarkRepositoryNotificationsRead(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkRepositoryNotificationsRead", reflect.TypeOf((*MockActivityService)(nil).MarkRepositoryNotificationsRead), arg0, arg1, arg2, arg3)
}

// MarkThreadRead mocks base method.
func (m *MockActivityService) MarkThreadRead(arg0 context.Context, arg1 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkThreadRead", arg0, arg1)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkThreadRead indicates an expected call of MarkThreadRead.
func (mr *MockActivityServiceMockRecorder) MarkThreadRead(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkThreadRead", reflect.TypeOf((*MockActivityService)(nil).MarkThreadRead), arg0, arg1)
}

// SetRepositorySubscription mocks base method.
func (m *MockActivityService) SetRepositorySubscription(arg0 context.Context, arg1, arg2 string, arg3 *github.Subscription) (*github.Subscription, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRepositorySubscription", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Subscription)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetRepositorySubscription indicates an expected call of SetRepositorySubscription.
func (mr *MockActivityServiceMockRecorder) SetRepositorySubscription(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRepositorySubscription", reflect.TypeOf((*MockActivityService)(nil).SetRepositorySubscription), arg0, arg1, arg2, arg3)
}

// SetThreadSubscription mocks base method.
func (m *MockActivityService) SetThreadSubscription(arg0 context.Context, arg1 string, arg2 *github.Subscription) (*github.Subscription, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetThreadSubscription", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Subscription)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetThreadSubscription indicates an expected call of SetThreadSubscription.
func (mr *MockActivityServiceMockRecorder) SetThreadSubscription(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetThreadSubscription", reflect.TypeOf((*MockActivityService)(nil).SetThreadSubscription), arg0, arg1, arg2)
}

// Star mocks base method.
func (m *MockActivityService) Star(arg0 context.Context, arg1, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Star", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Star indicates an expected call of Star.
func (mr *MockActivityServiceMockRecorder) Star(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Star", reflect.TypeOf((*MockActivityService)(nil).Star), arg0, arg1, arg2)
}

// Unstar mocks base method.
func (m *MockActivityService) Unstar(arg0 context.Context, arg1, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unstar", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unstar indicates an expected call of Unstar.
func (mr *MockActivityServiceMockRecorder) Unstar(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unstar", reflect.TypeOf((*MockActivityService)(nil).Unstar), arg0, arg1, arg2)
}

// MockAdminService is a mock of AdminService interface.
type MockAdminService struct {
	ctrl     *gomock.Controller
	recorder *MockAdminServiceMockRecorder
}

// MockAdminServiceMockRecorder is the mock recorder for MockAdminService.
type MockAdminServiceMockRecorder struct {
	mock *MockAdminService
}

// NewMockAdminService creates a new mock instance.
func NewMockAdminService(ctrl *gomock.Controller) *MockAdminService {
	mock := &MockAdminService{ctrl: ctrl}
	mock.recorder = &MockAdminServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminService) EXPECT() *MockAdminServiceMockRecorder {
	return m.recorder
}

// CreateOrg mocks base method.
func (m *MockAdminService) CreateOrg(arg0 context.Context, arg1 *github.Organization, arg2 string) (*github.Organization, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrg", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Organization)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateOrg indicates an expected call of CreateOrg.
func (mr *MockAdminServiceMockRecorder) CreateOrg(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrg", reflect.TypeOf((*MockAdminService)(nil).CreateOrg), arg0, arg1, arg2)
}

// CreateUser mocks base method.
func (m *MockAdminService) CreateUser(arg0 context.Context, arg1, arg2 string) (*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAdminServiceMockRecorder) CreateUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAdminService)(nil).CreateUser), arg0, arg1, arg2)
}

// CreateUserImpersonation mocks base method.
func (m *MockAdminService) CreateUserImpersonation(arg0 context.Context, arg1 string, arg2 *github.ImpersonateUserOptions) (*github.UserAuthorization, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserImpersonation", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.UserAuthorization)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateUserImpersonation indicates an expected call of CreateUserImpersonation.
func (mr *MockAdminServiceMockRecorder) CreateUserImpersonation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserImpersonation", reflect.TypeOf((*MockAdminService)(nil).CreateUserImpersonation), arg0, arg1, arg2)
}

// DeleteUser mocks base method.
func (m *MockAdminService) DeleteUser(arg0 context.Context, arg1 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockAdminServiceMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockAdminService)(nil).DeleteUser), arg0, arg1)
}

// DeleteUserImpersonation mocks base method.
func (m *MockAdminService) DeleteUserImpersonation(arg0 context.Context, arg1 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserImpersonation", arg0, arg1)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserImpersonation indicates an expected call of DeleteUserImpersonation.
func (mr *MockAdminServiceMockRecorder) DeleteUserImpersonation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserImpersonation", reflect.TypeOf((*MockAdminService)(nil).DeleteUserImpersonation), arg0, arg1)
}

// GetAdminStats mocks base method.
func (m *MockAdminService) GetAdminStats(arg0 context.Context) (*github.AdminStats, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminStats", arg0)
	ret0, _ := ret[0].(*github.AdminStats)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAdminStats indicates an expected call of GetAdminStats.
func (mr *MockAdminServiceMockRecorder) GetAdminStats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminStats", reflect.TypeOf((*MockAdminService)(nil).GetAdminStats), arg0)
}

// RenameOrg mocks base method.
func (m *MockAdminService) RenameOrg(arg0 context.Context, arg1 *github.Organization, arg2 string) (*github.RenameOrgResponse, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameOrg", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.RenameOrgResponse)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RenameOrg indicates an expected call of RenameOrg.
func (mr *MockAdminServiceMockRecorder) RenameOrg(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameOrg", reflect.TypeOf((*MockAdminService)(nil).RenameOrg), arg0, arg1, arg2)
}

// RenameOrgByName mocks base method.
func (m *MockAdminService) RenameOrgByName(arg0 context.Context, arg1, arg2 string) (*github.RenameOrgResponse, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameOrgByName", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.RenameOrgResponse)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RenameOrgByName indicates an expected call of RenameOrgByName.
func (mr *MockAdminServiceMockRecorder) RenameOrgByName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameOrgByName", reflect.TypeOf((*MockAdminService)(nil).RenameOrgByName), arg0, arg1, arg2)
}

// UpdateTeamLDAPMapping mocks base method.
func (m *MockAdminService) UpdateTeamLDAPMapping(arg0 context.Context, arg1 int64, arg2 *github.TeamLDAPMapping) (*github.TeamLDAPMapping, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeamLDAPMapping", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.TeamLDAPMapping)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateTeamLDAPMapping indicates an expected call of UpdateTeamLDAPMapping.
func (mr *MockAdminServiceMockRecorder) UpdateTeamLDAPMapping(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeamLDAPMapping", reflect.TypeOf((*MockAdminService)(nil).UpdateTeamLDAPMapping), arg0, arg1, arg2)
}

// UpdateUserLDAPMapping mocks base method.
func (m *MockAdminService) UpdateUserLDAPMapping(arg0 context.Context, arg1 string, arg2 *github.UserLDAPMapping) (*github.UserLDAPMapping, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserLDAPMapping", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.UserLDAPMapping)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateUserLDAPMapping indicates an expected call of UpdateUserLDAPMapping.
func (mr *MockAdminServiceMockRecorder) UpdateUserLDAPMapping(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserLDAPMapping", reflect.TypeOf((*MockAdminService)(nil).UpdateUserLDAPMapping), arg0, arg1, arg2)
}

// MockAppsService is a mock of AppsService interface.
type MockAppsService struct {
	ctrl     *gomock.Controller
	recorder *MockAppsServiceMockRecorder
}

// MockAppsServiceMockRecorder is the mock recorder for MockAppsService.
type MockAppsServiceMockRecorder struct {
	mock *MockAppsService
}

// NewMockAppsService creates a new mock instance.
func NewMockAppsService(ctrl *gomock.Controller) *MockAppsService {
	mock := &MockAppsService{ctrl: ctrl}
	mock.recorder = &MockAppsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppsService) EXPECT() *MockAppsServiceMockRecorder {
	return m.recorder
}

// AddRepository mocks base method.
func (m *MockAppsService) AddRepository(arg0 context.Context, arg1, arg2 int64) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRepository", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddRepository indicates an expected call of AddRepository.
func (mr *MockAppsServiceMockRecorder) AddRepository(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRepository", reflect.TypeOf((*MockAppsService)(nil).AddRepository), arg0, arg1, arg2)
}

// CompleteAppManifest mocks base method.
func (m *MockAppsService) CompleteAppManifest(arg0 context.Context, arg1 string) (*github.AppConfig, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteAppManifest", arg0, arg1)
	ret0, _ := ret[0].(*github.AppConfig)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CompleteAppManifest indicates an expected call of CompleteAppManifest.
func (mr *MockAppsServiceMockRecorder) CompleteAppManifest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteAppManifest", reflect.TypeOf((*MockAppsService)(nil).CompleteAppManifest), arg0, arg1)
}

// CreateAttachment mocks base method.
func (m *MockAppsService) CreateAttachment(arg0 context.Context, arg1 int64, arg2, arg3 string) (*github.Attachment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttachment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Attachment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateAttachment indicates an expected call of CreateAttachment.
func (mr *MockAppsServiceMockRecorder) CreateAttachment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttachment", reflect.TypeOf((*MockAppsService)(nil).CreateAttachment), arg0, arg1, arg2, arg3)
}

// CreateInstallationToken mocks base method.
func (m *MockAppsService) CreateInstallationToken(arg0 context.Context, arg1 int64, arg2 *github.InstallationTokenOptions) (*github.InstallationToken, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstallationToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.InstallationToken)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateInstallationToken indicates an expected call of CreateInstallationToken.
func (mr *MockAppsServiceMockRecorder) CreateInstallationToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstallationToken", reflect.TypeOf((*MockAppsService)(nil).CreateInstallationToken), arg0, arg1, arg2)
}

// DeleteInstallation mocks base method.
func (m *MockAppsService) DeleteInstallation(arg0 context.Context, arg1 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstallation", arg0, arg1)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstallation indicates an expected call of DeleteInstallation.
func (mr *MockAppsServiceMockRecorder) DeleteInstallation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstallation", reflect.TypeOf((*MockAppsService)(nil).DeleteInstallation), arg0, arg1)
}

// FindOrganizationInstallation mocks base method.
func (m *MockAppsService) FindOrganizationInstallation(arg0 context.Context, arg1 string) (*github.Installation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrganizationInstallation", arg0, arg1)
	ret0, _ := ret[0].(*github.Installation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindOrganizationInstallation indicates an expected call of FindOrganizationInstallation.
func (mr *MockAppsServiceMockRecorder) FindOrganizationInstallation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrganizationInstallation", reflect.TypeOf((*MockAppsService)(nil).FindOrganizationInstallation), arg0, arg1)
}

// FindRepositoryInstallation mocks base method.
func (m *MockAppsService) FindRepositoryInstallation(arg0 context.Context, arg1, arg2 string) (*github.Installation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRepositoryInstallation", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Installation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindRepositoryInstallation indicates an expected call of FindRepositoryInstallation.
func (mr *MockAppsServiceMockRecorder) FindRepositoryInstallation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRepositoryInstallation", reflect.TypeOf((*MockAppsService)(nil).FindRepositoryInstallation), arg0, arg1, arg2)
}

// FindRepositoryInstallationByID mocks base method.
func (m *MockAppsService) FindRepositoryInstallationByID(arg0 context.Context, arg1 int64) (*github.Installation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRepositoryInstallationByID", arg0, arg1)
	ret0, _ := ret[0].(*github.Installation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindRepositoryInstallationByID indicates an expected call of FindRepositoryInstallationByID.
func (mr *MockAppsServiceMockRecorder) FindRepositoryInstallationByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRepositoryInstallationByID", reflect.TypeOf((*MockAppsService)(nil).FindRepositoryInstallationByID), arg0, arg1)
}

// FindUserInstallation mocks base method.
func (m *MockAppsService) FindUserInstallation(arg0 context.Context, arg1 string) (*github.Installation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserInstallation", arg0, arg1)
	ret0, _ := ret[0].(*github.Installation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindUserInstallation indicates an expected call of FindUserInstallation.
func (mr *MockAppsServiceMockRecorder) FindUserInstallation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserInstallation", reflect.TypeOf((*MockAppsService)(nil).FindUserInstallation), arg0, arg1)
}

// Get mocks base method.
func (m *MockAppsService) Get(arg0 context.Context, arg1 string) (*github.App, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*github.App)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockAppsServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAppsService)(nil).Get), arg0, arg1)
}

// GetHookConfig mocks base method.
func (m *MockAppsService) GetHookConfig(arg0 context.Context) (*github.HookConfig, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHookConfig", arg0)
	ret0, _ := ret[0].(*github.HookConfig)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetHookConfig indicates an expected call of GetHookConfig.
func (mr *MockAppsServiceMockRecorder) GetHookConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHookConfig", reflect.TypeOf((*MockAppsService)(nil).GetHookConfig), arg0)
}

// GetHookDelivery mocks base method.
func (m *MockAppsService) GetHookDelivery(arg0 context.Context, arg1 int64) (*github.HookDelivery, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHookDelivery", arg0, arg1)
	ret0, _ := ret[0].(*github.HookDelivery)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetHookDelivery indicates an expected call of GetHookDelivery.
func (mr *MockAppsServiceMockRecorder) GetHookDelivery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHookDelivery", reflect.TypeOf((*MockAppsService)(nil).GetHookDelivery), arg0, arg1)
}

// GetInstallation mocks base method.
func (m *MockAppsService) GetInstallation(arg0 context.Context, arg1 int64) (*github.Installation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstallation", arg0, arg1)
	ret0, _ := ret[0].(*github.Installation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstallation indicates an expected call of GetInstallation.
func (mr *MockAppsServiceMockRecorder) GetInstallation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstallation", reflect.TypeOf((*MockAppsService)(nil).GetInstallation), arg0, arg1)
}

// ListHookDeliveries mocks base method.
func (m *MockAppsService) ListHookDeliveries(arg0 context.Context, arg1 *github.ListCursorOptions) ([]*github.HookDelivery, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHookDeliveries", arg0, arg1)
	ret0, _ := ret[0].([]*github.HookDelivery)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListHookDeliveries indicates an expected call of ListHookDeliveries.
func (mr *MockAppsServiceMockRecorder) ListHookDeliveries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHookDeliveries", reflect.TypeOf((*MockAppsService)(nil).ListHookDeliveries), arg0, arg1)
}

// ListInstallations mocks base method.
func (m *MockAppsService) ListInstallations(arg0 context.Context, arg1 *github.ListOptions) ([]*github.Installation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstallations", arg0, arg1)
	ret0, _ := ret[0].([]*github.Installation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListInstallations indicates an expected call of ListInstallations.
func (mr *MockAppsServiceMockRecorder) ListInstallations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstallations", reflect.TypeOf((*MockAppsService)(nil).ListInstallations), arg0, arg1)
}

// ListRepos mocks base method.
func (m *MockAppsService) ListRepos(arg0 context.Context, arg1 *github.ListOptions) (*github.ListRepositories, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepos", arg0, arg1)
	ret0, _ := ret[0].(*github.ListRepositories)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRepos indicates an expected call of ListRepos.
func (mr *MockAppsServiceMockRecorder) ListRepos(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepos", reflect.TypeOf((*MockAppsService)(nil).ListRepos), arg0, arg1)
}

// ListUserInstallations mocks base method.
func (m *MockAppsService) ListUserInstallations(arg0 context.Context, arg1 *github.ListOptions) ([]*github.Installation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserInstallations", arg0, arg1)
	ret0, _ := ret[0].([]*github.Installation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUserInstallations indicates an expected call of ListUserInstallations.
func (mr *MockAppsServiceMockRecorder) ListUserInstallations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserInstallations", reflect.TypeOf((*MockAppsService)(nil).ListUserInstallations), arg0, arg1)
}

// ListUserRepos mocks base method.
func (m *MockAppsService) ListUserRepos(arg0 context.Context, arg1 int64, arg2 *github.ListOptions) (*github.ListRepositories, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserRepos", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.ListRepositories)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUserRepos indicates an expected call of ListUserRepos.
func (mr *MockAppsServiceMockRecorder) ListUserRepos(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserRepos", reflect.TypeOf((*MockAppsService)(nil).ListUserRepos), arg0, arg1, arg2)
}

// RedeliverHookDelivery mocks base method.
func (m *MockAppsService) RedeliverHookDelivery(arg0 context.Context, arg1 int64) (*github.HookDelivery, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedeliverHookDelivery", arg0, arg1)
	ret0, _ := ret[0].(*github.HookDelivery)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RedeliverHookDelivery indicates an expected call of RedeliverHookDelivery.
func (mr *MockAppsServiceMockRecorder) RedeliverHookDelivery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedeliverHookDelivery", reflect.TypeOf((*MockAppsService)(nil).RedeliverHookDelivery), arg0, arg1)
}

// RemoveRepository mocks base method.
func (m *MockAppsService) RemoveRepository(arg0 context.Context, arg1, arg2 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRepository", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRepository indicates an expected call of RemoveRepository.
func (mr *MockAppsServiceMockRecorder) RemoveRepository(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRepository", reflect.TypeOf((*MockAppsService)(nil).RemoveRepository), arg0, arg1, arg2)
}

// RevokeInstallationToken mocks base method.
func (m *MockAppsService) RevokeInstallationToken(arg0 context.Context) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeInstallationToken", arg0)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeInstallationToken indicates an expected call of RevokeInstallationToken.
func (mr *MockAppsServiceMockRecorder) RevokeInstallationToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeInstallationToken", reflect.TypeOf((*MockAppsService)(nil).RevokeInstallationToken), arg0)
}

// SuspendInstallation mocks base method.
func (m *MockAppsService) SuspendInstallation(arg0 context.Context, arg1 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuspendInstallation", arg0, arg1)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuspendInstallation indicates an expected call of SuspendInstallation.
func (mr *MockAppsServiceMockRecorder) SuspendInstallation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuspendInstallation", reflect.TypeOf((*MockAppsService)(nil).SuspendInstallation), arg0, arg1)
}

// UnsuspendInstallation mocks base method.
func (m *MockAppsService) UnsuspendInstallation(arg0 context.Context, arg1 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsuspendInstallation", arg0, arg1)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnsuspendInstallation indicates an expected call of UnsuspendInstallation.
func (mr *MockAppsServiceMockRecorder) UnsuspendInstallation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsuspendInstallation", reflect.TypeOf((*MockAppsService)(nil).UnsuspendInstallation), arg0, arg1)
}

// UpdateHookConfig mocks base method.
func (m *MockAppsService) UpdateHookConfig(arg0 context.Context, arg1 *github.HookConfig) (*github.HookConfig, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHookConfig", arg0, arg1)
	ret0, _ := ret[0].(*github.HookConfig)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateHookConfig indicates an expected call of UpdateHookConfig.
func (mr *MockAppsServiceMockRecorder) UpdateHookConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHookConfig", reflect.TypeOf((*MockAppsService)(nil).UpdateHookConfig), arg0, arg1)
}

// MockAuthorizationsService is a mock of AuthorizationsService interface.
type MockAuthorizationsService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationsServiceMockRecorder
}

// MockAuthorizationsServiceMockRecorder is the mock recorder for MockAuthorizationsService.
type MockAuthorizationsServiceMockRecorder struct {
	mock *MockAuthorizationsService
}

// NewMockAuthorizationsService creates a new mock instance.
func NewMockAuthorizationsService(ctrl *gomock.Controller) *MockAuthorizationsService {
	mock := &MockAuthorizationsService{ctrl: ctrl}
	mock.recorder = &MockAuthorizationsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizationsService) EXPECT() *MockAuthorizationsServiceMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockAuthorizationsService) Check(arg0 context.Context, arg1, arg2 string) (*github.Authorization, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Authorization)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Check indicates an expected call of Check.
func (mr *MockAuthorizationsServiceMockRecorder) Check(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockAuthorizationsService)(nil).Check), arg0, arg1, arg2)
}

// CreateImpersonation mocks base method.
func (m *MockAuthorizationsService) CreateImpersonation(arg0 context.Context, arg1 string, arg2 *github.AuthorizationRequest) (*github.Authorization, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImpersonation", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Authorization)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateImpersonation indicates an expected call of CreateImpersonation.
func (mr *MockAuthorizationsServiceMockRecorder) CreateImpersonation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImpersonation", reflect.TypeOf((*MockAuthorizationsService)(nil).CreateImpersonation), arg0, arg1, arg2)
}

// DeleteGrant mocks base method.
func (m *MockAuthorizationsService) DeleteGrant(arg0 context.Context, arg1, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGrant", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGrant indicates an expected call of DeleteGrant.
func (mr *MockAuthorizationsServiceMockRecorder) DeleteGrant(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGrant", reflect.TypeOf((*MockAuthorizationsService)(nil).DeleteGrant), arg0, arg1, arg2)
}

// DeleteImpersonation mocks base method.
func (m *MockAuthorizationsService) DeleteImpersonation(arg0 context.Context, arg1 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImpersonation", arg0, arg1)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteImpersonation indicates an expected call of DeleteImpersonation.
func (mr *MockAuthorizationsServiceMockRecorder) DeleteImpersonation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImpersonation", reflect.TypeOf((*MockAuthorizationsService)(nil).DeleteImpersonation), arg0, arg1)
}

// Reset mocks base method.
func (m *MockAuthorizationsService) Reset(arg0 context.Context, arg1, arg2 string) (*github.Authorization, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Authorization)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Reset indicates an expected call of Reset.
func (mr *MockAuthorizationsServiceMockRecorder) Reset(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockAuthorizationsService)(nil).Reset), arg0, arg1, arg2)
}

// Revoke mocks base method.
func (m *MockAuthorizationsService) Revoke(arg0 context.Context, arg1, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revoke", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Revoke indicates an expected call of Revoke.
func (mr *MockAuthorizationsServiceMockRecorder) Revoke(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoke", reflect.TypeOf((*MockAuthorizationsService)(nil).Revoke), arg0, arg1, arg2)
}

// MockBillingService is a mock of BillingService interface.
type MockBillingService struct {
	ctrl     *gomock.Controller
	recorder *MockBillingServiceMockRecorder
}

// MockBillingServiceMockRecorder is the mock recorder for MockBillingService.
type MockBillingServiceMockRecorder struct {
	mock *MockBillingService
}

// NewMockBillingService creates a new mock instance.
func NewMockBillingService(ctrl *gomock.Controller) *MockBillingService {
	mock := &MockBillingService{ctrl: ctrl}
	mock.recorder = &MockBillingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingService) EXPECT() *MockBillingServiceMockRecorder {
	return m.recorder
}

// GetActionsBillingOrg mocks base method.
func (m *MockBillingService) GetActionsBillingOrg(arg0 context.Context, arg1 string) (*github.ActionBilling, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionsBillingOrg", arg0, arg1)
	ret0, _ := ret[0].(*github.ActionBilling)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetActionsBillingOrg indicates an expected call of GetActionsBillingOrg.
func (mr *MockBillingServiceMockRecorder) GetActionsBillingOrg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionsBillingOrg", reflect.TypeOf((*MockBillingService)(nil).GetActionsBillingOrg), arg0, arg1)
}

// GetActionsBillingUser mocks base method.
func (m *MockBillingService) GetActionsBillingUser(arg0 context.Context, arg1 string) (*github.ActionBilling, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionsBillingUser", arg0, arg1)
	ret0, _ := ret[0].(*github.ActionBilling)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetActionsBillingUser indicates an expected call of GetActionsBillingUser.
func (mr *MockBillingServiceMockRecorder) GetActionsBillingUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionsBillingUser", reflect.TypeOf((*MockBillingService)(nil).GetActionsBillingUser), arg0, arg1)
}

// GetAdvancedSecurityActiveCommittersOrg mocks base method.
func (m *MockBillingService) GetAdvancedSecurityActiveCommittersOrg(arg0 context.Context, arg1 string) (*github.ActiveCommitters, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdvancedSecurityActiveCommittersOrg", arg0, arg1)
	ret0, _ := ret[0].(*github.ActiveCommitters)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAdvancedSecurityActiveCommittersOrg indicates an expected call of GetAdvancedSecurityActiveCommittersOrg.
func (mr *MockBillingServiceMockRecorder) GetAdvancedSecurityActiveCommittersOrg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdvancedSecurityActiveCommittersOrg", reflect.TypeOf((*MockBillingService)(nil).GetAdvancedSecurityActiveCommittersOrg), arg0, arg1)
}

// GetPackagesBillingOrg mocks base method.
func (m *MockBillingService) GetPackagesBillingOrg(arg0 context.Context, arg1 string) (*github.PackageBilling, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackagesBillingOrg", arg0, arg1)
	ret0, _ := ret[0].(*github.PackageBilling)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPackagesBillingOrg indicates an expected call of GetPackagesBillingOrg.
func (mr *MockBillingServiceMockRecorder) GetPackagesBillingOrg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackagesBillingOrg", reflect.TypeOf((*MockBillingService)(nil).GetPackagesBillingOrg), arg0, arg1)
}

// GetPackagesBillingUser mocks base method.
func (m *MockBillingService) GetPackagesBillingUser(arg0 context.Context, arg1 string) (*github.PackageBilling, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackagesBillingUser", arg0, arg1)
	ret0, _ := ret[0].(*github.PackageBilling)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPackagesBillingUser indicates an expected call of GetPackagesBillingUser.
func (mr *MockBillingServiceMockRecorder) GetPackagesBillingUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackagesBillingUser", reflect.TypeOf((*MockBillingService)(nil).GetPackagesBillingUser), arg0, arg1)
}

// GetStorageBillingOrg mocks base method.
func (m *MockBillingService) GetStorageBillingOrg(arg0 context.Context, arg1 string) (*github.StorageBilling, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageBillingOrg", arg0, arg1)
	ret0, _ := ret[0].(*github.StorageBilling)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStorageBillingOrg indicates an expected call of GetStorageBillingOrg.
func (mr *MockBillingServiceMockRecorder) GetStorageBillingOrg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageBillingOrg", reflect.TypeOf((*MockBillingService)(nil).GetStorageBillingOrg), arg0, arg1)
}

// GetStorageBillingUser mocks base method.
func (m *MockBillingService) GetStorageBillingUser(arg0 context.Context, arg1 string) (*github.StorageBilling, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageBillingUser", arg0, arg1)
	ret0, _ := ret[0].(*github.StorageBilling)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStorageBillingUser indicates an expected call of GetStorageBillingUser.
func (mr *MockBillingServiceMockRecorder) GetStorageBillingUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageBillingUser", reflect.TypeOf((*MockBillingService)(nil).GetStorageBillingUser), arg0, arg1)
}

// MockChecksService is a mock of ChecksService interface.
type MockChecksService struct {
	ctrl     *gomock.Controller
	recorder *MockChecksServiceMockRecorder
}

// MockChecksServiceMockRecorder is the mock recorder for MockChecksService.
type MockChecksServiceMockRecorder struct {
	mock *MockChecksService
}

// NewMockChecksService creates a new mock instance.
func NewMockChecksService(ctrl *gomock.Controller) *MockChecksService {
	mock := &MockChecksService{ctrl: ctrl}
	mock.recorder = &MockChecksServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChecksService) EXPECT() *MockChecksServiceMockRecorder {
	return m.recorder
}

// CreateCheckRun mocks base method.
func (m *MockChecksService) CreateCheckRun(arg0 context.Context, arg1, arg2 string, arg3 github.CreateCheckRunOptions) (*github.CheckRun, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCheckRun", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.CheckRun)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCheckRun indicates an expected call of CreateCheckRun.
func (mr *MockChecksServiceMockRecorder) CreateCheckRun(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCheckRun", reflect.TypeOf((*MockChecksService)(nil).CreateCheckRun), arg0, arg1, arg2, arg3)
}

// CreateCheckSuite mocks base method.
func (m *MockChecksService) CreateCheckSuite(arg0 context.Context, arg1, arg2 string, arg3 github.CreateCheckSuiteOptions) (*github.CheckSuite, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCheckSuite", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.CheckSuite)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCheckSuite indicates an expected call of CreateCheckSuite.
func (mr *MockChecksServiceMockRecorder) CreateCheckSuite(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCheckSuite", reflect.TypeOf((*MockChecksService)(nil).CreateCheckSuite), arg0, arg1, arg2, arg3)
}

// GetCheckRun mocks base method.
func (m *MockChecksService) GetCheckRun(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.CheckRun, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCheckRun", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.CheckRun)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCheckRun indicates an expected call of GetCheckRun.
func (mr *MockChecksServiceMockRecorder) GetCheckRun(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCheckRun", reflect.TypeOf((*MockChecksService)(nil).GetCheckRun), arg0, arg1, arg2, arg3)
}

// GetCheckSuite mocks base method.
func (m *MockChecksService) GetCheckSuite(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.CheckSuite, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCheckSuite", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.CheckSuite)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCheckSuite indicates an expected call of GetCheckSuite.
func (mr *MockChecksServiceMockRecorder) GetCheckSuite(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCheckSuite", reflect.TypeOf((*MockChecksService)(nil).GetCheckSuite), arg0, arg1, arg2, arg3)
}

// ListCheckRunAnnotations mocks base method.
func (m *MockChecksService) ListCheckRunAnnotations(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 *github.ListOptions) ([]*github.CheckRunAnnotation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCheckRunAnnotations", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.CheckRunAnnotation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCheckRunAnnotations indicates an expected call of ListCheckRunAnnotations.
func (mr *MockChecksServiceMockRecorder) ListCheckRunAnnotations(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCheckRunAnnotations", reflect.TypeOf((*MockChecksService)(nil).ListCheckRunAnnotations), arg0, arg1, arg2, arg3, arg4)
}

// ListCheckRunsCheckSuite mocks base method.
func (m *MockChecksService) ListCheckRunsCheckSuite(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 *github.ListCheckRunsOptions) (*github.ListCheckRunsResults, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCheckRunsCheckSuite", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.ListCheckRunsResults)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCheckRunsCheckSuite indicates an expected call of ListCheckRunsCheckSuite.
func (mr *MockChecksServiceMockRecorder) ListCheckRunsCheckSuite(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCheckRunsCheckSuite", reflect.TypeOf((*MockChecksService)(nil).ListCheckRunsCheckSuite), arg0, arg1, arg2, arg3, arg4)
}

// ListCheckRunsForRef mocks base method.
func (m *MockChecksService) ListCheckRunsForRef(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.ListCheckRunsOptions) (*github.ListCheckRunsResults, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCheckRunsForRef", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.ListCheckRunsResults)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCheckRunsForRef indicates an expected call of ListCheckRunsForRef.
func (mr *MockChecksServiceMockRecorder) ListCheckRunsForRef(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCheckRunsForRef", reflect.TypeOf((*MockChecksService)(nil).ListCheckRunsForRef), arg0, arg1, arg2, arg3, arg4)
}

// ListCheckSuitesForRef mocks base method.
func (m *MockChecksService) ListCheckSuitesForRef(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.ListCheckSuiteOptions) (*github.ListCheckSuiteResults, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCheckSuitesForRef", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.ListCheckSuiteResults)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCheckSuitesForRef indicates an expected call of ListCheckSuitesForRef.
func (mr *MockChecksServiceMockRecorder) ListCheckSuitesForRef(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCheckSuitesForRef", reflect.TypeOf((*MockChecksService)(nil).ListCheckSuitesForRef), arg0, arg1, arg2, arg3, arg4)
}

// ReRequestCheckRun mocks base method.
func (m *MockChecksService) ReRequestCheckRun(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReRequestCheckRun", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReRequestCheckRun indicates an expected call of ReRequestCheckRun.
func (mr *MockChecksServiceMockRecorder) ReRequestCheckRun(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReRequestCheckRun", reflect.TypeOf((*MockChecksService)(nil).ReRequestCheckRun), arg0, arg1, arg2, arg3)
}

// ReRequestCheckSuite mocks base method.
func (m *MockChecksService) ReRequestCheckSuite(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReRequestCheckSuite", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReRequestCheckSuite indicates an expected call of ReRequestCheckSuite.
func (mr *MockChecksServiceMockRecorder) ReRequestCheckSuite(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReRequestCheckSuite", reflect.TypeOf((*MockChecksService)(nil).ReRequestCheckSuite), arg0, arg1, arg2, arg3)
}

// SetCheckSuitePreferences mocks base method.
func (m *MockChecksService) SetCheckSuitePreferences(arg0 context.Context, arg1, arg2 string, arg3 github.CheckSuitePreferenceOptions) (*github.CheckSuitePreferenceResults, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCheckSuitePreferences", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.CheckSuitePreferenceResults)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetCheckSuitePreferences indicates an expected call of SetCheckSuitePreferences.
func (mr *MockChecksServiceMockRecorder) SetCheckSuitePreferences(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCheckSuitePreferences", reflect.TypeOf((*MockChecksService)(nil).SetCheckSuitePreferences), arg0, arg1, arg2, arg3)
}

// UpdateCheckRun mocks base method.
func (m *MockChecksService) UpdateCheckRun(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 github.UpdateCheckRunOptions) (*github.CheckRun, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCheckRun", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.CheckRun)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateCheckRun indicates an expected call of UpdateCheckRun.
func (mr *MockChecksServiceMockRecorder) UpdateCheckRun(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCheckRun", reflect.TypeOf((*MockChecksService)(nil).UpdateCheckRun), arg0, arg1, arg2, arg3, arg4)
}

// MockCodeScanningService is a mock of CodeScanningService interface.
type MockCodeScanningService struct {
	ctrl     *gomock.Controller
	recorder *MockCodeScanningServiceMockRecorder
}

// MockCodeScanningServiceMockRecorder is the mock recorder for MockCodeScanningService.
type MockCodeScanningServiceMockRecorder struct {
	mock *MockCodeScanningService
}

// NewMockCodeScanningService creates a new mock instance.
func NewMockCodeScanningService(ctrl *gomock.Controller) *MockCodeScanningService {
	mock := &MockCodeScanningService{ctrl: ctrl}
	mock.recorder = &MockCodeScanningServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodeScanningService) EXPECT() *MockCodeScanningServiceMockRecorder {
	return m.recorder
}

// GetAlert mocks base method.
func (m *MockCodeScanningService) GetAlert(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Alert, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlert", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Alert)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAlert indicates an expected call of GetAlert.
func (mr *MockCodeScanningServiceMockRecorder) GetAlert(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlert", reflect.TypeOf((*MockCodeScanningService)(nil).GetAlert), arg0, arg1, arg2, arg3)
}

// GetAnalysis mocks base method.
func (m *MockCodeScanningService) GetAnalysis(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.ScanningAnalysis, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnalysis", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.ScanningAnalysis)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAnalysis indicates an expected call of GetAnalysis.
func (mr *MockCodeScanningServiceMockRecorder) GetAnalysis(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnalysis", reflect.TypeOf((*MockCodeScanningService)(nil).GetAnalysis), arg0, arg1, arg2, arg3)
}

// ListAlertsForOrg mocks base method.
func (m *MockCodeScanningService) ListAlertsForOrg(arg0 context.Context, arg1 string, arg2 *github.AlertListOptions) ([]*github.Alert, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAlertsForOrg", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.Alert)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAlertsForOrg indicates an expected call of ListAlertsForOrg.
func (mr *MockCodeScanningServiceMockRecorder) ListAlertsForOrg(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlertsForOrg", reflect.TypeOf((*MockCodeScanningService)(nil).ListAlertsForOrg), arg0, arg1, arg2)
}

// ListAlertsForRepo mocks base method.
func (m *MockCodeScanningService) ListAlertsForRepo(arg0 context.Context, arg1, arg2 string, arg3 *github.AlertListOptions) ([]*github.Alert, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAlertsForRepo", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.Alert)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAlertsForRepo indicates an expected call of ListAlertsForRepo.
func (mr *MockCodeScanningServiceMockRecorder) ListAlertsForRepo(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlertsForRepo", reflect.TypeOf((*MockCodeScanningService)(nil).ListAlertsForRepo), arg0, arg1, arg2, arg3)
}

// ListAnalysesForRepo mocks base method.
func (m *MockCodeScanningService) ListAnalysesForRepo(arg0 context.Context, arg1, arg2 string, arg3 *github.AnalysesListOptions) ([]*github.ScanningAnalysis, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnalysesForRepo", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.ScanningAnalysis)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAnalysesForRepo indicates an expected call of ListAnalysesForRepo.
func (mr *MockCodeScanningServiceMockRecorder) ListAnalysesForRepo(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnalysesForRepo", reflect.TypeOf((*MockCodeScanningService)(nil).ListAnalysesForRepo), arg0, arg1, arg2, arg3)
}

// UploadSarif mocks base method.
func (m *MockCodeScanningService) UploadSarif(arg0 context.Context, arg1, arg2 string, arg3 *github.SarifAnalysis) (*github.SarifID, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadSarif", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.SarifID)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UploadSarif indicates an expected call of UploadSarif.
func (mr *MockCodeScanningServiceMockRecorder) UploadSarif(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadSarif", reflect.TypeOf((*MockCodeScanningService)(nil).UploadSarif), arg0, arg1, arg2, arg3)
}

// MockDependabotService is a mock of DependabotService interface.
type MockDependabotService struct {
	ctrl     *gomock.Controller
	recorder *MockDependabotServiceMockRecorder
}

// MockDependabotServiceMockRecorder is the mock recorder for MockDependabotService.
type MockDependabotServiceMockRecorder struct {
	mock *MockDependabotService
}

// NewMockDependabotService creates a new mock instance.
func NewMockDependabotService(ctrl *gomock.Controller) *MockDependabotService {
	mock := &MockDependabotService{ctrl: ctrl}
	mock.recorder = &MockDependabotServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDependabotService) EXPECT() *MockDependabotServiceMockRecorder {
	return m.recorder
}

// AddSelectedRepoToOrgSecret mocks base method.
func (m *MockDependabotService) AddSelectedRepoToOrgSecret(arg0 context.Context, arg1, arg2 string, arg3 *github.Repository) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSelectedRepoToOrgSecret", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSelectedRepoToOrgSecret indicates an expected call of AddSelectedRepoToOrgSecret.
func (mr *MockDependabotServiceMockRecorder) AddSelectedRepoToOrgSecret(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSelectedRepoToOrgSecret", reflect.TypeOf((*MockDependabotService)(nil).AddSelectedRepoToOrgSecret), arg0, arg1, arg2, arg3)
}

// CreateOrUpdateOrgSecret mocks base method.
func (m *MockDependabotService) CreateOrUpdateOrgSecret(arg0 context.Context, arg1 string, arg2 *github.DependabotEncryptedSecret) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateOrgSecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateOrgSecret indicates an expected call of CreateOrUpdateOrgSecret.
func (mr *MockDependabotServiceMockRecorder) CreateOrUpdateOrgSecret(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateOrgSecret", reflect.TypeOf((*MockDependabotService)(nil).CreateOrUpdateOrgSecret), arg0, arg1, arg2)
}

// CreateOrUpdateRepoSecret mocks base method.
func (m *MockDependabotService) CreateOrUpdateRepoSecret(arg0 context.Context, arg1, arg2 string, arg3 *github.DependabotEncryptedSecret) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateRepoSecret", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateRepoSecret indicates an expected call of CreateOrUpdateRepoSecret.
func (mr *MockDependabotServiceMockRecorder) CreateOrUpdateRepoSecret(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateRepoSecret", reflect.TypeOf((*MockDependabotService)(nil).CreateOrUpdateRepoSecret), arg0, arg1, arg2, arg3)
}

// DeleteOrgSecret mocks base method.
func (m *MockDependabotService) DeleteOrgSecret(arg0 context.Context, arg1, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrgSecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrgSecret indicates an expected call of DeleteOrgSecret.
func (mr *MockDependabotServiceMockRecorder) DeleteOrgSecret(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrgSecret", reflect.TypeOf((*MockDependabotService)(nil).DeleteOrgSecret), arg0, arg1, arg2)
}

// DeleteRepoSecret mocks base method.
func (m *MockDependabotService) DeleteRepoSecret(arg0 context.Context, arg1, arg2, arg3 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepoSecret", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRepoSecret indicates an expected call of DeleteRepoSecret.
func (mr *MockDependabotServiceMockRecorder) DeleteRepoSecret(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepoSecret", reflect.TypeOf((*MockDependabotService)(nil).DeleteRepoSecret), arg0, arg1, arg2, arg3)
}

// GetOrgPublicKey mocks base method.
func (m *MockDependabotService) GetOrgPublicKey(arg0 context.Context, arg1 string) (*github.PublicKey, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrgPublicKey", arg0, arg1)
	ret0, _ := ret[0].(*github.PublicKey)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrgPublicKey indicates an expected call of GetOrgPublicKey.
func (mr *MockDependabotServiceMockRecorder) GetOrgPublicKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgPublicKey", reflect.TypeOf((*MockDependabotService)(nil).GetOrgPublicKey), arg0, arg1)
}

// GetOrgSecret mocks base method.
func (m *MockDependabotService) GetOrgSecret(arg0 context.Context, arg1, arg2 string) (*github.Secret, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrgSecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Secret)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrgSecret indicates an expected call of GetOrgSecret.
func (mr *MockDependabotServiceMockRecorder) GetOrgSecret(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgSecret", reflect.TypeOf((*MockDependabotService)(nil).GetOrgSecret), arg0, arg1, arg2)
}

// GetRepoPublicKey mocks base method.
func (m *MockDependabotService) GetRepoPublicKey(arg0 context.Context, arg1, arg2 string) (*github.PublicKey, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoPublicKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.PublicKey)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRepoPublicKey indicates an expected call of GetRepoPublicKey.
func (mr *MockDependabotServiceMockRecorder) GetRepoPublicKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoPublicKey", reflect.TypeOf((*MockDependabotService)(nil).GetRepoPublicKey), arg0, arg1, arg2)
}

// GetRepoSecret mocks base method.
func (m *MockDependabotService) GetRepoSecret(arg0 context.Context, arg1, arg2, arg3 string) (*github.Secret, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoSecret", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Secret)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRepoSecret indicates an expected call of GetRepoSecret.
func (mr *MockDependabotServiceMockRecorder) GetRepoSecret(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoSecret", reflect.TypeOf((*MockDependabotService)(nil).GetRepoSecret), arg0, arg1, arg2, arg3)
}

// ListOrgSecrets mocks base method.
func (m *MockDependabotService) ListOrgSecrets(arg0 context.Context, arg1 string, arg2 *github.ListOptions) (*github.Secrets, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrgSecrets", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Secrets)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrgSecrets indicates an expected call of ListOrgSecrets.
func (mr *MockDependabotServiceMockRecorder) ListOrgSecrets(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrgSecrets", reflect.TypeOf((*MockDependabotService)(nil).ListOrgSecrets), arg0, arg1, arg2)
}

// ListRepoSecrets mocks base method.
func (m *MockDependabotService) ListRepoSecrets(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) (*github.Secrets, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepoSecrets", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Secrets)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRepoSecrets indicates an expected call of ListRepoSecrets.
func (mr *MockDependabotServiceMockRecorder) ListRepoSecrets(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepoSecrets", reflect.TypeOf((*MockDependabotService)(nil).ListRepoSecrets), arg0, arg1, arg2, arg3)
}

// ListSelectedReposForOrgSecret mocks base method.
func (m *MockDependabotService) ListSelectedReposForOrgSecret(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) (*github.SelectedReposList, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSelectedReposForOrgSecret", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.SelectedReposList)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSelectedReposForOrgSecret indicates an expected call of ListSelectedReposForOrgSecret.
func (mr *MockDependabotServiceMockRecorder) ListSelectedReposForOrgSecret(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSelectedReposForOrgSecret", reflect.TypeOf((*MockDependabotService)(nil).ListSelectedReposForOrgSecret), arg0, arg1, arg2, arg3)
}

// RemoveSelectedRepoFromOrgSecret mocks base method.
func (m *MockDependabotService) RemoveSelectedRepoFromOrgSecret(arg0 context.Context, arg1, arg2 string, arg3 *github.Repository) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSelectedRepoFromOrgSecret", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveSelectedRepoFromOrgSecret indicates an expected call of RemoveSelectedRepoFromOrgSecret.
func (mr *MockDependabotServiceMockRecorder) RemoveSelectedRepoFromOrgSecret(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSelectedRepoFromOrgSecret", reflect.TypeOf((*MockDependabotService)(nil).RemoveSelectedRepoFromOrgSecret), arg0, arg1, arg2, arg3)
}

// SetSelectedReposForOrgSecret mocks base method.
func (m *MockDependabotService) SetSelectedReposForOrgSecret(arg0 context.Context, arg1, arg2 string, arg3 github.DependabotSecretsSelectedRepoIDs) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSelectedReposForOrgSecret", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSelectedReposForOrgSecret indicates an expected call of SetSelectedReposForOrgSecret.
func (mr *MockDependabotServiceMockRecorder) SetSelectedReposForOrgSecret(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSelectedReposForOrgSecret", reflect.TypeOf((*MockDependabotService)(nil).SetSelectedReposForOrgSecret), arg0, arg1, arg2, arg3)
}

// MockEnterpriseService is a mock of EnterpriseService interface.
type MockEnterpriseService struct {
	ctrl     *gomock.Controller
	recorder *MockEnterpriseServiceMockRecorder
}

// MockEnterpriseServiceMockRecorder is the mock recorder for MockEnterpriseService.
type MockEnterpriseServiceMockRecorder struct {
	mock *MockEnterpriseService
}

// NewMockEnterpriseService creates a new mock instance.
func NewMockEnterpriseService(ctrl *gomock.Controller) *MockEnterpriseService {
	mock := &MockEnterpriseService{ctrl: ctrl}
	mock.recorder = &MockEnterpriseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnterpriseService) EXPECT() *MockEnterpriseServiceMockRecorder {
	return m.recorder
}

// CreateRegistrationToken mocks base method.
func (m *MockEnterpriseService) CreateRegistrationToken(arg0 context.Context, arg1 string) (*github.RegistrationToken, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegistrationToken", arg0, arg1)
	ret0, _ := ret[0].(*github.RegistrationToken)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRegistrationToken indicates an expected call of CreateRegistrationToken.
func (mr *MockEnterpriseServiceMockRecorder) CreateRegistrationToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistrationToken", reflect.TypeOf((*MockEnterpriseService)(nil).CreateRegistrationToken), arg0, arg1)
}

// GetAuditLog mocks base method.
func (m *MockEnterpriseService) GetAuditLog(arg0 context.Context, arg1 string, arg2 *github.GetAuditLogOptions) ([]*github.AuditEntry, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuditLog", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.AuditEntry)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAuditLog indicates an expected call of GetAuditLog.
func (mr *MockEnterpriseServiceMockRecorder) GetAuditLog(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuditLog", reflect.TypeOf((*MockEnterpriseService)(nil).GetAuditLog), arg0, arg1, arg2)
}

// ListRunnerApplicationDownloads mocks base method.
func (m *MockEnterpriseService) ListRunnerApplicationDownloads(arg0 context.Context, arg1 string) ([]*github.RunnerApplicationDownload, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunnerApplicationDownloads", arg0, arg1)
	ret0, _ := ret[0].([]*github.RunnerApplicationDownload)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRunnerApplicationDownloads indicates an expected call of ListRunnerApplicationDownloads.
func (mr *MockEnterpriseServiceMockRecorder) ListRunnerApplicationDownloads(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunnerApplicationDownloads", reflect.TypeOf((*MockEnterpriseService)(nil).ListRunnerApplicationDownloads), arg0, arg1)
}

// ListRunners mocks base method.
func (m *MockEnterpriseService) ListRunners(arg0 context.Context, arg1 string, arg2 *github.ListOptions) (*github.Runners, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunners", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Runners)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRunners indicates an expected call of ListRunners.
func (mr *MockEnterpriseServiceMockRecorder) ListRunners(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunners", reflect.TypeOf((*MockEnterpriseService)(nil).ListRunners), arg0, arg1, arg2)
}

// RemoveRunner mocks base method.
func (m *MockEnterpriseService) RemoveRunner(arg0 context.Context, arg1 string, arg2 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRunner", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRunner indicates an expected call of RemoveRunner.
func (mr *MockEnterpriseServiceMockRecorder) RemoveRunner(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRunner", reflect.TypeOf((*MockEnterpriseService)(nil).RemoveRunner), arg0, arg1, arg2)
}

// MockGistsService is a mock of GistsService interface.
type MockGistsService struct {
	ctrl     *gomock.Controller
	recorder *MockGistsServiceMockRecorder
}

// MockGistsServiceMockRecorder is the mock recorder for MockGistsService.
type MockGistsServiceMockRecorder struct {
	mock *MockGistsService
}

// NewMockGistsService creates a new mock instance.
func NewMockGistsService(ctrl *gomock.Controller) *MockGistsService {
	mock := &MockGistsService{ctrl: ctrl}
	mock.recorder = &MockGistsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGistsService) EXPECT() *MockGistsServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGistsService) Create(arg0 context.Context, arg1 *github.Gist) (*github.Gist, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*github.Gist)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockGistsServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGistsService)(nil).Create), arg0, arg1)
}

// CreateComment mocks base method.
func (m *MockGistsService) CreateComment(arg0 context.Context, arg1 string, arg2 *github.GistComment) (*github.GistComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.GistComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockGistsServiceMockRecorder) CreateComment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockGistsService)(nil).CreateComment), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockGistsService) Delete(arg0 context.Context, arg1 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockGistsServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGistsService)(nil).Delete), arg0, arg1)
}

// DeleteComment mocks base method.
func (m *MockGistsService) DeleteComment(arg0 context.Context, arg1 string, arg2 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockGistsServiceMockRecorder) DeleteComment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockGistsService)(nil).DeleteComment), arg0, arg1, arg2)
}

// Edit mocks base method.
func (m *MockGistsService) Edit(arg0 context.Context, arg1 string, arg2 *github.Gist) (*github.Gist, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Gist)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Edit indicates an expected call of Edit.
func (mr *MockGistsServiceMockRecorder) Edit(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockGistsService)(nil).Edit), arg0, arg1, arg2)
}

// EditComment mocks base method.
func (m *MockGistsService) EditComment(arg0 context.Context, arg1 string, arg2 int64, arg3 *github.GistComment) (*github.GistComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditComment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.GistComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditComment indicates an expected call of EditComment.
func (mr *MockGistsServiceMockRecorder) EditComment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditComment", reflect.TypeOf((*MockGistsService)(nil).EditComment), arg0, arg1, arg2, arg3)
}

// Fork mocks base method.
func (m *MockGistsService) Fork(arg0 context.Context, arg1 string) (*github.Gist, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fork", arg0, arg1)
	ret0, _ := ret[0].(*github.Gist)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Fork indicates an expected call of Fork.
func (mr *MockGistsServiceMockRecorder) Fork(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fork", reflect.TypeOf((*MockGistsService)(nil).Fork), arg0, arg1)
}

// Get mocks base method.
func (m *MockGistsService) Get(arg0 context.Context, arg1 string) (*github.Gist, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*github.Gist)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockGistsServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGistsService)(nil).Get), arg0, arg1)
}

// GetComment mocks base method.
func (m *MockGistsService) GetComment(arg0 context.Context, arg1 string, arg2 int64) (*github.GistComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.GistComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetComment indicates an expected call of GetComment.
func (mr *MockGistsServiceMockRecorder) GetComment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockGistsService)(nil).GetComment), arg0, arg1, arg2)
}

// GetRevision mocks base method.
func (m *MockGistsService) GetRevision(arg0 context.Context, arg1, arg2 string) (*github.Gist, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRevision", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Gist)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRevision indicates an expected call of GetRevision.
func (mr *MockGistsServiceMockRecorder) GetRevision(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevision", reflect.TypeOf((*MockGistsService)(nil).GetRevision), arg0, arg1, arg2)
}

// IsStarred mocks base method.
func (m *MockGistsService) IsStarred(arg0 context.Context, arg1 string) (bool, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStarred", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsStarred indicates an expected call of IsStarred.
func (mr *MockGistsServiceMockRecorder) IsStarred(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStarred", reflect.TypeOf((*MockGistsService)(nil).IsStarred), arg0, arg1)
}

// List mocks base method.
func (m *MockGistsService) List(arg0 context.Context, arg1 string, arg2 *github.GistListOptions) ([]*github.Gist, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.Gist)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockGistsServiceMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGistsService)(nil).List), arg0, arg1, arg2)
}

// ListAll mocks base method.
func (m *MockGistsService) ListAll(arg0 context.Context, arg1 *github.GistListOptions) ([]*github.Gist, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", arg0, arg1)
	ret0, _ := ret[0].([]*github.Gist)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAll indicates an expected call of ListAll.
func (mr *MockGistsServiceMockRecorder) ListAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockGistsService)(nil).ListAll), arg0, arg1)
}

// ListComments mocks base method.
func (m *MockGistsService) ListComments(arg0 context.Context, arg1 string, arg2 *github.ListOptions) ([]*github.GistComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComments", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.GistComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListComments indicates an expected call of ListComments.
func (mr *MockGistsServiceMockRecorder) ListComments(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComments", reflect.TypeOf((*MockGistsService)(nil).ListComments), arg0, arg1, arg2)
}

// ListCommits mocks base method.
func (m *MockGistsService) ListCommits(arg0 context.Context, arg1 string, arg2 *github.ListOptions) ([]*github.GistCommit, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommits", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.GistCommit)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCommits indicates an expected call of ListCommits.
func (mr *MockGistsServiceMockRecorder) ListCommits(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommits", reflect.TypeOf((*MockGistsService)(nil).ListCommits), arg0, arg1, arg2)
}

// ListForks mocks base method.
func (m *MockGistsService) ListForks(arg0 context.Context, arg1 string, arg2 *github.ListOptions) ([]*github.GistFork, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForks", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.GistFork)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListForks indicates an expected call of ListForks.
func (mr *MockGistsServiceMockRecorder) ListForks(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForks", reflect.TypeOf((*MockGistsService)(nil).ListForks), arg0, arg1, arg2)
}

// ListStarred mocks base method.
func (m *MockGistsService) ListStarred(arg0 context.Context, arg1 *github.GistListOptions) ([]*github.Gist, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStarred", arg0, arg1)
	ret0, _ := ret[0].([]*github.Gist)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListStarred indicates an expected call of ListStarred.
func (mr *MockGistsServiceMockRecorder) ListStarred(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStarred", reflect.TypeOf((*MockGistsService)(nil).ListStarred), arg0, arg1)
}

// Star mocks base method.
func (m *MockGistsService) Star(arg0 context.Context, arg1 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Star", arg0, arg1)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Star indicates an expected call of Star.
func (mr *MockGistsServiceMockRecorder) Star(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Star", reflect.TypeOf((*MockGistsService)(nil).Star), arg0, arg1)
}

// Unstar mocks base method.
func (m *MockGistsService) Unstar(arg0 context.Context, arg1 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unstar", arg0, arg1)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unstar indicates an expected call of Unstar.
func (mr *MockGistsServiceMockRecorder) Unstar(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unstar", reflect.TypeOf((*MockGistsService)(nil).Unstar), arg0, arg1)
}

// MockGitService is a mock of GitService interface.
type MockGitService struct {
	ctrl     *gomock.Controller
	recorder *MockGitServiceMockRecorder
}

// MockGitServiceMockRecorder is the mock recorder for MockGitService.
type MockGitServiceMockRecorder struct {
	mock *MockGitService
}

// NewMockGitService creates a new mock instance.
func NewMockGitService(ctrl *gomock.Controller) *MockGitService {
	mock := &MockGitService{ctrl: ctrl}
	mock.recorder = &MockGitServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitService) EXPECT() *MockGitServiceMockRecorder {
	return m.recorder
}

// CreateBlob mocks base method.
func (m *MockGitService) CreateBlob(arg0 context.Context, arg1, arg2 string, arg3 *github.Blob) (*github.Blob, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlob", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Blob)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateBlob indicates an expected call of CreateBlob.
func (mr *MockGitServiceMockRecorder) CreateBlob(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlob", reflect.TypeOf((*MockGitService)(nil).CreateBlob), arg0, arg1, arg2, arg3)
}

// CreateCommit mocks base method.
func (m *MockGitService) CreateCommit(arg0 context.Context, arg1, arg2 string, arg3 *github.Commit) (*github.Commit, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommit", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Commit)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCommit indicates an expected call of CreateCommit.
func (mr *MockGitServiceMockRecorder) CreateCommit(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommit", reflect.TypeOf((*MockGitService)(nil).CreateCommit), arg0, arg1, arg2, arg3)
}

// CreateRef mocks base method.
func (m *MockGitService) CreateRef(arg0 context.Context, arg1, arg2 string, arg3 *github.Reference) (*github.Reference, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRef", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Reference)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRef indicates an expected call of CreateRef.
func (mr *MockGitServiceMockRecorder) CreateRef(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRef", reflect.TypeOf((*MockGitService)(nil).CreateRef), arg0, arg1, arg2, arg3)
}

// CreateTag mocks base method.
func (m *MockGitService) CreateTag(arg0 context.Context, arg1, arg2 string, arg3 *github.Tag) (*github.Tag, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Tag)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockGitServiceMockRecorder) CreateTag(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockGitService)(nil).CreateTag), arg0, arg1, arg2, arg3)
}

// CreateTree mocks base method.
func (m *MockGitService) CreateTree(arg0 context.Context, arg1, arg2, arg3 string, arg4 []*github.TreeEntry) (*github.Tree, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTree", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Tree)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTree indicates an expected call of CreateTree.
func (mr *MockGitServiceMockRecorder) CreateTree(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTree", reflect.TypeOf((*MockGitService)(nil).CreateTree), arg0, arg1, arg2, arg3, arg4)
}

// DeleteRef mocks base method.
func (m *MockGitService) DeleteRef(arg0 context.Context, arg1, arg2, arg3 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRef", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRef indicates an expected call of DeleteRef.
func (mr *MockGitServiceMockRecorder) DeleteRef(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRef", reflect.TypeOf((*MockGitService)(nil).DeleteRef), arg0, arg1, arg2, arg3)
}

// GetBlob mocks base method.
func (m *MockGitService) GetBlob(arg0 context.Context, arg1, arg2, arg3 string) (*github.Blob, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlob", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Blob)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBlob indicates an expected call of GetBlob.
func (mr *MockGitServiceMockRecorder) GetBlob(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlob", reflect.TypeOf((*MockGitService)(nil).GetBlob), arg0, arg1, arg2, arg3)
}

// GetBlobRaw mocks base method.
func (m *MockGitService) GetBlobRaw(arg0 context.Context, arg1, arg2, arg3 string) ([]uint8, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlobRaw", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]uint8)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBlobRaw indicates an expected call of GetBlobRaw.
func (mr *MockGitServiceMockRecorder) GetBlobRaw(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlobRaw", reflect.TypeOf((*MockGitService)(nil).GetBlobRaw), arg0, arg1, arg2, arg3)
}

// GetCommit mocks base method.
func (m *MockGitService) GetCommit(arg0 context.Context, arg1, arg2, arg3 string) (*github.Commit, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommit", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Commit)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommit indicates an expected call of GetCommit.
func (mr *MockGitServiceMockRecorder) GetCommit(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommit", reflect.TypeOf((*MockGitService)(nil).GetCommit), arg0, arg1, arg2, arg3)
}

// GetRef mocks base method.
func (m *MockGitService) GetRef(arg0 context.Context, arg1, arg2, arg3 string) (*github.Reference, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRef", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Reference)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRef indicates an expected call of GetRef.
func (mr *MockGitServiceMockRecorder) GetRef(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRef", reflect.TypeOf((*MockGitService)(nil).GetRef), arg0, arg1, arg2, arg3)
}

// GetTag mocks base method.
func (m *MockGitService) GetTag(arg0 context.Context, arg1, arg2, arg3 string) (*github.Tag, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTag", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Tag)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTag indicates an expected call of GetTag.
func (mr *MockGitServiceMockRecorder) GetTag(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTag", reflect.TypeOf((*MockGitService)(nil).GetTag), arg0, arg1, arg2, arg3)
}

// GetTree mocks base method.
func (m *MockGitService) GetTree(arg0 context.Context, arg1, arg2, arg3 string, arg4 bool) (*github.Tree, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTree", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Tree)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTree indicates an expected call of GetTree.
func (mr *MockGitServiceMockRecorder) GetTree(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTree", reflect.TypeOf((*MockGitService)(nil).GetTree), arg0, arg1, arg2, arg3, arg4)
}

// ListMatchingRefs mocks base method.
func (m *MockGitService) ListMatchingRefs(arg0 context.Context, arg1, arg2 string, arg3 *github.ReferenceListOptions) ([]*github.Reference, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMatchingRefs", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.Reference)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMatchingRefs indicates an expected call of ListMatchingRefs.
func (mr *MockGitServiceMockRecorder) ListMatchingRefs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchingRefs", reflect.TypeOf((*MockGitService)(nil).ListMatchingRefs), arg0, arg1, arg2, arg3)
}

// UpdateRef mocks base method.
func (m *MockGitService) UpdateRef(arg0 context.Context, arg1, arg2 string, arg3 *github.Reference, arg4 bool) (*github.Reference, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRef", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Reference)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateRef indicates an expected call of UpdateRef.
func (mr *MockGitServiceMockRecorder) UpdateRef(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRef", reflect.TypeOf((*MockGitService)(nil).UpdateRef), arg0, arg1, arg2, arg3, arg4)
}

// MockGitignoresService is a mock of GitignoresService interface.
type MockGitignoresService struct {
	ctrl     *gomock.Controller
	recorder *MockGitignoresServiceMockRecorder
}

// MockGitignoresServiceMockRecorder is the mock recorder for MockGitignoresService.
type MockGitignoresServiceMockRecorder struct {
	mock *MockGitignoresService
}

// NewMockGitignoresService creates a new mock instance.
func NewMockGitignoresService(ctrl *gomock.Controller) *MockGitignoresService {
	mock := &MockGitignoresService{ctrl: ctrl}
	mock.recorder = &MockGitignoresServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitignoresService) EXPECT() *MockGitignoresServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockGitignoresService) Get(arg0 context.Context, arg1 string) (*github.Gitignore, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*github.Gitignore)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockGitignoresServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGitignoresService)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockGitignoresService) List(arg0 context.Context) ([]string, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockGitignoresServiceMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGitignoresService)(nil).List), arg0)
}

// MockInteractionsService is a mock of InteractionsService interface.
type MockInteractionsService struct {
	ctrl     *gomock.Controller
	recorder *MockInteractionsServiceMockRecorder
}

// MockInteractionsServiceMockRecorder is the mock recorder for MockInteractionsService.
type MockInteractionsServiceMockRecorder struct {
	mock *MockInteractionsService
}

// NewMockInteractionsService creates a new mock instance.
func NewMockInteractionsService(ctrl *gomock.Controller) *MockInteractionsService {
	mock := &MockInteractionsService{ctrl: ctrl}
	mock.recorder = &MockInteractionsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInteractionsService) EXPECT() *MockInteractionsServiceMockRecorder {
	return m.recorder
}

// GetRestrictionsForOrg mocks base method.
func (m *MockInteractionsService) GetRestrictionsForOrg(arg0 context.Context, arg1 string) (*github.InteractionRestriction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestrictionsForOrg", arg0, arg1)
	ret0, _ := ret[0].(*github.InteractionRestriction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRestrictionsForOrg indicates an expected call of GetRestrictionsForOrg.
func (mr *MockInteractionsServiceMockRecorder) GetRestrictionsForOrg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestrictionsForOrg", reflect.TypeOf((*MockInteractionsService)(nil).GetRestrictionsForOrg), arg0, arg1)
}

// GetRestrictionsForRepo mocks base method.
func (m *MockInteractionsService) GetRestrictionsForRepo(arg0 context.Context, arg1, arg2 string) (*github.InteractionRestriction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestrictionsForRepo", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.InteractionRestriction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRestrictionsForRepo indicates an expected call of GetRestrictionsForRepo.
func (mr *MockInteractionsServiceMockRecorder) GetRestrictionsForRepo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestrictionsForRepo", reflect.TypeOf((*MockInteractionsService)(nil).GetRestrictionsForRepo), arg0, arg1, arg2)
}

// RemoveRestrictionsFromOrg mocks base method.
func (m *MockInteractionsService) RemoveRestrictionsFromOrg(arg0 context.Context, arg1 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRestrictionsFromOrg", arg0, arg1)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRestrictionsFromOrg indicates an expected call of RemoveRestrictionsFromOrg.
func (mr *MockInteractionsServiceMockRecorder) RemoveRestrictionsFromOrg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRestrictionsFromOrg", reflect.TypeOf((*MockInteractionsService)(nil).RemoveRestrictionsFromOrg), arg0, arg1)
}

// RemoveRestrictionsFromRepo mocks base method.
func (m *MockInteractionsService) RemoveRestrictionsFromRepo(arg0 context.Context, arg1, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRestrictionsFromRepo", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRestrictionsFromRepo indicates an expected call of RemoveRestrictionsFromRepo.
func (mr *MockInteractionsServiceMockRecorder) RemoveRestrictionsFromRepo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRestrictionsFromRepo", reflect.TypeOf((*MockInteractionsService)(nil).RemoveRestrictionsFromRepo), arg0, arg1, arg2)
}

// UpdateRestrictionsForOrg mocks base method.
func (m *MockInteractionsService) UpdateRestrictionsForOrg(arg0 context.Context, arg1, arg2 string) (*github.InteractionRestriction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRestrictionsForOrg", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.InteractionRestriction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateRestrictionsForOrg indicates an expected call of UpdateRestrictionsForOrg.
func (mr *MockInteractionsServiceMockRecorder) UpdateRestrictionsForOrg(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRestrictionsForOrg", reflect.TypeOf((*MockInteractionsService)(nil).UpdateRestrictionsForOrg), arg0, arg1, arg2)
}

// UpdateRestrictionsForRepo mocks base method.
func (m *MockInteractionsService) UpdateRestrictionsForRepo(arg0 context.Context, arg1, arg2, arg3 string) (*github.InteractionRestriction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRestrictionsForRepo", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.InteractionRestriction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateRestrictionsForRepo indicates an expected call of UpdateRestrictionsForRepo.
func (mr *MockInteractionsServiceMockRecorder) UpdateRestrictionsForRepo(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRestrictionsForRepo", reflect.TypeOf((*MockInteractionsService)(nil).UpdateRestrictionsForRepo), arg0, arg1, arg2, arg3)
}

// MockIssueImportService is a mock of IssueImportService interface.
type MockIssueImportService struct {
	ctrl     *gomock.Controller
	recorder *MockIssueImportServiceMockRecorder
}

// MockIssueImportServiceMockRecorder is the mock recorder for MockIssueImportService.
type MockIssueImportServiceMockRecorder struct {
	mock *MockIssueImportService
}

// NewMockIssueImportService creates a new mock instance.
func NewMockIssueImportService(ctrl *gomock.Controller) *MockIssueImportService {
	mock := &MockIssueImportService{ctrl: ctrl}
	mock.recorder = &MockIssueImportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssueImportService) EXPECT() *MockIssueImportServiceMockRecorder {
	return m.recorder
}

// CheckStatus mocks base method.
func (m *MockIssueImportService) CheckStatus(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.IssueImportResponse, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.IssueImportResponse)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckStatus indicates an expected call of CheckStatus.
func (mr *MockIssueImportServiceMockRecorder) CheckStatus(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckStatus", reflect.TypeOf((*MockIssueImportService)(nil).CheckStatus), arg0, arg1, arg2, arg3)
}

// CheckStatusSince mocks base method.
func (m *MockIssueImportService) CheckStatusSince(arg0 context.Context, arg1, arg2 string, arg3 time.Time) ([]*github.IssueImportResponse, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckStatusSince", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.IssueImportResponse)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckStatusSince indicates an expected call of CheckStatusSince.
func (mr *MockIssueImportServiceMockRecorder) CheckStatusSince(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckStatusSince", reflect.TypeOf((*MockIssueImportService)(nil).CheckStatusSince), arg0, arg1, arg2, arg3)
}

// Create mocks base method.
func (m *MockIssueImportService) Create(arg0 context.Context, arg1, arg2 string, arg3 *github.IssueImportRequest) (*github.IssueImportResponse, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.IssueImportResponse)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockIssueImportServiceMockRecorder) Create(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIssueImportService)(nil).Create), arg0, arg1, arg2, arg3)
}

// MockIssuesService is a mock of IssuesService interface.
type MockIssuesService struct {
	ctrl     *gomock.Controller
	recorder *MockIssuesServiceMockRecorder
}

// MockIssuesServiceMockRecorder is the mock recorder for MockIssuesService.
type MockIssuesServiceMockRecorder struct {
	mock *MockIssuesService
}

// NewMockIssuesService creates a new mock instance.
func NewMockIssuesService(ctrl *gomock.Controller) *MockIssuesService {
	mock := &MockIssuesService{ctrl: ctrl}
	mock.recorder = &MockIssuesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssuesService) EXPECT() *MockIssuesServiceMockRecorder {
	return m.recorder
}

// AddAssignees mocks base method.
func (m *MockIssuesService) AddAssignees(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 []string) (*github.Issue, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAssignees", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Issue)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddAssignees indicates an expected call of AddAssignees.
func (mr *MockIssuesServiceMockRecorder) AddAssignees(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAssignees", reflect.TypeOf((*MockIssuesService)(nil).AddAssignees), arg0, arg1, arg2, arg3, arg4)
}

// AddLabelsToIssue mocks base method.
func (m *MockIssuesService) AddLabelsToIssue(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 []string) ([]*github.Label, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLabelsToIssue", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.Label)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddLabelsToIssue indicates an expected call of AddLabelsToIssue.
func (mr *MockIssuesServiceMockRecorder) AddLabelsToIssue(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLabelsToIssue", reflect.TypeOf((*MockIssuesService)(nil).AddLabelsToIssue), arg0, arg1, arg2, arg3, arg4)
}

// Create mocks base method.
func (m *MockIssuesService) Create(arg0 context.Context, arg1, arg2 string, arg3 *github.IssueRequest) (*github.Issue, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Issue)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockIssuesServiceMockRecorder) Create(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIssuesService)(nil).Create), arg0, arg1, arg2, arg3)
}

// CreateComment mocks base method.
func (m *MockIssuesService) CreateComment(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.IssueComment) (*github.IssueComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.IssueComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockIssuesServiceMockRecorder) CreateComment(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockIssuesService)(nil).CreateComment), arg0, arg1, arg2, arg3, arg4)
}

// CreateLabel mocks base method.
func (m *MockIssuesService) CreateLabel(arg0 context.Context, arg1, arg2 string, arg3 *github.Label) (*github.Label, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLabel", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Label)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateLabel indicates an expected call of CreateLabel.
func (mr *MockIssuesServiceMockRecorder) CreateLabel(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLabel", reflect.TypeOf((*MockIssuesService)(nil).CreateLabel), arg0, arg1, arg2, arg3)
}

// CreateMilestone mocks base method.
func (m *MockIssuesService) CreateMilestone(arg0 context.Context, arg1, arg2 string, arg3 *github.Milestone) (*github.Milestone, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMilestone", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Milestone)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateMilestone indicates an expected call of CreateMilestone.
func (mr *MockIssuesServiceMockRecorder) CreateMilestone(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMilestone", reflect.TypeOf((*MockIssuesService)(nil).CreateMilestone), arg0, arg1, arg2, arg3)
}

// DeleteComment mocks base method.
func (m *MockIssuesService) DeleteComment(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockIssuesServiceMockRecorder) DeleteComment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockIssuesService)(nil).DeleteComment), arg0, arg1, arg2, arg3)
}

// DeleteLabel mocks base method.
func (m *MockIssuesService) DeleteLabel(arg0 context.Context, arg1, arg2, arg3 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLabel", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLabel indicates an expected call of DeleteLabel.
func (mr *MockIssuesServiceMockRecorder) DeleteLabel(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLabel", reflect.TypeOf((*MockIssuesService)(nil).DeleteLabel), arg0, arg1, arg2, arg3)
}

// DeleteMilestone mocks base method.
func (m *MockIssuesService) DeleteMilestone(arg0 context.Context, arg1, arg2 string, arg3 int) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMilestone", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMilestone indicates an expected call of DeleteMilestone.
func (mr *MockIssuesServiceMockRecorder) DeleteMilestone(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMilestone", reflect.TypeOf((*MockIssuesService)(nil).DeleteMilestone), arg0, arg1, arg2, arg3)
}

// Edit mocks base method.
func (m *MockIssuesService) Edit(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.IssueRequest) (*github.Issue, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Issue)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Edit indicates an expected call of Edit.
func (mr *MockIssuesServiceMockRecorder) Edit(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockIssuesService)(nil).Edit), arg0, arg1, arg2, arg3, arg4)
}

// EditComment mocks base method.
func (m *MockIssuesService) EditComment(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 *github.IssueComment) (*github.IssueComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditComment", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.IssueComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditComment indicates an expected call of EditComment.
func (mr *MockIssuesServiceMockRecorder) EditComment(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditComment", reflect.TypeOf((*MockIssuesService)(nil).EditComment), arg0, arg1, arg2, arg3, arg4)
}

// EditLabel mocks base method.
func (m *MockIssuesService) EditLabel(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.Label) (*github.Label, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditLabel", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Label)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditLabel indicates an expected call of EditLabel.
func (mr *MockIssuesServiceMockRecorder) EditLabel(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditLabel", reflect.TypeOf((*MockIssuesService)(nil).EditLabel), arg0, arg1, arg2, arg3, arg4)
}

// EditMilestone mocks base method.
func (m *MockIssuesService) EditMilestone(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.Milestone) (*github.Milestone, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditMilestone", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Milestone)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditMilestone indicates an expected call of EditMilestone.
func (mr *MockIssuesServiceMockRecorder) EditMilestone(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditMilestone", reflect.TypeOf((*MockIssuesService)(nil).EditMilestone), arg0, arg1, arg2, arg3, arg4)
}

// Get mocks base method.
func (m *MockIssuesService) Get(arg0 context.Context, arg1, arg2 string, arg3 int) (*github.Issue, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Issue)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockIssuesServiceMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIssuesService)(nil).Get), arg0, arg1, arg2, arg3)
}

// GetComment mocks base method.
func (m *MockIssuesService) GetComment(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.IssueComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.IssueComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetComment indicates an expected call of GetComment.
func (mr *MockIssuesServiceMockRecorder) GetComment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockIssuesService)(nil).GetComment), arg0, arg1, arg2, arg3)
}

// GetEvent mocks base method.
func (m *MockIssuesService) GetEvent(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.IssueEvent, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.IssueEvent)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockIssuesServiceMockRecorder) GetEvent(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockIssuesService)(nil).GetEvent), arg0, arg1, arg2, arg3)
}

// GetLabel mocks base method.
func (m *MockIssuesService) GetLabel(arg0 context.Context, arg1, arg2, arg3 string) (*github.Label, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabel", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Label)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLabel indicates an expected call of GetLabel.
func (mr *MockIssuesServiceMockRecorder) GetLabel(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabel", reflect.TypeOf((*MockIssuesService)(nil).GetLabel), arg0, arg1, arg2, arg3)
}

// GetMilestone mocks base method.
func (m *MockIssuesService) GetMilestone(arg0 context.Context, arg1, arg2 string, arg3 int) (*github.Milestone, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMilestone", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Milestone)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMilestone indicates an expected call of GetMilestone.
func (mr *MockIssuesServiceMockRecorder) GetMilestone(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMilestone", reflect.TypeOf((*MockIssuesService)(nil).GetMilestone), arg0, arg1, arg2, arg3)
}

// IsAssignee mocks base method.
func (m *MockIssuesService) IsAssignee(arg0 context.Context, arg1, arg2, arg3 string) (bool, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAssignee", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsAssignee indicates an expected call of IsAssignee.
func (mr *MockIssuesServiceMockRecorder) IsAssignee(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAssignee", reflect.TypeOf((*MockIssuesService)(nil).IsAssignee), arg0, arg1, arg2, arg3)
}

// List mocks base method.
func (m *MockIssuesService) List(arg0 context.Context, arg1 bool, arg2 *github.IssueListOptions) ([]*github.Issue, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.Issue)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockIssuesServiceMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIssuesService)(nil).List), arg0, arg1, arg2)
}

// ListAssignees mocks base method.
func (m *MockIssuesService) ListAssignees(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) ([]*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssignees", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAssignees indicates an expected call of ListAssignees.
func (mr *MockIssuesServiceMockRecorder) ListAssignees(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssignees", reflect.TypeOf((*MockIssuesService)(nil).ListAssignees), arg0, arg1, arg2, arg3)
}

// ListByOrg mocks base method.
func (m *MockIssuesService) ListByOrg(arg0 context.Context, arg1 string, arg2 *github.IssueListOptions) ([]*github.Issue, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByOrg", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.Issue)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByOrg indicates an expected call of ListByOrg.
func (mr *MockIssuesServiceMockRecorder) ListByOrg(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByOrg", reflect.TypeOf((*MockIssuesService)(nil).ListByOrg), arg0, arg1, arg2)
}

// ListByRepo mocks base method.
func (m *MockIssuesService) ListByRepo(arg0 context.Context, arg1, arg2 string, arg3 *github.IssueListByRepoOptions) ([]*github.Issue, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByRepo", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.Issue)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByRepo indicates an expected call of ListByRepo.
func (mr *MockIssuesServiceMockRecorder) ListByRepo(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByRepo", reflect.TypeOf((*MockIssuesService)(nil).ListByRepo), arg0, arg1, arg2, arg3)
}

// ListComments mocks base method.
func (m *MockIssuesService) ListComments(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.IssueListCommentsOptions) ([]*github.IssueComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComments", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.IssueComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListComments indicates an expected call of ListComments.
func (mr *MockIssuesServiceMockRecorder) ListComments(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComments", reflect.TypeOf((*MockIssuesService)(nil).ListComments), arg0, arg1, arg2, arg3, arg4)
}

// ListIssueEvents mocks base method.
func (m *MockIssuesService) ListIssueEvents(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.ListOptions) ([]*github.IssueEvent, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIssueEvents", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.IssueEvent)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListIssueEvents indicates an expected call of ListIssueEvents.
func (mr *MockIssuesServiceMockRecorder) ListIssueEvents(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssueEvents", reflect.TypeOf((*MockIssuesService)(nil).ListIssueEvents), arg0, arg1, arg2, arg3, arg4)
}

// ListIssueTimeline mocks base method.
func (m *MockIssuesService) ListIssueTimeline(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.ListOptions) ([]*github.Timeline, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIssueTimeline", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.Timeline)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListIssueTimeline indicates an expected call of ListIssueTimeline.
func (mr *MockIssuesServiceMockRecorder) ListIssueTimeline(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssueTimeline", reflect.TypeOf((*MockIssuesService)(nil).ListIssueTimeline), arg0, arg1, arg2, arg3, arg4)
}

// ListLabels mocks base method.
func (m *MockIssuesService) ListLabels(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) ([]*github.Label, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLabels", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.Label)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListLabels indicates an expected call of ListLabels.
func (mr *MockIssuesServiceMockRecorder) ListLabels(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLabels", reflect.TypeOf((*MockIssuesService)(nil).ListLabels), arg0, arg1, arg2, arg3)
}

// ListLabelsByIssue mocks base method.
func (m *MockIssuesService) ListLabelsByIssue(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.ListOptions) ([]*github.Label, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLabelsByIssue", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.Label)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListLabelsByIssue indicates an expected call of ListLabelsByIssue.
func (mr *MockIssuesServiceMockRecorder) ListLabelsByIssue(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLabelsByIssue", reflect.TypeOf((*MockIssuesService)(nil).ListLabelsByIssue), arg0, arg1, arg2, arg3, arg4)
}

// ListLabelsForMilestone mocks base method.
func (m *MockIssuesService) ListLabelsForMilestone(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.ListOptions) ([]*github.Label, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLabelsForMilestone", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.Label)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListLabelsForMilestone indicates an expected call of ListLabelsForMilestone.
func (mr *MockIssuesServiceMockRecorder) ListLabelsForMilestone(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLabelsForMilestone", reflect.TypeOf((*MockIssuesService)(nil).ListLabelsForMilestone), arg0, arg1, arg2, arg3, arg4)
}

// ListMilestones mocks base method.
func (m *MockIssuesService) ListMilestones(arg0 context.Context, arg1, arg2 string, arg3 *github.MilestoneListOptions) ([]*github.Milestone, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMilestones", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.Milestone)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMilestones indicates an expected call of ListMilestones.
func (mr *MockIssuesServiceMockRecorder) ListMilestones(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMilestones", reflect.TypeOf((*MockIssuesService)(nil).ListMilestones), arg0, arg1, arg2, arg3)
}

// ListRepositoryEvents mocks base method.
func (m *MockIssuesService) ListRepositoryEvents(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) ([]*github.IssueEvent, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoryEvents", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.IssueEvent)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRepositoryEvents indicates an expected call of ListRepositoryEvents.
func (mr *MockIssuesServiceMockRecorder) ListRepositoryEvents(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoryEvents", reflect.TypeOf((*MockIssuesService)(nil).ListRepositoryEvents), arg0, arg1, arg2, arg3)
}

// Lock mocks base method.
func (m *MockIssuesService) Lock(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.LockIssueOptions) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lock indicates an expected call of Lock.
func (mr *MockIssuesServiceMockRecorder) Lock(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockIssuesService)(nil).Lock), arg0, arg1, arg2, arg3, arg4)
}

// RemoveAssignees mocks base method.
func (m *MockIssuesService) RemoveAssignees(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 []string) (*github.Issue, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAssignees", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Issue)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RemoveAssignees indicates an expected call of RemoveAssignees.
func (mr *MockIssuesServiceMockRecorder) RemoveAssignees(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAssignees", reflect.TypeOf((*MockIssuesService)(nil).RemoveAssignees), arg0, arg1, arg2, arg3, arg4)
}

// RemoveLabelForIssue mocks base method.
func (m *MockIssuesService) RemoveLabelForIssue(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLabelForIssue", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLabelForIssue indicates an expected call of RemoveLabelForIssue.
func (mr *MockIssuesServiceMockRecorder) RemoveLabelForIssue(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLabelForIssue", reflect.TypeOf((*MockIssuesService)(nil).RemoveLabelForIssue), arg0, arg1, arg2, arg3, arg4)
}

// RemoveLabelsForIssue mocks base method.
func (m *MockIssuesService) RemoveLabelsForIssue(arg0 context.Context, arg1, arg2 string, arg3 int) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLabelsForIssue", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLabelsForIssue indicates an expected call of RemoveLabelsForIssue.
func (mr *MockIssuesServiceMockRecorder) RemoveLabelsForIssue(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLabelsForIssue", reflect.TypeOf((*MockIssuesService)(nil).RemoveLabelsForIssue), arg0, arg1, arg2, arg3)
}

// RemoveMilestone mocks base method.
func (m *MockIssuesService) RemoveMilestone(arg0 context.Context, arg1, arg2 string, arg3 int) (*github.Issue, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMilestone", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Issue)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RemoveMilestone indicates an expected call of RemoveMilestone.
func (mr *MockIssuesServiceMockRecorder) RemoveMilestone(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMilestone", reflect.TypeOf((*MockIssuesService)(nil).RemoveMilestone), arg0, arg1, arg2, arg3)
}

// ReplaceLabelsForIssue mocks base method.
func (m *MockIssuesService) ReplaceLabelsForIssue(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 []string) ([]*github.Label, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceLabelsForIssue", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.Label)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReplaceLabelsForIssue indicates an expected call of ReplaceLabelsForIssue.
func (mr *MockIssuesServiceMockRecorder) ReplaceLabelsForIssue(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceLabelsForIssue", reflect.TypeOf((*MockIssuesService)(nil).ReplaceLabelsForIssue), arg0, arg1, arg2, arg3, arg4)
}

// Unlock mocks base method.
func (m *MockIssuesService) Unlock(arg0 context.Context, arg1, arg2 string, arg3 int) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlock", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unlock indicates an expected call of Unlock.
func (mr *MockIssuesServiceMockRecorder) Unlock(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockIssuesService)(nil).Unlock), arg0, arg1, arg2, arg3)
}

// MockLicensesService is a mock of LicensesService interface.
type MockLicensesService struct {
	ctrl     *gomock.Controller
	recorder *MockLicensesServiceMockRecorder
}

// MockLicensesServiceMockRecorder is the mock recorder for MockLicensesService.
type MockLicensesServiceMockRecorder struct {
	mock *MockLicensesService
}

// NewMockLicensesService creates a new mock instance.
func NewMockLicensesService(ctrl *gomock.Controller) *MockLicensesService {
	mock := &MockLicensesService{ctrl: ctrl}
	mock.recorder = &MockLicensesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLicensesService) EXPECT() *MockLicensesServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockLicensesService) Get(arg0 context.Context, arg1 string) (*github.License, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*github.License)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockLicensesServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLicensesService)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockLicensesService) List(arg0 context.Context) ([]*github.License, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*github.License)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockLicensesServiceMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLicensesService)(nil).List), arg0)
}

// MockMarketplaceService is a mock of MarketplaceService interface.
type MockMarketplaceService struct {
	ctrl     *gomock.Controller
	recorder *MockMarketplaceServiceMockRecorder
}

// MockMarketplaceServiceMockRecorder is the mock recorder for MockMarketplaceService.
type MockMarketplaceServiceMockRecorder struct {
	mock *MockMarketplaceService
}

// NewMockMarketplaceService creates a new mock instance.
func NewMockMarketplaceService(ctrl *gomock.Controller) *MockMarketplaceService {
	mock := &MockMarketplaceService{ctrl: ctrl}
	mock.recorder = &MockMarketplaceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarketplaceService) EXPECT() *MockMarketplaceServiceMockRecorder {
	return m.recorder
}

// GetPlanAccountForAccount mocks base method.
func (m *MockMarketplaceService) GetPlanAccountForAccount(arg0 context.Context, arg1 int64) (*github.MarketplacePlanAccount, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlanAccountForAccount", arg0, arg1)
	ret0, _ := ret[0].(*github.MarketplacePlanAccount)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPlanAccountForAccount indicates an expected call of GetPlanAccountForAccount.
func (mr *MockMarketplaceServiceMockRecorder) GetPlanAccountForAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlanAccountForAccount", reflect.TypeOf((*MockMarketplaceService)(nil).GetPlanAccountForAccount), arg0, arg1)
}

// ListMarketplacePurchasesForUser mocks base method.
func (m *MockMarketplaceService) ListMarketplacePurchasesForUser(arg0 context.Context, arg1 *github.ListOptions) ([]*github.MarketplacePurchase, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMarketplacePurchasesForUser", arg0, arg1)
	ret0, _ := ret[0].([]*github.MarketplacePurchase)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMarketplacePurchasesForUser indicates an expected call of ListMarketplacePurchasesForUser.
func (mr *MockMarketplaceServiceMockRecorder) ListMarketplacePurchasesForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMarketplacePurchasesForUser", reflect.TypeOf((*MockMarketplaceService)(nil).ListMarketplacePurchasesForUser), arg0, arg1)
}

// ListPlanAccountsForPlan mocks base method.
func (m *MockMarketplaceService) ListPlanAccountsForPlan(arg0 context.Context, arg1 int64, arg2 *github.ListOptions) ([]*github.MarketplacePlanAccount, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlanAccountsForPlan", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.MarketplacePlanAccount)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPlanAccountsForPlan indicates an expected call of ListPlanAccountsForPlan.
func (mr *MockMarketplaceServiceMockRecorder) ListPlanAccountsForPlan(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlanAccountsForPlan", reflect.TypeOf((*MockMarketplaceService)(nil).ListPlanAccountsForPlan), arg0, arg1, arg2)
}

// ListPlans mocks base method.
func (m *MockMarketplaceService) ListPlans(arg0 context.Context, arg1 *github.ListOptions) ([]*github.MarketplacePlan, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlans", arg0, arg1)
	ret0, _ := ret[0].([]*github.MarketplacePlan)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPlans indicates an expected call of ListPlans.
func (mr *MockMarketplaceServiceMockRecorder) ListPlans(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlans", reflect.TypeOf((*MockMarketplaceService)(nil).ListPlans), arg0, arg1)
}

// MockMigrationsService is a mock of MigrationsService interface.
type MockMigrationsService struct {
	ctrl     *gomock.Controller
	recorder *MockMigrationsServiceMockRecorder
}

// MockMigrationsServiceMockRecorder is the mock recorder for MockMigrationsService.
type MockMigrationsServiceMockRecorder struct {
	mock *MockMigrationsService
}

// NewMockMigrationsService creates a new mock instance.
func NewMockMigrationsService(ctrl *gomock.Controller) *MockMigrationsService {
	mock := &MockMigrationsService{ctrl: ctrl}
	mock.recorder = &MockMigrationsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMigrationsService) EXPECT() *MockMigrationsServiceMockRecorder {
	return m.recorder
}

// CancelImport mocks base method.
func (m *MockMigrationsService) CancelImport(arg0 context.Context, arg1, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelImport", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelImport indicates an expected call of CancelImport.
func (mr *MockMigrationsServiceMockRecorder) CancelImport(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelImport", reflect.TypeOf((*MockMigrationsService)(nil).CancelImport), arg0, arg1, arg2)
}

// CommitAuthors mocks base method.
func (m *MockMigrationsService) CommitAuthors(arg0 context.Context, arg1, arg2 string) ([]*github.SourceImportAuthor, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitAuthors", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.SourceImportAuthor)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CommitAuthors indicates an expected call of CommitAuthors.
func (mr *MockMigrationsServiceMockRecorder) CommitAuthors(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitAuthors", reflect.TypeOf((*MockMigrationsService)(nil).CommitAuthors), arg0, arg1, arg2)
}

// DeleteMigration mocks base method.
func (m *MockMigrationsService) DeleteMigration(arg0 context.Context, arg1 string, arg2 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMigration", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMigration indicates an expected call of DeleteMigration.
func (mr *MockMigrationsServiceMockRecorder) DeleteMigration(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMigration", reflect.TypeOf((*MockMigrationsService)(nil).DeleteMigration), arg0, arg1, arg2)
}

// DeleteUserMigration mocks base method.
func (m *MockMigrationsService) DeleteUserMigration(arg0 context.Context, arg1 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserMigration", arg0, arg1)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserMigration indicates an expected call of DeleteUserMigration.
func (mr *MockMigrationsServiceMockRecorder) DeleteUserMigration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserMigration", reflect.TypeOf((*MockMigrationsService)(nil).DeleteUserMigration), arg0, arg1)
}

// ImportProgress mocks base method.
func (m *MockMigrationsService) ImportProgress(arg0 context.Context, arg1, arg2 string) (*github.Import, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportProgress", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Import)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ImportProgress indicates an expected call of ImportProgress.
func (mr *MockMigrationsServiceMockRecorder) ImportProgress(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportProgress", reflect.TypeOf((*MockMigrationsService)(nil).ImportProgress), arg0, arg1, arg2)
}

// LargeFiles mocks base method.
func (m *MockMigrationsService) LargeFiles(arg0 context.Context, arg1, arg2 string) ([]*github.LargeFile, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LargeFiles", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.LargeFile)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LargeFiles indicates an expected call of LargeFiles.
func (mr *MockMigrationsServiceMockRecorder) LargeFiles(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LargeFiles", reflect.TypeOf((*MockMigrationsService)(nil).LargeFiles), arg0, arg1, arg2)
}

// ListMigrations mocks base method.
func (m *MockMigrationsService) ListMigrations(arg0 context.Context, arg1 string, arg2 *github.ListOptions) ([]*github.Migration, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMigrations", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.Migration)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMigrations indicates an expected call of ListMigrations.
func (mr *MockMigrationsServiceMockRecorder) ListMigrations(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMigrations", reflect.TypeOf((*MockMigrationsService)(nil).ListMigrations), arg0, arg1, arg2)
}

// ListUserMigrations mocks base method.
func (m *MockMigrationsService) ListUserMigrations(arg0 context.Context, arg1 *github.ListOptions) ([]*github.UserMigration, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserMigrations", arg0, arg1)
	ret0, _ := ret[0].([]*github.UserMigration)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUserMigrations indicates an expected call of ListUserMigrations.
func (mr *MockMigrationsServiceMockRecorder) ListUserMigrations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserMigrations", reflect.TypeOf((*MockMigrationsService)(nil).ListUserMigrations), arg0, arg1)
}

// MapCommitAuthor mocks base method.
func (m *MockMigrationsService) MapCommitAuthor(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 *github.SourceImportAuthor) (*github.SourceImportAuthor, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapCommitAuthor", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.SourceImportAuthor)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MapCommitAuthor indicates an expected call of MapCommitAuthor.
func (mr *MockMigrationsServiceMockRecorder) MapCommitAuthor(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapCommitAuthor", reflect.TypeOf((*MockMigrationsService)(nil).MapCommitAuthor), arg0, arg1, arg2, arg3, arg4)
}

// MigrationArchiveURL mocks base method.
func (m *MockMigrationsService) MigrationArchiveURL(arg0 context.Context, arg1 string, arg2 int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrationArchiveURL", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrationArchiveURL indicates an expected call of MigrationArchiveURL.
func (mr *MockMigrationsServiceMockRecorder) MigrationArchiveURL(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrationArchiveURL", reflect.TypeOf((*MockMigrationsService)(nil).MigrationArchiveURL), arg0, arg1, arg2)
}

// MigrationStatus mocks base method.
func (m *MockMigrationsService) MigrationStatus(arg0 context.Context, arg1 string, arg2 int64) (*github.Migration, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrationStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Migration)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MigrationStatus indicates an expected call of MigrationStatus.
func (mr *MockMigrationsServiceMockRecorder) MigrationStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrationStatus", reflect.TypeOf((*MockMigrationsService)(nil).MigrationStatus), arg0, arg1, arg2)
}

// SetLFSPreference mocks base method.
func (m *MockMigrationsService) SetLFSPreference(arg0 context.Context, arg1, arg2 string, arg3 *github.Import) (*github.Import, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLFSPreference", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Import)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetLFSPreference indicates an expected call of SetLFSPreference.
func (mr *MockMigrationsServiceMockRecorder) SetLFSPreference(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLFSPreference", reflect.TypeOf((*MockMigrationsService)(nil).SetLFSPreference), arg0, arg1, arg2, arg3)
}

// StartImport mocks base method.
func (m *MockMigrationsService) StartImport(arg0 context.Context, arg1, arg2 string, arg3 *github.Import) (*github.Import, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartImport", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Import)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StartImport indicates an expected call of StartImport.
func (mr *MockMigrationsServiceMockRecorder) StartImport(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartImport", reflect.TypeOf((*MockMigrationsService)(nil).StartImport), arg0, arg1, arg2, arg3)
}

// StartMigration mocks base method.
func (m *MockMigrationsService) StartMigration(arg0 context.Context, arg1 string, arg2 []string, arg3 *github.MigrationOptions) (*github.Migration, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartMigration", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Migration)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StartMigration indicates an expected call of StartMigration.
func (mr *MockMigrationsServiceMockRecorder) StartMigration(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMigration", reflect.TypeOf((*MockMigrationsService)(nil).StartMigration), arg0, arg1, arg2, arg3)
}

// StartUserMigration mocks base method.
func (m *MockMigrationsService) StartUserMigration(arg0 context.Context, arg1 []string, arg2 *github.UserMigrationOptions) (*github.UserMigration, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartUserMigration", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.UserMigration)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StartUserMigration indicates an expected call of StartUserMigration.
func (mr *MockMigrationsServiceMockRecorder) StartUserMigration(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartUserMigration", reflect.TypeOf((*MockMigrationsService)(nil).StartUserMigration), arg0, arg1, arg2)
}

// UnlockRepo mocks base method.
func (m *MockMigrationsService) UnlockRepo(arg0 context.Context, arg1 string, arg2 int64, arg3 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockRepo", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlockRepo indicates an expected call of UnlockRepo.
func (mr *MockMigrationsServiceMockRecorder) UnlockRepo(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockRepo", reflect.TypeOf((*MockMigrationsService)(nil).UnlockRepo), arg0, arg1, arg2, arg3)
}

// UnlockUserRepo mocks base method.
func (m *MockMigrationsService) UnlockUserRepo(arg0 context.Context, arg1 int64, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockUserRepo", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlockUserRepo indicates an expected call of UnlockUserRepo.
func (mr *MockMigrationsServiceMockRecorder) UnlockUserRepo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockUserRepo", reflect.TypeOf((*MockMigrationsService)(nil).UnlockUserRepo), arg0, arg1, arg2)
}

// UpdateImport mocks base method.
func (m *MockMigrationsService) UpdateImport(arg0 context.Context, arg1, arg2 string, arg3 *github.Import) (*github.Import, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImport", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Import)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateImport indicates an expected call of UpdateImport.
func (mr *MockMigrationsServiceMockRecorder) UpdateImport(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImport", reflect.TypeOf((*MockMigrationsService)(nil).UpdateImport), arg0, arg1, arg2, arg3)
}

// UserMigrationArchiveURL mocks base method.
func (m *MockMigrationsService) UserMigrationArchiveURL(arg0 context.Context, arg1 int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserMigrationArchiveURL", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserMigrationArchiveURL indicates an expected call of UserMigrationArchiveURL.
func (mr *MockMigrationsServiceMockRecorder) UserMigrationArchiveURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserMigrationArchiveURL", reflect.TypeOf((*MockMigrationsService)(nil).UserMigrationArchiveURL), arg0, arg1)
}

// UserMigrationStatus mocks base method.
func (m *MockMigrationsService) UserMigrationStatus(arg0 context.Context, arg1 int64) (*github.UserMigration, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserMigrationStatus", arg0, arg1)
	ret0, _ := ret[0].(*github.UserMigration)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserMigrationStatus indicates an expected call of UserMigrationStatus.
func (mr *MockMigrationsServiceMockRecorder) UserMigrationStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserMigrationStatus", reflect.TypeOf((*MockMigrationsService)(nil).UserMigrationStatus), arg0, arg1)
}

// MockOrganizationsService is a mock of OrganizationsService interface.
type MockOrganizationsService struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationsServiceMockRecorder
}

// MockOrganizationsServiceMockRecorder is the mock recorder for MockOrganizationsService.
type MockOrganizationsServiceMockRecorder struct {
	mock *MockOrganizationsService
}

// NewMockOrganizationsService creates a new mock instance.
func NewMockOrganizationsService(ctrl *gomock.Controller) *MockOrganizationsService {
	mock := &MockOrganizationsService{ctrl: ctrl}
	mock.recorder = &MockOrganizationsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationsService) EXPECT() *MockOrganizationsServiceMockRecorder {
	return m.recorder
}

// BlockUser mocks base method.
func (m *MockOrganizationsService) BlockUser(arg0 context.Context, arg1, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockUser indicates an expected call of BlockUser.
func (mr *MockOrganizationsServiceMockRecorder) BlockUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockUser", reflect.TypeOf((*MockOrganizationsService)(nil).BlockUser), arg0, arg1, arg2)
}

// ConcealMembership mocks base method.
func (m *MockOrganizationsService) ConcealMembership(arg0 context.Context, arg1, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConcealMembership", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConcealMembership indicates an expected call of ConcealMembership.
func (mr *MockOrganizationsServiceMockRecorder) ConcealMembership(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConcealMembership", reflect.TypeOf((*MockOrganizationsService)(nil).ConcealMembership), arg0, arg1, arg2)
}

// ConvertMemberToOutsideCollaborator mocks base method.
func (m *MockOrganizationsService) ConvertMemberToOutsideCollaborator(arg0 context.Context, arg1, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertMemberToOutsideCollaborator", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertMemberToOutsideCollaborator indicates an expected call of ConvertMemberToOutsideCollaborator.
func (mr *MockOrganizationsServiceMockRecorder) ConvertMemberToOutsideCollaborator(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertMemberToOutsideCollaborator", reflect.TypeOf((*MockOrganizationsService)(nil).ConvertMemberToOutsideCollaborator), arg0, arg1, arg2)
}

// CreateCustomRepoRole mocks base method.
func (m *MockOrganizationsService) CreateCustomRepoRole(arg0 context.Context, arg1 string, arg2 *github.CreateOrUpdateCustomRoleOptions) (*github.CustomRepoRoles, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomRepoRole", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.CustomRepoRoles)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCustomRepoRole indicates an expected call of CreateCustomRepoRole.
func (mr *MockOrganizationsServiceMockRecorder) CreateCustomRepoRole(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomRepoRole", reflect.TypeOf((*MockOrganizationsService)(nil).CreateCustomRepoRole), arg0, arg1, arg2)
}

// CreateHook mocks base method.
func (m *MockOrganizationsService) CreateHook(arg0 context.Context, arg1 string, arg2 *github.Hook) (*github.Hook, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHook", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Hook)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateHook indicates an expected call of CreateHook.
func (mr *MockOrganizationsServiceMockRecorder) CreateHook(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHook", reflect.TypeOf((*MockOrganizationsService)(nil).CreateHook), arg0, arg1, arg2)
}

// CreateOrgInvitation mocks base method.
func (m *MockOrganizationsService) CreateOrgInvitation(arg0 context.Context, arg1 string, arg2 *github.CreateOrgInvitationOptions) (*github.Invitation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrgInvitation", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Invitation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateOrgInvitation indicates an expected call of CreateOrgInvitation.
func (mr *MockOrganizationsServiceMockRecorder) CreateOrgInvitation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrgInvitation", reflect.TypeOf((*MockOrganizationsService)(nil).CreateOrgInvitation), arg0, arg1, arg2)
}

// CreateProject mocks base method.
func (m *MockOrganizationsService) CreateProject(arg0 context.Context, arg1 string, arg2 *github.ProjectOptions) (*github.Project, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Project)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockOrganizationsServiceMockRecorder) CreateProject(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockOrganizationsService)(nil).CreateProject), arg0, arg1, arg2)
}

// DeleteCustomRepoRole mocks base method.
func (m *MockOrganizationsService) DeleteCustomRepoRole(arg0 context.Context, arg1, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomRepoRole", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomRepoRole indicates an expected call of DeleteCustomRepoRole.
func (mr *MockOrganizationsServiceMockRecorder) DeleteCustomRepoRole(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomRepoRole", reflect.TypeOf((*MockOrganizationsService)(nil).DeleteCustomRepoRole), arg0, arg1, arg2)
}

// DeleteHook mocks base method.
func (m *MockOrganizationsService) DeleteHook(arg0 context.Context, arg1 string, arg2 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHook", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHook indicates an expected call of DeleteHook.
func (mr *MockOrganizationsServiceMockRecorder) DeleteHook(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHook", reflect.TypeOf((*MockOrganizationsService)(nil).DeleteHook), arg0, arg1, arg2)
}

// DeletePackage mocks base method.
func (m *MockOrganizationsService) DeletePackage(arg0 context.Context, arg1, arg2, arg3 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePackage", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePackage indicates an expected call of DeletePackage.
func (mr *MockOrganizationsServiceMockRecorder) DeletePackage(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePackage", reflect.TypeOf((*MockOrganizationsService)(nil).DeletePackage), arg0, arg1, arg2, arg3)
}

// Edit mocks base method.
func (m *MockOrganizationsService) Edit(arg0 context.Context, arg1 string, arg2 *github.Organization) (*github.Organization, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Organization)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Edit indicates an expected call of Edit.
func (mr *MockOrganizationsServiceMockRecorder) Edit(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockOrganizationsService)(nil).Edit), arg0, arg1, arg2)
}

// EditActionsAllowed mocks base method.
func (m *MockOrganizationsService) EditActionsAllowed(arg0 context.Context, arg1 string, arg2 github.ActionsAllowed) (*github.ActionsAllowed, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditActionsAllowed", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.ActionsAllowed)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditActionsAllowed indicates an expected call of EditActionsAllowed.
func (mr *MockOrganizationsServiceMockRecorder) EditActionsAllowed(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditActionsAllowed", reflect.TypeOf((*MockOrganizationsService)(nil).EditActionsAllowed), arg0, arg1, arg2)
}

// EditActionsPermissions mocks base method.
func (m *MockOrganizationsService) EditActionsPermissions(arg0 context.Context, arg1 string, arg2 github.ActionsPermissions) (*github.ActionsPermissions, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditActionsPermissions", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.ActionsPermissions)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditActionsPermissions indicates an expected call of EditActionsPermissions.
func (mr *MockOrganizationsServiceMockRecorder) EditActionsPermissions(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditActionsPermissions", reflect.TypeOf((*MockOrganizationsService)(nil).EditActionsPermissions), arg0, arg1, arg2)
}

// EditHook mocks base method.
func (m *MockOrganizationsService) EditHook(arg0 context.Context, arg1 string, arg2 int64, arg3 *github.Hook) (*github.Hook, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditHook", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Hook)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditHook indicates an expected call of EditHook.
func (mr *MockOrganizationsServiceMockRecorder) EditHook(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditHook", reflect.TypeOf((*MockOrganizationsService)(nil).EditHook), arg0, arg1, arg2, arg3)
}

// EditOrgMembership mocks base method.
func (m *MockOrganizationsService) EditOrgMembership(arg0 context.Context, arg1, arg2 string, arg3 *github.Membership) (*github.Membership, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditOrgMembership", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Membership)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditOrgMembership indicates an expected call of EditOrgMembership.
func (mr *MockOrganizationsServiceMockRecorder) EditOrgMembership(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditOrgMembership", reflect.TypeOf((*MockOrganizationsService)(nil).EditOrgMembership), arg0, arg1, arg2, arg3)
}

// Get mocks base method.
func (m *MockOrganizationsService) Get(arg0 context.Context, arg1 string) (*github.Organization, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*github.Organization)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockOrganizationsServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOrganizationsService)(nil).Get), arg0, arg1)
}

// GetActionsAllowed mocks base method.
func (m *MockOrganizationsService) GetActionsAllowed(arg0 context.Context, arg1 string) (*github.ActionsAllowed, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionsAllowed", arg0, arg1)
	ret0, _ := ret[0].(*github.ActionsAllowed)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetActionsAllowed indicates an expected call of GetActionsAllowed.
func (mr *MockOrganizationsServiceMockRecorder) GetActionsAllowed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionsAllowed", reflect.TypeOf((*MockOrganizationsService)(nil).GetActionsAllowed), arg0, arg1)
}

// GetActionsPermissions mocks base method.
func (m *MockOrganizationsService) GetActionsPermissions(arg0 context.Context, arg1 string) (*github.ActionsPermissions, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionsPermissions", arg0, arg1)
	ret0, _ := ret[0].(*github.ActionsPermissions)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetActionsPermissions indicates an expected call of GetActionsPermissions.
func (mr *MockOrganizationsServiceMockRecorder) GetActionsPermissions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionsPermissions", reflect.TypeOf((*MockOrganizationsService)(nil).GetActionsPermissions), arg0, arg1)
}

// GetAuditLog mocks base method.
func (m *MockOrganizationsService) GetAuditLog(arg0 context.Context, arg1 string, arg2 *github.GetAuditLogOptions) ([]*github.AuditEntry, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuditLog", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.AuditEntry)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAuditLog indicates an expected call of GetAuditLog.
func (mr *MockOrganizationsServiceMockRecorder) GetAuditLog(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuditLog", reflect.TypeOf((*MockOrganizationsService)(nil).GetAuditLog), arg0, arg1, arg2)
}

// GetByID mocks base method.
func (m *MockOrganizationsService) GetByID(arg0 context.Context, arg1 int64) (*github.Organization, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*github.Organization)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByID indicates an expected call of GetByID.
func (mr *MockOrganizationsServiceMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockOrganizationsService)(nil).GetByID), arg0, arg1)
}

// GetHook mocks base method.
func (m *MockOrganizationsService) GetHook(arg0 context.Context, arg1 string, arg2 int64) (*github.Hook, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHook", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Hook)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetHook indicates an expected call of GetHook.
func (mr *MockOrganizationsServiceMockRecorder) GetHook(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHook", reflect.TypeOf((*MockOrganizationsService)(nil).GetHook), arg0, arg1, arg2)
}

// GetHookDelivery mocks base method.
func (m *MockOrganizationsService) GetHookDelivery(arg0 context.Context, arg1 string, arg2, arg3 int64) (*github.HookDelivery, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHookDelivery", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.HookDelivery)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetHookDelivery indicates an expected call of GetHookDelivery.
func (mr *MockOrganizationsServiceMockRecorder) GetHookDelivery(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHookDelivery", reflect.TypeOf((*MockOrganizationsService)(nil).GetHookDelivery), arg0, arg1, arg2, arg3)
}

// GetOrgMembership mocks base method.
func (m *MockOrganizationsService) GetOrgMembership(arg0 context.Context, arg1, arg2 string) (*github.Membership, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrgMembership", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Membership)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrgMembership indicates an expected call of GetOrgMembership.
func (mr *MockOrganizationsServiceMockRecorder) GetOrgMembership(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgMembership", reflect.TypeOf((*MockOrganizationsService)(nil).GetOrgMembership), arg0, arg1, arg2)
}

// GetPackage mocks base method.
func (m *MockOrganizationsService) GetPackage(arg0 context.Context, arg1, arg2, arg3 string) (*github.Package, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackage", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Package)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPackage indicates an expected call of GetPackage.
func (mr *MockOrganizationsServiceMockRecorder) GetPackage(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackage", reflect.TypeOf((*MockOrganizationsService)(nil).GetPackage), arg0, arg1, arg2, arg3)
}

// IsBlocked mocks base method.
func (m *MockOrganizationsService) IsBlocked(arg0 context.Context, arg1, arg2 string) (bool, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBlocked", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsBlocked indicates an expected call of IsBlocked.
func (mr *MockOrganizationsServiceMockRecorder) IsBlocked(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBlocked", reflect.TypeOf((*MockOrganizationsService)(nil).IsBlocked), arg0, arg1, arg2)
}

// IsMember mocks base method.
func (m *MockOrganizationsService) IsMember(arg0 context.Context, arg1, arg2 string) (bool, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMember", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsMember indicates an expected call of IsMember.
func (mr *MockOrganizationsServiceMockRecorder) IsMember(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMember", reflect.TypeOf((*MockOrganizationsService)(nil).IsMember), arg0, arg1, arg2)
}

// IsPublicMember mocks base method.
func (m *MockOrganizationsService) IsPublicMember(arg0 context.Context, arg1, arg2 string) (bool, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPublicMember", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsPublicMember indicates an expected call of IsPublicMember.
func (mr *MockOrganizationsServiceMockRecorder) IsPublicMember(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPublicMember", reflect.TypeOf((*MockOrganizationsService)(nil).IsPublicMember), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockOrganizationsService) List(arg0 context.Context, arg1 string, arg2 *github.ListOptions) ([]*github.Organization, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.Organization)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockOrganizationsServiceMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOrganizationsService)(nil).List), arg0, arg1, arg2)
}

// ListAll mocks base method.
func (m *MockOrganizationsService) ListAll(arg0 context.Context, arg1 *github.OrganizationsListOptions) ([]*github.Organization, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", arg0, arg1)
	ret0, _ := ret[0].([]*github.Organization)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAll indicates an expected call of ListAll.
func (mr *MockOrganizationsServiceMockRecorder) ListAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockOrganizationsService)(nil).ListAll), arg0, arg1)
}

// ListBlockedUsers mocks base method.
func (m *MockOrganizationsService) ListBlockedUsers(arg0 context.Context, arg1 string, arg2 *github.ListOptions) ([]*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBlockedUsers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBlockedUsers indicates an expected call of ListBlockedUsers.
func (mr *MockOrganizationsServiceMockRecorder) ListBlockedUsers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBlockedUsers", reflect.TypeOf((*MockOrganizationsService)(nil).ListBlockedUsers), arg0, arg1, arg2)
}

// ListCustomRepoRoles mocks base method.
func (m *MockOrganizationsService) ListCustomRepoRoles(arg0 context.Context, arg1 string) (*github.OrganizationCustomRepoRoles, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomRepoRoles", arg0, arg1)
	ret0, _ := ret[0].(*github.OrganizationCustomRepoRoles)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCustomRepoRoles indicates an expected call of ListCustomRepoRoles.
func (mr *MockOrganizationsServiceMockRecorder) ListCustomRepoRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomRepoRoles", reflect.TypeOf((*MockOrganizationsService)(nil).ListCustomRepoRoles), arg0, arg1)
}

// ListFailedOrgInvitations mocks base method.
func (m *MockOrganizationsService) ListFailedOrgInvitations(arg0 context.Context, arg1 string, arg2 *github.ListOptions) ([]*github.Invitation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFailedOrgInvitations", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.Invitation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFailedOrgInvitations indicates an expected call of ListFailedOrgInvitations.
func (mr *MockOrganizationsServiceMockRecorder) ListFailedOrgInvitations(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFailedOrgInvitations", reflect.TypeOf((*MockOrganizationsService)(nil).ListFailedOrgInvitations), arg0, arg1, arg2)
}

// ListHookDeliveries mocks base method.
func (m *MockOrganizationsService) ListHookDeliveries(arg0 context.Context, arg1 string, arg2 int64, arg3 *github.ListCursorOptions) ([]*github.HookDelivery, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHookDeliveries", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.HookDelivery)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListHookDeliveries indicates an expected call of ListHookDeliveries.
func (mr *MockOrganizationsServiceMockRecorder) ListHookDeliveries(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHookDeliveries", reflect.TypeOf((*MockOrganizationsService)(nil).ListHookDeliveries), arg0, arg1, arg2, arg3)
}

// ListHooks mocks base method.
func (m *MockOrganizationsService) ListHooks(arg0 context.Context, arg1 string, arg2 *github.ListOptions) ([]*github.Hook, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHooks", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.Hook)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListHooks indicates an expected call of ListHooks.
func (mr *MockOrganizationsServiceMockRecorder) ListHooks(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHooks", reflect.TypeOf((*MockOrganizationsService)(nil).ListHooks), arg0, arg1, arg2)
}

// ListInstallations mocks base method.
func (m *MockOrganizationsService) ListInstallations(arg0 context.Context, arg1 string, arg2 *github.ListOptions) (*github.OrganizationInstallations, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstallations", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.OrganizationInstallations)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListInstallations indicates an expected call of ListInstallations.
func (mr *MockOrganizationsServiceMockRecorder) ListInstallations(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstallations", reflect.TypeOf((*MockOrganizationsService)(nil).ListInstallations), arg0, arg1, arg2)
}

// ListMembers mocks base method.
func (m *MockOrganizationsService) ListMembers(arg0 context.Context, arg1 string, arg2 *github.ListMembersOptions) ([]*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMembers indicates an expected call of ListMembers.
func (mr *MockOrganizationsServiceMockRecorder) ListMembers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembers", reflect.TypeOf((*MockOrganizationsService)(nil).ListMembers), arg0, arg1, arg2)
}

// ListOrgInvitationTeams mocks base method.
func (m *MockOrganizationsService) ListOrgInvitationTeams(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) ([]*github.Team, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrgInvitationTeams", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.Team)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrgInvitationTeams indicates an expected call of ListOrgInvitationTeams.
func (mr *MockOrganizationsServiceMockRecorder) ListOrgInvitationTeams(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrgInvitationTeams", reflect.TypeOf((*MockOrganizationsService)(nil).ListOrgInvitationTeams), arg0, arg1, arg2, arg3)
}

// ListOrgMemberships mocks base method.
func (m *MockOrganizationsService) ListOrgMemberships(arg0 context.Context, arg1 *github.ListOrgMembershipsOptions) ([]*github.Membership, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrgMemberships", arg0, arg1)
	ret0, _ := ret[0].([]*github.Membership)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrgMemberships indicates an expected call of ListOrgMemberships.
func (mr *MockOrganizationsServiceMockRecorder) ListOrgMemberships(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrgMemberships", reflect.TypeOf((*MockOrganizationsService)(nil).ListOrgMemberships), arg0, arg1)
}

// ListOutsideCollaborators mocks base method.
func (m *MockOrganizationsService) ListOutsideCollaborators(arg0 context.Context, arg1 string, arg2 *github.ListOutsideCollaboratorsOptions) ([]*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOutsideCollaborators", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOutsideCollaborators indicates an expected call of ListOutsideCollaborators.
func (mr *MockOrganizationsServiceMockRecorder) ListOutsideCollaborators(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOutsideCollaborators", reflect.TypeOf((*MockOrganizationsService)(nil).ListOutsideCollaborators), arg0, arg1, arg2)
}

// ListPackages mocks base method.
func (m *MockOrganizationsService) ListPackages(arg0 context.Context, arg1 string, arg2 *github.PackageListOptions) ([]*github.Package, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPackages", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.Package)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPackages indicates an expected call of ListPackages.
func (mr *MockOrganizationsServiceMockRecorder) ListPackages(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackages", reflect.TypeOf((*MockOrganizationsService)(nil).ListPackages), arg0, arg1, arg2)
}

// ListPendingOrgInvitations mocks base method.
func (m *MockOrganizationsService) ListPendingOrgInvitations(arg0 context.Context, arg1 string, arg2 *github.ListOptions) ([]*github.Invitation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPendingOrgInvitations", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.Invitation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPendingOrgInvitations indicates an expected call of ListPendingOrgInvitations.
func (mr *MockOrganizationsServiceMockRecorder) ListPendingOrgInvitations(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPendingOrgInvitations", reflect.TypeOf((*MockOrganizationsService)(nil).ListPendingOrgInvitations), arg0, arg1, arg2)
}

// ListProjects mocks base method.
func (m *MockOrganizationsService) ListProjects(arg0 context.Context, arg1 string, arg2 *github.ProjectListOptions) ([]*github.Project, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.Project)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockOrganizationsServiceMockRecorder) ListProjects(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockOrganizationsService)(nil).ListProjects), arg0, arg1, arg2)
}

// PackageDeleteVersion mocks base method.
func (m *MockOrganizationsService) PackageDeleteVersion(arg0 context.Context, arg1, arg2, arg3 string, arg4 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PackageDeleteVersion", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PackageDeleteVersion indicates an expected call of PackageDeleteVersion.
func (mr *MockOrganizationsServiceMockRecorder) PackageDeleteVersion(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PackageDeleteVersion", reflect.TypeOf((*MockOrganizationsService)(nil).PackageDeleteVersion), arg0, arg1, arg2, arg3, arg4)
}

// PackageGetAllVersions mocks base method.
func (m *MockOrganizationsService) PackageGetAllVersions(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.PackageListOptions) ([]*github.PackageVersion, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PackageGetAllVersions", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.PackageVersion)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PackageGetAllVersions indicates an expected call of PackageGetAllVersions.
func (mr *MockOrganizationsServiceMockRecorder) PackageGetAllVersions(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PackageGetAllVersions", reflect.TypeOf((*MockOrganizationsService)(nil).PackageGetAllVersions), arg0, arg1, arg2, arg3, arg4)
}

// PackageGetVersion mocks base method.
func (m *MockOrganizationsService) PackageGetVersion(arg0 context.Context, arg1, arg2, arg3 string, arg4 int64) (*github.PackageVersion, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PackageGetVersion", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.PackageVersion)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PackageGetVersion indicates an expected call of PackageGetVersion.
func (mr *MockOrganizationsServiceMockRecorder) PackageGetVersion(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PackageGetVersion", reflect.TypeOf((*MockOrganizationsService)(nil).PackageGetVersion), arg0, arg1, arg2, arg3, arg4)
}

// PackageRestoreVersion mocks base method.
func (m *MockOrganizationsService) PackageRestoreVersion(arg0 context.Context, arg1, arg2, arg3 string, arg4 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PackageRestoreVersion", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PackageRestoreVersion indicates an expected call of PackageRestoreVersion.
func (mr *MockOrganizationsServiceMockRecorder) PackageRestoreVersion(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PackageRestoreVersion", reflect.TypeOf((*MockOrganizationsService)(nil).PackageRestoreVersion), arg0, arg1, arg2, arg3, arg4)
}

// PingHook mocks base method.
func (m *MockOrganizationsService) PingHook(arg0 context.Context, arg1 string, arg2 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingHook", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingHook indicates an expected call of PingHook.
func (mr *MockOrganizationsServiceMockRecorder) PingHook(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingHook", reflect.TypeOf((*MockOrganizationsService)(nil).PingHook), arg0, arg1, arg2)
}

// PublicizeMembership mocks base method.
func (m *MockOrganizationsService) PublicizeMembership(arg0 context.Context, arg1, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicizeMembership", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicizeMembership indicates an expected call of PublicizeMembership.
func (mr *MockOrganizationsServiceMockRecorder) PublicizeMembership(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicizeMembership", reflect.TypeOf((*MockOrganizationsService)(nil).PublicizeMembership), arg0, arg1, arg2)
}

// RedeliverHookDelivery mocks base method.
func (m *MockOrganizationsService) RedeliverHookDelivery(arg0 context.Context, arg1 string, arg2, arg3 int64) (*github.HookDelivery, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedeliverHookDelivery", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.HookDelivery)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RedeliverHookDelivery indicates an expected call of RedeliverHookDelivery.
func (mr *MockOrganizationsServiceMockRecorder) RedeliverHookDelivery(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedeliverHookDelivery", reflect.TypeOf((*MockOrganizationsService)(nil).RedeliverHookDelivery), arg0, arg1, arg2, arg3)
}

// RemoveMember mocks base method.
func (m *MockOrganizationsService) RemoveMember(arg0 context.Context, arg1, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMember", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveMember indicates an expected call of RemoveMember.
func (mr *MockOrganizationsServiceMockRecorder) RemoveMember(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMember", reflect.TypeOf((*MockOrganizationsService)(nil).RemoveMember), arg0, arg1, arg2)
}

// RemoveOrgMembership mocks base method.
func (m *MockOrganizationsService) RemoveOrgMembership(arg0 context.Context, arg1, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOrgMembership", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveOrgMembership indicates an expected call of RemoveOrgMembership.
func (mr *MockOrganizationsServiceMockRecorder) RemoveOrgMembership(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOrgMembership", reflect.TypeOf((*MockOrganizationsService)(nil).RemoveOrgMembership), arg0, arg1, arg2)
}

// RemoveOutsideCollaborator mocks base method.
func (m *MockOrganizationsService) RemoveOutsideCollaborator(arg0 context.Context, arg1, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOutsideCollaborator", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveOutsideCollaborator indicates an expected call of RemoveOutsideCollaborator.
func (mr *MockOrganizationsServiceMockRecorder) RemoveOutsideCollaborator(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOutsideCollaborator", reflect.TypeOf((*MockOrganizationsService)(nil).RemoveOutsideCollaborator), arg0, arg1, arg2)
}

// RestorePackage mocks base method.
func (m *MockOrganizationsService) RestorePackage(arg0 context.Context, arg1, arg2, arg3 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestorePackage", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestorePackage indicates an expected call of RestorePackage.
func (mr *MockOrganizationsServiceMockRecorder) RestorePackage(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestorePackage", reflect.TypeOf((*MockOrganizationsService)(nil).RestorePackage), arg0, arg1, arg2, arg3)
}

// UnblockUser mocks base method.
func (m *MockOrganizationsService) UnblockUser(arg0 context.Context, arg1, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnblockUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnblockUser indicates an expected call of UnblockUser.
func (mr *MockOrganizationsServiceMockRecorder) UnblockUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnblockUser", reflect.TypeOf((*MockOrganizationsService)(nil).UnblockUser), arg0, arg1, arg2)
}

// UpdateCustomRepoRole mocks base method.
func (m *MockOrganizationsService) UpdateCustomRepoRole(arg0 context.Context, arg1, arg2 string, arg3 *github.CreateOrUpdateCustomRoleOptions) (*github.CustomRepoRoles, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomRepoRole", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.CustomRepoRoles)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateCustomRepoRole indicates an expected call of UpdateCustomRepoRole.
func (mr *MockOrganizationsServiceMockRecorder) UpdateCustomRepoRole(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomRepoRole", reflect.TypeOf((*MockOrganizationsService)(nil).UpdateCustomRepoRole), arg0, arg1, arg2, arg3)
}

// MockProjectsService is a mock of ProjectsService interface.
type MockProjectsService struct {
	ctrl     *gomock.Controller
	recorder *MockProjectsServiceMockRecorder
}

// MockProjectsServiceMockRecorder is the mock recorder for MockProjectsService.
type MockProjectsServiceMockRecorder struct {
	mock *MockProjectsService
}

// NewMockProjectsService creates a new mock instance.
func NewMockProjectsService(ctrl *gomock.Controller) *MockProjectsService {
	mock := &MockProjectsService{ctrl: ctrl}
	mock.recorder = &MockProjectsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectsService) EXPECT() *MockProjectsServiceMockRecorder {
	return m.recorder
}

// AddProjectCollaborator mocks base method.
func (m *MockProjectsService) AddProjectCollaborator(arg0 context.Context, arg1 int64, arg2 string, arg3 *github.ProjectCollaboratorOptions) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProjectCollaborator", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProjectCollaborator indicates an expected call of AddProjectCollaborator.
func (mr *MockProjectsServiceMockRecorder) AddProjectCollaborator(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProjectCollaborator", reflect.TypeOf((*MockProjectsService)(nil).AddProjectCollaborator), arg0, arg1, arg2, arg3)
}

// CreateProjectCard mocks base method.
func (m *MockProjectsService) CreateProjectCard(arg0 context.Context, arg1 int64, arg2 *github.ProjectCardOptions) (*github.ProjectCard, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectCard", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.ProjectCard)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateProjectCard indicates an expected call of CreateProjectCard.
func (mr *MockProjectsServiceMockRecorder) CreateProjectCard(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectCard", reflect.TypeOf((*MockProjectsService)(nil).CreateProjectCard), arg0, arg1, arg2)
}

// CreateProjectColumn mocks base method.
func (m *MockProjectsService) CreateProjectColumn(arg0 context.Context, arg1 int64, arg2 *github.ProjectColumnOptions) (*github.ProjectColumn, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectColumn", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.ProjectColumn)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateProjectColumn indicates an expected call of CreateProjectColumn.
func (mr *MockProjectsServiceMockRecorder) CreateProjectColumn(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectColumn", reflect.TypeOf((*MockProjectsService)(nil).CreateProjectColumn), arg0, arg1, arg2)
}

// DeleteProject mocks base method.
func (m *MockProjectsService) DeleteProject(arg0 context.Context, arg1 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", arg0, arg1)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockProjectsServiceMockRecorder) DeleteProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockProjectsService)(nil).DeleteProject), arg0, arg1)
}

// DeleteProjectCard mocks base method.
func (m *MockProjectsService) DeleteProjectCard(arg0 context.Context, arg1 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectCard", arg0, arg1)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectCard indicates an expected call of DeleteProjectCard.
func (mr *MockProjectsServiceMockRecorder) DeleteProjectCard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectCard", reflect.TypeOf((*MockProjectsService)(nil).DeleteProjectCard), arg0, arg1)
}

// DeleteProjectColumn mocks base method.
func (m *MockProjectsService) DeleteProjectColumn(arg0 context.Context, arg1 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectColumn", arg0, arg1)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectColumn indicates an expected call of DeleteProjectColumn.
func (mr *MockProjectsServiceMockRecorder) DeleteProjectColumn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectColumn", reflect.TypeOf((*MockProjectsService)(nil).DeleteProjectColumn), arg0, arg1)
}

// GetProject mocks base method.
func (m *MockProjectsService) GetProject(arg0 context.Context, arg1 int64) (*github.Project, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", arg0, arg1)
	ret0, _ := ret[0].(*github.Project)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProject indicates an expected call of GetProject.
func (mr *MockProjectsServiceMockRecorder) GetProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockProjectsService)(nil).GetProject), arg0, arg1)
}

// GetProjectCard mocks base method.
func (m *MockProjectsService) GetProjectCard(arg0 context.Context, arg1 int64) (*github.ProjectCard, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectCard", arg0, arg1)
	ret0, _ := ret[0].(*github.ProjectCard)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProjectCard indicates an expected call of GetProjectCard.
func (mr *MockProjectsServiceMockRecorder) GetProjectCard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectCard", reflect.TypeOf((*MockProjectsService)(nil).GetProjectCard), arg0, arg1)
}

// GetProjectColumn mocks base method.
func (m *MockProjectsService) GetProjectColumn(arg0 context.Context, arg1 int64) (*github.ProjectColumn, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectColumn", arg0, arg1)
	ret0, _ := ret[0].(*github.ProjectColumn)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProjectColumn indicates an expected call of GetProjectColumn.
func (mr *MockProjectsServiceMockRecorder) GetProjectColumn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectColumn", reflect.TypeOf((*MockProjectsService)(nil).GetProjectColumn), arg0, arg1)
}

// ListProjectCards mocks base method.
func (m *MockProjectsService) ListProjectCards(arg0 context.Context, arg1 int64, arg2 *github.ProjectCardListOptions) ([]*github.ProjectCard, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectCards", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.ProjectCard)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectCards indicates an expected call of ListProjectCards.
func (mr *MockProjectsServiceMockRecorder) ListProjectCards(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectCards", reflect.TypeOf((*MockProjectsService)(nil).ListProjectCards), arg0, arg1, arg2)
}

// ListProjectCollaborators mocks base method.
func (m *MockProjectsService) ListProjectCollaborators(arg0 context.Context, arg1 int64, arg2 *github.ListCollaboratorOptions) ([]*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectCollaborators", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectCollaborators indicates an expected call of ListProjectCollaborators.
func (mr *MockProjectsServiceMockRecorder) ListProjectCollaborators(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectCollaborators", reflect.TypeOf((*MockProjectsService)(nil).ListProjectCollaborators), arg0, arg1, arg2)
}

// ListProjectColumns mocks base method.
func (m *MockProjectsService) ListProjectColumns(arg0 context.Context, arg1 int64, arg2 *github.ListOptions) ([]*github.ProjectColumn, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectColumns", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.ProjectColumn)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectColumns indicates an expected call of ListProjectColumns.
func (mr *MockProjectsServiceMockRecorder) ListProjectColumns(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectColumns", reflect.TypeOf((*MockProjectsService)(nil).ListProjectColumns), arg0, arg1, arg2)
}

// MoveProjectCard mocks base method.
func (m *MockProjectsService) MoveProjectCard(arg0 context.Context, arg1 int64, arg2 *github.ProjectCardMoveOptions) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveProjectCard", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveProjectCard indicates an expected call of MoveProjectCard.
func (mr *MockProjectsServiceMockRecorder) MoveProjectCard(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveProjectCard", reflect.TypeOf((*MockProjectsService)(nil).MoveProjectCard), arg0, arg1, arg2)
}

// MoveProjectColumn mocks base method.
func (m *MockProjectsService) MoveProjectColumn(arg0 context.Context, arg1 int64, arg2 *github.ProjectColumnMoveOptions) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveProjectColumn", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveProjectColumn indicates an expected call of MoveProjectColumn.
func (mr *MockProjectsServiceMockRecorder) MoveProjectColumn(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveProjectColumn", reflect.TypeOf((*MockProjectsService)(nil).MoveProjectColumn), arg0, arg1, arg2)
}

// RemoveProjectCollaborator mocks base method.
func (m *MockProjectsService) RemoveProjectCollaborator(arg0 context.Context, arg1 int64, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProjectCollaborator", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveProjectCollaborator indicates an expected call of RemoveProjectCollaborator.
func (mr *MockProjectsServiceMockRecorder) RemoveProjectCollaborator(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProjectCollaborator", reflect.TypeOf((*MockProjectsService)(nil).RemoveProjectCollaborator), arg0, arg1, arg2)
}

// ReviewProjectCollaboratorPermission mocks base method.
func (m *MockProjectsService) ReviewProjectCollaboratorPermission(arg0 context.Context, arg1 int64, arg2 string) (*github.ProjectPermissionLevel, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReviewProjectCollaboratorPermission", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.ProjectPermissionLevel)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReviewProjectCollaboratorPermission indicates an expected call of ReviewProjectCollaboratorPermission.
func (mr *MockProjectsServiceMockRecorder) ReviewProjectCollaboratorPermission(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReviewProjectCollaboratorPermission", reflect.TypeOf((*MockProjectsService)(nil).ReviewProjectCollaboratorPermission), arg0, arg1, arg2)
}

// UpdateProject mocks base method.
func (m *MockProjectsService) UpdateProject(arg0 context.Context, arg1 int64, arg2 *github.ProjectOptions) (*github.Project, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Project)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockProjectsServiceMockRecorder) UpdateProject(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockProjectsService)(nil).UpdateProject), arg0, arg1, arg2)
}

// UpdateProjectCard mocks base method.
func (m *MockProjectsService) UpdateProjectCard(arg0 context.Context, arg1 int64, arg2 *github.ProjectCardOptions) (*github.ProjectCard, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectCard", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.ProjectCard)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateProjectCard indicates an expected call of UpdateProjectCard.
func (mr *MockProjectsServiceMockRecorder) UpdateProjectCard(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectCard", reflect.TypeOf((*MockProjectsService)(nil).UpdateProjectCard), arg0, arg1, arg2)
}

// UpdateProjectColumn mocks base method.
func (m *MockProjectsService) UpdateProjectColumn(arg0 context.Context, arg1 int64, arg2 *github.ProjectColumnOptions) (*github.ProjectColumn, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectColumn", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.ProjectColumn)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateProjectColumn indicates an expected call of UpdateProjectColumn.
func (mr *MockProjectsServiceMockRecorder) UpdateProjectColumn(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectColumn", reflect.TypeOf((*MockProjectsService)(nil).UpdateProjectColumn), arg0, arg1, arg2)
}

// MockPullRequestsService is a mock of PullRequestsService interface.
type MockPullRequestsService struct {
	ctrl     *gomock.Controller
	recorder *MockPullRequestsServiceMockRecorder
}

// MockPullRequestsServiceMockRecorder is the mock recorder for MockPullRequestsService.
type MockPullRequestsServiceMockRecorder struct {
	mock *MockPullRequestsService
}

// NewMockPullRequestsService creates a new mock instance.
func NewMockPullRequestsService(ctrl *gomock.Controller) *MockPullRequestsService {
	mock := &MockPullRequestsService{ctrl: ctrl}
	mock.recorder = &MockPullRequestsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPullRequestsService) EXPECT() *MockPullRequestsServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPullRequestsService) Create(arg0 context.Context, arg1, arg2 string, arg3 *github.NewPullRequest) (*github.PullRequest, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.PullRequest)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockPullRequestsServiceMockRecorder) Create(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPullRequestsService)(nil).Create), arg0, arg1, arg2, arg3)
}

// CreateComment mocks base method.
func (m *MockPullRequestsService) CreateComment(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.PullRequestComment) (*github.PullRequestComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.PullRequestComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockPullRequestsServiceMockRecorder) CreateComment(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockPullRequestsService)(nil).CreateComment), arg0, arg1, arg2, arg3, arg4)
}

// CreateCommentInReplyTo mocks base method.
func (m *MockPullRequestsService) CreateCommentInReplyTo(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 string, arg5 int64) (*github.PullRequestComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommentInReplyTo", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*github.PullRequestComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCommentInReplyTo indicates an expected call of CreateCommentInReplyTo.
func (mr *MockPullRequestsServiceMockRecorder) CreateCommentInReplyTo(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentInReplyTo", reflect.TypeOf((*MockPullRequestsService)(nil).CreateCommentInReplyTo), arg0, arg1, arg2, arg3, arg4, arg5)
}

// CreateReview mocks base method.
func (m *MockPullRequestsService) CreateReview(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.PullRequestReviewRequest) (*github.PullRequestReview, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReview", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.PullRequestReview)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateReview indicates an expected call of CreateReview.
func (mr *MockPullRequestsServiceMockRecorder) CreateReview(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReview", reflect.TypeOf((*MockPullRequestsService)(nil).CreateReview), arg0, arg1, arg2, arg3, arg4)
}

// DeleteComment mocks base method.
func (m *MockPullRequestsService) DeleteComment(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockPullRequestsServiceMockRecorder) DeleteComment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockPullRequestsService)(nil).DeleteComment), arg0, arg1, arg2, arg3)
}

// DeletePendingReview mocks base method.
func (m *MockPullRequestsService) DeletePendingReview(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 int64) (*github.PullRequestReview, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePendingReview", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.PullRequestReview)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeletePendingReview indicates an expected call of DeletePendingReview.
func (mr *MockPullRequestsServiceMockRecorder) DeletePendingReview(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePendingReview", reflect.TypeOf((*MockPullRequestsService)(nil).DeletePendingReview), arg0, arg1, arg2, arg3, arg4)
}

// DismissReview mocks base method.
func (m *MockPullRequestsService) DismissReview(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 int64, arg5 *github.PullRequestReviewDismissalRequest) (*github.PullRequestReview, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DismissReview", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*github.PullRequestReview)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DismissReview indicates an expected call of DismissReview.
func (mr *MockPullRequestsServiceMockRecorder) DismissReview(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DismissReview", reflect.TypeOf((*MockPullRequestsService)(nil).DismissReview), arg0, arg1, arg2, arg3, arg4, arg5)
}

// Edit mocks base method.
func (m *MockPullRequestsService) Edit(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.PullRequest) (*github.PullRequest, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.PullRequest)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Edit indicates an expected call of Edit.
func (mr *MockPullRequestsServiceMockRecorder) Edit(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockPullRequestsService)(nil).Edit), arg0, arg1, arg2, arg3, arg4)
}

// EditComment mocks base method.
func (m *MockPullRequestsService) EditComment(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 *github.PullRequestComment) (*github.PullRequestComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditComment", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.PullRequestComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditComment indicates an expected call of EditComment.
func (mr *MockPullRequestsServiceMockRecorder) EditComment(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditComment", reflect.TypeOf((*MockPullRequestsService)(nil).EditComment), arg0, arg1, arg2, arg3, arg4)
}

// Get mocks base method.
func (m *MockPullRequestsService) Get(arg0 context.Context, arg1, arg2 string, arg3 int) (*github.PullRequest, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.PullRequest)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockPullRequestsServiceMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPullRequestsService)(nil).Get), arg0, arg1, arg2, arg3)
}

// GetComment mocks base method.
func (m *MockPullRequestsService) GetComment(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.PullRequestComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.PullRequestComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetComment indicates an expected call of GetComment.
func (mr *MockPullRequestsServiceMockRecorder) GetComment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockPullRequestsService)(nil).GetComment), arg0, arg1, arg2, arg3)
}

// GetRaw mocks base method.
func (m *MockPullRequestsService) GetRaw(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 github.RawOptions) (string, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRaw", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRaw indicates an expected call of GetRaw.
func (mr *MockPullRequestsServiceMockRecorder) GetRaw(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRaw", reflect.TypeOf((*MockPullRequestsService)(nil).GetRaw), arg0, arg1, arg2, arg3, arg4)
}

// GetReview mocks base method.
func (m *MockPullRequestsService) GetReview(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 int64) (*github.PullRequestReview, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReview", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.PullRequestReview)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetReview indicates an expected call of GetReview.
func (mr *MockPullRequestsServiceMockRecorder) GetReview(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReview", reflect.TypeOf((*MockPullRequestsService)(nil).GetReview), arg0, arg1, arg2, arg3, arg4)
}

// IsMerged mocks base method.
func (m *MockPullRequestsService) IsMerged(arg0 context.Context, arg1, arg2 string, arg3 int) (bool, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMerged", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsMerged indicates an expected call of IsMerged.
func (mr *MockPullRequestsServiceMockRecorder) IsMerged(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMerged", reflect.TypeOf((*MockPullRequestsService)(nil).IsMerged), arg0, arg1, arg2, arg3)
}

// List mocks base method.
func (m *MockPullRequestsService) List(arg0 context.Context, arg1, arg2 string, arg3 *github.PullRequestListOptions) ([]*github.PullRequest, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.PullRequest)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockPullRequestsServiceMockRecorder) List(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPullRequestsService)(nil).List), arg0, arg1, arg2, arg3)
}

// ListComments mocks base method.
func (m *MockPullRequestsService) ListComments(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.PullRequestListCommentsOptions) ([]*github.PullRequestComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComments", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.PullRequestComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListComments indicates an expected call of ListComments.
func (mr *MockPullRequestsServiceMockRecorder) ListComments(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComments", reflect.TypeOf((*MockPullRequestsService)(nil).ListComments), arg0, arg1, arg2, arg3, arg4)
}

// ListCommits mocks base method.
func (m *MockPullRequestsService) ListCommits(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.ListOptions) ([]*github.RepositoryCommit, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommits", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.RepositoryCommit)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCommits indicates an expected call of ListCommits.
func (mr *MockPullRequestsServiceMockRecorder) ListCommits(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommits", reflect.TypeOf((*MockPullRequestsService)(nil).ListCommits), arg0, arg1, arg2, arg3, arg4)
}

// ListFiles mocks base method.
func (m *MockPullRequestsService) ListFiles(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.ListOptions) ([]*github.CommitFile, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.CommitFile)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockPullRequestsServiceMockRecorder) ListFiles(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockPullRequestsService)(nil).ListFiles), arg0, arg1, arg2, arg3, arg4)
}

// ListPullRequestsWithCommit mocks base method.
func (m *MockPullRequestsService) ListPullRequestsWithCommit(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.PullRequestListOptions) ([]*github.PullRequest, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPullRequestsWithCommit", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.PullRequest)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPullRequestsWithCommit indicates an expected call of ListPullRequestsWithCommit.
func (mr *MockPullRequestsServiceMockRecorder) ListPullRequestsWithCommit(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPullRequestsWithCommit", reflect.TypeOf((*MockPullRequestsService)(nil).ListPullRequestsWithCommit), arg0, arg1, arg2, arg3, arg4)
}

// ListReviewComments mocks base method.
func (m *MockPullRequestsService) ListReviewComments(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 int64, arg5 *github.ListOptions) ([]*github.PullRequestComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReviewComments", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]*github.PullRequestComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListReviewComments indicates an expected call of ListReviewComments.
func (mr *MockPullRequestsServiceMockRecorder) ListReviewComments(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReviewComments", reflect.TypeOf((*MockPullRequestsService)(nil).ListReviewComments), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ListReviewers mocks base method.
func (m *MockPullRequestsService) ListReviewers(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.ListOptions) (*github.Reviewers, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReviewers", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Reviewers)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListReviewers indicates an expected call of ListReviewers.
func (mr *MockPullRequestsServiceMockRecorder) ListReviewers(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReviewers", reflect.TypeOf((*MockPullRequestsService)(nil).ListReviewers), arg0, arg1, arg2, arg3, arg4)
}

// ListReviews mocks base method.
func (m *MockPullRequestsService) ListReviews(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.ListOptions) ([]*github.PullRequestReview, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReviews", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.PullRequestReview)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListReviews indicates an expected call of ListReviews.
func (mr *MockPullRequestsServiceMockRecorder) ListReviews(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReviews", reflect.TypeOf((*MockPullRequestsService)(nil).ListReviews), arg0, arg1, arg2, arg3, arg4)
}

// Merge mocks base method.
func (m *MockPullRequestsService) Merge(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 string, arg5 *github.PullRequestOptions) (*github.PullRequestMergeResult, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Merge", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*github.PullRequestMergeResult)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Merge indicates an expected call of Merge.
func (mr *MockPullRequestsServiceMockRecorder) Merge(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockPullRequestsService)(nil).Merge), arg0, arg1, arg2, arg3, arg4, arg5)
}

// RemoveReviewers mocks base method.
func (m *MockPullRequestsService) RemoveReviewers(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 github.ReviewersRequest) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReviewers", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveReviewers indicates an expected call of RemoveReviewers.
func (mr *MockPullRequestsServiceMockRecorder) RemoveReviewers(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReviewers", reflect.TypeOf((*MockPullRequestsService)(nil).RemoveReviewers), arg0, arg1, arg2, arg3, arg4)
}

// RequestReviewers mocks base method.
func (m *MockPullRequestsService) RequestReviewers(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 github.ReviewersRequest) (*github.PullRequest, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestReviewers", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.PullRequest)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RequestReviewers indicates an expected call of RequestReviewers.
func (mr *MockPullRequestsServiceMockRecorder) RequestReviewers(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestReviewers", reflect.TypeOf((*MockPullRequestsService)(nil).RequestReviewers), arg0, arg1, arg2, arg3, arg4)
}

// SubmitReview mocks base method.
func (m *MockPullRequestsService) SubmitReview(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 int64, arg5 *github.PullRequestReviewRequest) (*github.PullRequestReview, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitReview", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*github.PullRequestReview)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SubmitReview indicates an expected call of SubmitReview.
func (mr *MockPullRequestsServiceMockRecorder) SubmitReview(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitReview", reflect.TypeOf((*MockPullRequestsService)(nil).SubmitReview), arg0, arg1, arg2, arg3, arg4, arg5)
}

// UpdateBranch mocks base method.
func (m *MockPullRequestsService) UpdateBranch(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.PullRequestBranchUpdateOptions) (*github.PullRequestBranchUpdateResponse, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBranch", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.PullRequestBranchUpdateResponse)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateBranch indicates an expected call of UpdateBranch.
func (mr *MockPullRequestsServiceMockRecorder) UpdateBranch(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBranch", reflect.TypeOf((*MockPullRequestsService)(nil).UpdateBranch), arg0, arg1, arg2, arg3, arg4)
}

// UpdateReview mocks base method.
func (m *MockPullRequestsService) UpdateReview(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 int64, arg5 string) (*github.PullRequestReview, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReview", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*github.PullRequestReview)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateReview indicates an expected call of UpdateReview.
func (mr *MockPullRequestsServiceMockRecorder) UpdateReview(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReview", reflect.TypeOf((*MockPullRequestsService)(nil).UpdateReview), arg0, arg1, arg2, arg3, arg4, arg5)
}

// MockReactionsService is a mock of ReactionsService interface.
type MockReactionsService struct {
	ctrl     *gomock.Controller
	recorder *MockReactionsServiceMockRecorder
}

// MockReactionsServiceMockRecorder is the mock recorder for MockReactionsService.
type MockReactionsServiceMockRecorder struct {
	mock *MockReactionsService
}

// NewMockReactionsService creates a new mock instance.
func NewMockReactionsService(ctrl *gomock.Controller) *MockReactionsService {
	mock := &MockReactionsService{ctrl: ctrl}
	mock.recorder = &MockReactionsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReactionsService) EXPECT() *MockReactionsServiceMockRecorder {
	return m.recorder
}

// CreateCommentReaction mocks base method.
func (m *MockReactionsService) CreateCommentReaction(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 string) (*github.Reaction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommentReaction", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Reaction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCommentReaction indicates an expected call of CreateCommentReaction.
func (mr *MockReactionsServiceMockRecorder) CreateCommentReaction(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentReaction", reflect.TypeOf((*MockReactionsService)(nil).CreateCommentReaction), arg0, arg1, arg2, arg3, arg4)
}

// CreateIssueCommentReaction mocks base method.
func (m *MockReactionsService) CreateIssueCommentReaction(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 string) (*github.Reaction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIssueCommentReaction", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Reaction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateIssueCommentReaction indicates an expected call of CreateIssueCommentReaction.
func (mr *MockReactionsServiceMockRecorder) CreateIssueCommentReaction(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssueCommentReaction", reflect.TypeOf((*MockReactionsService)(nil).CreateIssueCommentReaction), arg0, arg1, arg2, arg3, arg4)
}

// CreateIssueReaction mocks base method.
func (m *MockReactionsService) CreateIssueReaction(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 string) (*github.Reaction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIssueReaction", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Reaction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateIssueReaction indicates an expected call of CreateIssueReaction.
func (mr *MockReactionsServiceMockRecorder) CreateIssueReaction(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssueReaction", reflect.TypeOf((*MockReactionsService)(nil).CreateIssueReaction), arg0, arg1, arg2, arg3, arg4)
}

// CreatePullRequestCommentReaction mocks base method.
func (m *MockReactionsService) CreatePullRequestCommentReaction(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 string) (*github.Reaction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePullRequestCommentReaction", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Reaction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreatePullRequestCommentReaction indicates an expected call of CreatePullRequestCommentReaction.
func (mr *MockReactionsServiceMockRecorder) CreatePullRequestCommentReaction(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePullRequestCommentReaction", reflect.TypeOf((*MockReactionsService)(nil).CreatePullRequestCommentReaction), arg0, arg1, arg2, arg3, arg4)
}

// CreateReleaseReaction mocks base method.
func (m *MockReactionsService) CreateReleaseReaction(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 string) (*github.Reaction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReleaseReaction", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Reaction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateReleaseReaction indicates an expected call of CreateReleaseReaction.
func (mr *MockReactionsServiceMockRecorder) CreateReleaseReaction(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReleaseReaction", reflect.TypeOf((*MockReactionsService)(nil).CreateReleaseReaction), arg0, arg1, arg2, arg3, arg4)
}

// CreateTeamDiscussionCommentReaction mocks base method.
func (m *MockReactionsService) CreateTeamDiscussionCommentReaction(arg0 context.Context, arg1 int64, arg2, arg3 int, arg4 string) (*github.Reaction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeamDiscussionCommentReaction", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Reaction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTeamDiscussionCommentReaction indicates an expected call of CreateTeamDiscussionCommentReaction.
func (mr *MockReactionsServiceMockRecorder) CreateTeamDiscussionCommentReaction(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeamDiscussionCommentReaction", reflect.TypeOf((*MockReactionsService)(nil).CreateTeamDiscussionCommentReaction), arg0, arg1, arg2, arg3, arg4)
}

// CreateTeamDiscussionReaction mocks base method.
func (m *MockReactionsService) CreateTeamDiscussionReaction(arg0 context.Context, arg1 int64, arg2 int, arg3 string) (*github.Reaction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeamDiscussionReaction", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Reaction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTeamDiscussionReaction indicates an expected call of CreateTeamDiscussionReaction.
func (mr *MockReactionsServiceMockRecorder) CreateTeamDiscussionReaction(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeamDiscussionReaction", reflect.TypeOf((*MockReactionsService)(nil).CreateTeamDiscussionReaction), arg0, arg1, arg2, arg3)
}

// DeleteCommentReaction mocks base method.
func (m *MockReactionsService) DeleteCommentReaction(arg0 context.Context, arg1, arg2 string, arg3, arg4 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommentReaction", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCommentReaction indicates an expected call of DeleteCommentReaction.
func (mr *MockReactionsServiceMockRecorder) DeleteCommentReaction(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommentReaction", reflect.TypeOf((*MockReactionsService)(nil).DeleteCommentReaction), arg0, arg1, arg2, arg3, arg4)
}

// DeleteCommentReactionByID mocks base method.
func (m *MockReactionsService) DeleteCommentReactionByID(arg0 context.Context, arg1, arg2, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommentReactionByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCommentReactionByID indicates an expected call of DeleteCommentReactionByID.
func (mr *MockReactionsServiceMockRecorder) DeleteCommentReactionByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommentReactionByID", reflect.TypeOf((*MockReactionsService)(nil).DeleteCommentReactionByID), arg0, arg1, arg2, arg3)
}

// DeleteIssueCommentReaction mocks base method.
func (m *MockReactionsService) DeleteIssueCommentReaction(arg0 context.Context, arg1, arg2 string, arg3, arg4 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIssueCommentReaction", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIssueCommentReaction indicates an expected call of DeleteIssueCommentReaction.
func (mr *MockReactionsServiceMockRecorder) DeleteIssueCommentReaction(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIssueCommentReaction", reflect.TypeOf((*MockReactionsService)(nil).DeleteIssueCommentReaction), arg0, arg1, arg2, arg3, arg4)
}

// DeleteIssueCommentReactionByID mocks base method.
func (m *MockReactionsService) DeleteIssueCommentReactionByID(arg0 context.Context, arg1, arg2, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIssueCommentReactionByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIssueCommentReactionByID indicates an expected call of DeleteIssueCommentReactionByID.
func (mr *MockReactionsServiceMockRecorder) DeleteIssueCommentReactionByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIssueCommentReactionByID", reflect.TypeOf((*MockReactionsService)(nil).DeleteIssueCommentReactionByID), arg0, arg1, arg2, arg3)
}

// DeleteIssueReaction mocks base method.
func (m *MockReactionsService) DeleteIssueReaction(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIssueReaction", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIssueReaction indicates an expected call of DeleteIssueReaction.
func (mr *MockReactionsServiceMockRecorder) DeleteIssueReaction(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIssueReaction", reflect.TypeOf((*MockReactionsService)(nil).DeleteIssueReaction), arg0, arg1, arg2, arg3, arg4)
}

// DeleteIssueReactionByID mocks base method.
func (m *MockReactionsService) DeleteIssueReactionByID(arg0 context.Context, arg1, arg2 int, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIssueReactionByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIssueReactionByID indicates an expected call of DeleteIssueReactionByID.
func (mr *MockReactionsServiceMockRecorder) DeleteIssueReactionByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIssueReactionByID", reflect.TypeOf((*MockReactionsService)(nil).DeleteIssueReactionByID), arg0, arg1, arg2, arg3)
}

// DeletePullRequestCommentReaction mocks base method.
func (m *MockReactionsService) DeletePullRequestCommentReaction(arg0 context.Context, arg1, arg2 string, arg3, arg4 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePullRequestCommentReaction", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePullRequestCommentReaction indicates an expected call of DeletePullRequestCommentReaction.
func (mr *MockReactionsServiceMockRecorder) DeletePullRequestCommentReaction(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePullRequestCommentReaction", reflect.TypeOf((*MockReactionsService)(nil).DeletePullRequestCommentReaction), arg0, arg1, arg2, arg3, arg4)
}

// DeletePullRequestCommentReactionByID mocks base method.
func (m *MockReactionsService) DeletePullRequestCommentReactionByID(arg0 context.Context, arg1, arg2, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePullRequestCommentReactionByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePullRequestCommentReactionByID indicates an expected call of DeletePullRequestCommentReactionByID.
func (mr *MockReactionsServiceMockRecorder) DeletePullRequestCommentReactionByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePullRequestCommentReactionByID", reflect.TypeOf((*MockReactionsService)(nil).DeletePullRequestCommentReactionByID), arg0, arg1, arg2, arg3)
}

// DeleteTeamDiscussionCommentReaction mocks base method.
func (m *MockReactionsService) DeleteTeamDiscussionCommentReaction(arg0 context.Context, arg1, arg2 string, arg3, arg4 int, arg5 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeamDiscussionCommentReaction", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTeamDiscussionCommentReaction indicates an expected call of DeleteTeamDiscussionCommentReaction.
func (mr *MockReactionsServiceMockRecorder) DeleteTeamDiscussionCommentReaction(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeamDiscussionCommentReaction", reflect.TypeOf((*MockReactionsService)(nil).DeleteTeamDiscussionCommentReaction), arg0, arg1, arg2, arg3, arg4, arg5)
}

// DeleteTeamDiscussionCommentReactionByOrgIDAndTeamID mocks base method.
func (m *MockReactionsService) DeleteTeamDiscussionCommentReactionByOrgIDAndTeamID(arg0 context.Context, arg1, arg2, arg3, arg4 int, arg5 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeamDiscussionCommentReactionByOrgIDAndTeamID", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTeamDiscussionCommentReactionByOrgIDAndTeamID indicates an expected call of DeleteTeamDiscussionCommentReactionByOrgIDAndTeamID.
func (mr *MockReactionsServiceMockRecorder) DeleteTeamDiscussionCommentReactionByOrgIDAndTeamID(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeamDiscussionCommentReactionByOrgIDAndTeamID", reflect.TypeOf((*MockReactionsService)(nil).DeleteTeamDiscussionCommentReactionByOrgIDAndTeamID), arg0, arg1, arg2, arg3, arg4, arg5)
}

// DeleteTeamDiscussionReaction mocks base method.
func (m *MockReactionsService) DeleteTeamDiscussionReaction(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeamDiscussionReaction", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTeamDiscussionReaction indicates an expected call of DeleteTeamDiscussionReaction.
func (mr *MockReactionsServiceMockRecorder) DeleteTeamDiscussionReaction(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeamDiscussionReaction", reflect.TypeOf((*MockReactionsService)(nil).DeleteTeamDiscussionReaction), arg0, arg1, arg2, arg3, arg4)
}

// DeleteTeamDiscussionReactionByOrgIDAndTeamID mocks base method.
func (m *MockReactionsService) DeleteTeamDiscussionReactionByOrgIDAndTeamID(arg0 context.Context, arg1, arg2, arg3 int, arg4 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeamDiscussionReactionByOrgIDAndTeamID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTeamDiscussionReactionByOrgIDAndTeamID indicates an expected call of DeleteTeamDiscussionReactionByOrgIDAndTeamID.
func (mr *MockReactionsServiceMockRecorder) DeleteTeamDiscussionReactionByOrgIDAndTeamID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeamDiscussionReactionByOrgIDAndTeamID", reflect.TypeOf((*MockReactionsService)(nil).DeleteTeamDiscussionReactionByOrgIDAndTeamID), arg0, arg1, arg2, arg3, arg4)
}

// ListCommentReactions mocks base method.
func (m *MockReactionsService) ListCommentReactions(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 *github.ListCommentReactionOptions) ([]*github.Reaction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommentReactions", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.Reaction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCommentReactions indicates an expected call of ListCommentReactions.
func (mr *MockReactionsServiceMockRecorder) ListCommentReactions(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommentReactions", reflect.TypeOf((*MockReactionsService)(nil).ListCommentReactions), arg0, arg1, arg2, arg3, arg4)
}

// ListIssueCommentReactions mocks base method.
func (m *MockReactionsService) ListIssueCommentReactions(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 *github.ListOptions) ([]*github.Reaction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIssueCommentReactions", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.Reaction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListIssueCommentReactions indicates an expected call of ListIssueCommentReactions.
func (mr *MockReactionsServiceMockRecorder) ListIssueCommentReactions(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssueCommentReactions", reflect.TypeOf((*MockReactionsService)(nil).ListIssueCommentReactions), arg0, arg1, arg2, arg3, arg4)
}

// ListIssueReactions mocks base method.
func (m *MockReactionsService) ListIssueReactions(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.ListOptions) ([]*github.Reaction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIssueReactions", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.Reaction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListIssueReactions indicates an expected call of ListIssueReactions.
func (mr *MockReactionsServiceMockRecorder) ListIssueReactions(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssueReactions", reflect.TypeOf((*MockReactionsService)(nil).ListIssueReactions), arg0, arg1, arg2, arg3, arg4)
}

// ListPullRequestCommentReactions mocks base method.
func (m *MockReactionsService) ListPullRequestCommentReactions(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 *github.ListOptions) ([]*github.Reaction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPullRequestCommentReactions", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.Reaction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPullRequestCommentReactions indicates an expected call of ListPullRequestCommentReactions.
func (mr *MockReactionsServiceMockRecorder) ListPullRequestCommentReactions(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPullRequestCommentReactions", reflect.TypeOf((*MockReactionsService)(nil).ListPullRequestCommentReactions), arg0, arg1, arg2, arg3, arg4)
}

// ListTeamDiscussionCommentReactions mocks base method.
func (m *MockReactionsService) ListTeamDiscussionCommentReactions(arg0 context.Context, arg1 int64, arg2, arg3 int, arg4 *github.ListOptions) ([]*github.Reaction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeamDiscussionCommentReactions", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.Reaction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTeamDiscussionCommentReactions indicates an expected call of ListTeamDiscussionCommentReactions.
func (mr *MockReactionsServiceMockRecorder) ListTeamDiscussionCommentReactions(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeamDiscussionCommentReactions", reflect.TypeOf((*MockReactionsService)(nil).ListTeamDiscussionCommentReactions), arg0, arg1, arg2, arg3, arg4)
}

// ListTeamDiscussionReactions mocks base method.
func (m *MockReactionsService) ListTeamDiscussionReactions(arg0 context.Context, arg1 int64, arg2 int, arg3 *github.ListOptions) ([]*github.Reaction, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeamDiscussionReactions", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.Reaction)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTeamDiscussionReactions indicates an expected call of ListTeamDiscussionReactions.
func (mr *MockReactionsServiceMockRecorder) ListTeamDiscussionReactions(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeamDiscussionReactions", reflect.TypeOf((*MockReactionsService)(nil).ListTeamDiscussionReactions), arg0, arg1, arg2, arg3)
}

// MockRepositoriesService is a mock of RepositoriesService interface.
type MockRepositoriesService struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoriesServiceMockRecorder
}

// MockRepositoriesServiceMockRecorder is the mock recorder for MockRepositoriesService.
type MockRepositoriesServiceMockRecorder struct {
	mock *MockRepositoriesService
}

// NewMockRepositoriesService creates a new mock instance.
func NewMockRepositoriesService(ctrl *gomock.Controller) *MockRepositoriesService {
	mock := &MockRepositoriesService{ctrl: ctrl}
	mock.recorder = &MockRepositoriesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoriesService) EXPECT() *MockRepositoriesServiceMockRecorder {
	return m.recorder
}

// AddAdminEnforcement mocks base method.
func (m *MockRepositoriesService) AddAdminEnforcement(arg0 context.Context, arg1, arg2, arg3 string) (*github.AdminEnforcement, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAdminEnforcement", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.AdminEnforcement)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddAdminEnforcement indicates an expected call of AddAdminEnforcement.
func (mr *MockRepositoriesServiceMockRecorder) AddAdminEnforcement(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAdminEnforcement", reflect.TypeOf((*MockRepositoriesService)(nil).AddAdminEnforcement), arg0, arg1, arg2, arg3)
}

// AddAppRestrictions mocks base method.
func (m *MockRepositoriesService) AddAppRestrictions(arg0 context.Context, arg1, arg2, arg3 string, arg4 []string) ([]*github.App, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAppRestrictions", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.App)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddAppRestrictions indicates an expected call of AddAppRestrictions.
func (mr *MockRepositoriesServiceMockRecorder) AddAppRestrictions(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAppRestrictions", reflect.TypeOf((*MockRepositoriesService)(nil).AddAppRestrictions), arg0, arg1, arg2, arg3, arg4)
}

// AddAutolink mocks base method.
func (m *MockRepositoriesService) AddAutolink(arg0 context.Context, arg1, arg2 string, arg3 *github.AutolinkOptions) (*github.Autolink, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAutolink", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Autolink)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddAutolink indicates an expected call of AddAutolink.
func (mr *MockRepositoriesServiceMockRecorder) AddAutolink(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAutolink", reflect.TypeOf((*MockRepositoriesService)(nil).AddAutolink), arg0, arg1, arg2, arg3)
}

// AddCollaborator mocks base method.
func (m *MockRepositoriesService) AddCollaborator(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.RepositoryAddCollaboratorOptions) (*github.CollaboratorInvitation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCollaborator", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.CollaboratorInvitation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddCollaborator indicates an expected call of AddCollaborator.
func (mr *MockRepositoriesServiceMockRecorder) AddCollaborator(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCollaborator", reflect.TypeOf((*MockRepositoriesService)(nil).AddCollaborator), arg0, arg1, arg2, arg3, arg4)
}

// CompareCommits mocks base method.
func (m *MockRepositoriesService) CompareCommits(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *github.ListOptions) (*github.CommitsComparison, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareCommits", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*github.CommitsComparison)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CompareCommits indicates an expected call of CompareCommits.
func (mr *MockRepositoriesServiceMockRecorder) CompareCommits(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareCommits", reflect.TypeOf((*MockRepositoriesService)(nil).CompareCommits), arg0, arg1, arg2, arg3, arg4, arg5)
}

// CompareCommitsRaw mocks base method.
func (m *MockRepositoriesService) CompareCommitsRaw(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 github.RawOptions) (string, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareCommitsRaw", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CompareCommitsRaw indicates an expected call of CompareCommitsRaw.
func (mr *MockRepositoriesServiceMockRecorder) CompareCommitsRaw(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareCommitsRaw", reflect.TypeOf((*MockRepositoriesService)(nil).CompareCommitsRaw), arg0, arg1, arg2, arg3, arg4, arg5)
}

// Create mocks base method.
func (m *MockRepositoriesService) Create(arg0 context.Context, arg1 string, arg2 *github.Repository) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockRepositoriesServiceMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepositoriesService)(nil).Create), arg0, arg1, arg2)
}

// CreateComment mocks base method.
func (m *MockRepositoriesService) CreateComment(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.RepositoryComment) (*github.RepositoryComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.RepositoryComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockRepositoriesServiceMockRecorder) CreateComment(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockRepositoriesService)(nil).CreateComment), arg0, arg1, arg2, arg3, arg4)
}

// CreateDeployment mocks base method.
func (m *MockRepositoriesService) CreateDeployment(arg0 context.Context, arg1, arg2 string, arg3 *github.DeploymentRequest) (*github.Deployment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeployment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Deployment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDeployment indicates an expected call of CreateDeployment.
func (mr *MockRepositoriesServiceMockRecorder) CreateDeployment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeployment", reflect.TypeOf((*MockRepositoriesService)(nil).CreateDeployment), arg0, arg1, arg2, arg3)
}

// CreateDeploymentStatus mocks base method.
func (m *MockRepositoriesService) CreateDeploymentStatus(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 *github.DeploymentStatusRequest) (*github.DeploymentStatus, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeploymentStatus", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.DeploymentStatus)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDeploymentStatus indicates an expected call of CreateDeploymentStatus.
func (mr *MockRepositoriesServiceMockRecorder) CreateDeploymentStatus(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeploymentStatus", reflect.TypeOf((*MockRepositoriesService)(nil).CreateDeploymentStatus), arg0, arg1, arg2, arg3, arg4)
}

// CreateFile mocks base method.
func (m *MockRepositoriesService) CreateFile(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.RepositoryContentFileOptions) (*github.RepositoryContentResponse, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.RepositoryContentResponse)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockRepositoriesServiceMockRecorder) CreateFile(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockRepositoriesService)(nil).CreateFile), arg0, arg1, arg2, arg3, arg4)
}

// CreateFork mocks base method.
func (m *MockRepositoriesService) CreateFork(arg0 context.Context, arg1, arg2 string, arg3 *github.RepositoryCreateForkOptions) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFork", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateFork indicates an expected call of CreateFork.
func (mr *MockRepositoriesServiceMockRecorder) CreateFork(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFork", reflect.TypeOf((*MockRepositoriesService)(nil).CreateFork), arg0, arg1, arg2, arg3)
}

// CreateFromTemplate mocks base method.
func (m *MockRepositoriesService) CreateFromTemplate(arg0 context.Context, arg1, arg2 string, arg3 *github.TemplateRepoRequest) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFromTemplate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateFromTemplate indicates an expected call of CreateFromTemplate.
func (mr *MockRepositoriesServiceMockRecorder) CreateFromTemplate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFromTemplate", reflect.TypeOf((*MockRepositoriesService)(nil).CreateFromTemplate), arg0, arg1, arg2, arg3)
}

// CreateHook mocks base method.
func (m *MockRepositoriesService) CreateHook(arg0 context.Context, arg1, arg2 string, arg3 *github.Hook) (*github.Hook, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHook", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Hook)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateHook indicates an expected call of CreateHook.
func (mr *MockRepositoriesServiceMockRecorder) CreateHook(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHook", reflect.TypeOf((*MockRepositoriesService)(nil).CreateHook), arg0, arg1, arg2, arg3)
}

// CreateKey mocks base method.
func (m *MockRepositoriesService) CreateKey(arg0 context.Context, arg1, arg2 string, arg3 *github.Key) (*github.Key, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKey", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Key)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateKey indicates an expected call of CreateKey.
func (mr *MockRepositoriesServiceMockRecorder) CreateKey(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKey", reflect.TypeOf((*MockRepositoriesService)(nil).CreateKey), arg0, arg1, arg2, arg3)
}

// CreateProject mocks base method.
func (m *MockRepositoriesService) CreateProject(arg0 context.Context, arg1, arg2 string, arg3 *github.ProjectOptions) (*github.Project, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Project)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockRepositoriesServiceMockRecorder) CreateProject(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockRepositoriesService)(nil).CreateProject), arg0, arg1, arg2, arg3)
}

// CreateRelease mocks base method.
func (m *MockRepositoriesService) CreateRelease(arg0 context.Context, arg1, arg2 string, arg3 *github.RepositoryRelease) (*github.RepositoryRelease, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRelease", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.RepositoryRelease)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRelease indicates an expected call of CreateRelease.
func (mr *MockRepositoriesServiceMockRecorder) CreateRelease(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRelease", reflect.TypeOf((*MockRepositoriesService)(nil).CreateRelease), arg0, arg1, arg2, arg3)
}

// CreateStatus mocks base method.
func (m *MockRepositoriesService) CreateStatus(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.RepoStatus) (*github.RepoStatus, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStatus", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.RepoStatus)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateStatus indicates an expected call of CreateStatus.
func (mr *MockRepositoriesServiceMockRecorder) CreateStatus(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStatus", reflect.TypeOf((*MockRepositoriesService)(nil).CreateStatus), arg0, arg1, arg2, arg3, arg4)
}

// CreateTagProtection mocks base method.
func (m *MockRepositoriesService) CreateTagProtection(arg0 context.Context, arg1, arg2, arg3 string) (*github.TagProtection, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTagProtection", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.TagProtection)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTagProtection indicates an expected call of CreateTagProtection.
func (mr *MockRepositoriesServiceMockRecorder) CreateTagProtection(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTagProtection", reflect.TypeOf((*MockRepositoriesService)(nil).CreateTagProtection), arg0, arg1, arg2, arg3)
}

// CreateUpdateEnvironment mocks base method.
func (m *MockRepositoriesService) CreateUpdateEnvironment(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.CreateUpdateEnvironment) (*github.Environment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUpdateEnvironment", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Environment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateUpdateEnvironment indicates an expected call of CreateUpdateEnvironment.
func (mr *MockRepositoriesServiceMockRecorder) CreateUpdateEnvironment(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUpdateEnvironment", reflect.TypeOf((*MockRepositoriesService)(nil).CreateUpdateEnvironment), arg0, arg1, arg2, arg3, arg4)
}

// Delete mocks base method.
func (m *MockRepositoriesService) Delete(arg0 context.Context, arg1, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoriesServiceMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepositoriesService)(nil).Delete), arg0, arg1, arg2)
}

// DeleteAutolink mocks base method.
func (m *MockRepositoriesService) DeleteAutolink(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAutolink", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAutolink indicates an expected call of DeleteAutolink.
func (mr *MockRepositoriesServiceMockRecorder) DeleteAutolink(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAutolink", reflect.TypeOf((*MockRepositoriesService)(nil).DeleteAutolink), arg0, arg1, arg2, arg3)
}

// DeleteComment mocks base method.
func (m *MockRepositoriesService) DeleteComment(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockRepositoriesServiceMockRecorder) DeleteComment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockRepositoriesService)(nil).DeleteComment), arg0, arg1, arg2, arg3)
}

// DeleteDeployment mocks base method.
func (m *MockRepositoriesService) DeleteDeployment(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeployment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDeployment indicates an expected call of DeleteDeployment.
func (mr *MockRepositoriesServiceMockRecorder) DeleteDeployment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeployment", reflect.TypeOf((*MockRepositoriesService)(nil).DeleteDeployment), arg0, arg1, arg2, arg3)
}

// DeleteEnvironment mocks base method.
func (m *MockRepositoriesService) DeleteEnvironment(arg0 context.Context, arg1, arg2, arg3 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment.
func (mr *MockRepositoriesServiceMockRecorder) DeleteEnvironment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*MockRepositoriesService)(nil).DeleteEnvironment), arg0, arg1, arg2, arg3)
}

// DeleteFile mocks base method.
func (m *MockRepositoriesService) DeleteFile(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.RepositoryContentFileOptions) (*github.RepositoryContentResponse, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.RepositoryContentResponse)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockRepositoriesServiceMockRecorder) DeleteFile(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockRepositoriesService)(nil).DeleteFile), arg0, arg1, arg2, arg3, arg4)
}

// DeleteHook mocks base method.
func (m *MockRepositoriesService) DeleteHook(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHook", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHook indicates an expected call of DeleteHook.
func (mr *MockRepositoriesServiceMockRecorder) DeleteHook(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHook", reflect.TypeOf((*MockRepositoriesService)(nil).DeleteHook), arg0, arg1, arg2, arg3)
}

// DeleteInvitation mocks base method.
func (m *MockRepositoriesService) DeleteInvitation(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvitation", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInvitation indicates an expected call of DeleteInvitation.
func (mr *MockRepositoriesServiceMockRecorder) DeleteInvitation(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvitation", reflect.TypeOf((*MockRepositoriesService)(nil).DeleteInvitation), arg0, arg1, arg2, arg3)
}

// DeleteKey mocks base method.
func (m *MockRepositoriesService) DeleteKey(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKey", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKey indicates an expected call of DeleteKey.
func (mr *MockRepositoriesServiceMockRecorder) DeleteKey(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKey", reflect.TypeOf((*MockRepositoriesService)(nil).DeleteKey), arg0, arg1, arg2, arg3)
}

// DeletePreReceiveHook mocks base method.
func (m *MockRepositoriesService) DeletePreReceiveHook(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePreReceiveHook", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePreReceiveHook indicates an expected call of DeletePreReceiveHook.
func (mr *MockRepositoriesServiceMockRecorder) DeletePreReceiveHook(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePreReceiveHook", reflect.TypeOf((*MockRepositoriesService)(nil).DeletePreReceiveHook), arg0, arg1, arg2, arg3)
}

// DeleteRelease mocks base method.
func (m *MockRepositoriesService) DeleteRelease(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRelease", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRelease indicates an expected call of DeleteRelease.
func (mr *MockRepositoriesServiceMockRecorder) DeleteRelease(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRelease", reflect.TypeOf((*MockRepositoriesService)(nil).DeleteRelease), arg0, arg1, arg2, arg3)
}

// DeleteReleaseAsset mocks base method.
func (m *MockRepositoriesService) DeleteReleaseAsset(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReleaseAsset", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReleaseAsset indicates an expected call of DeleteReleaseAsset.
func (mr *MockRepositoriesServiceMockRecorder) DeleteReleaseAsset(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReleaseAsset", reflect.TypeOf((*MockRepositoriesService)(nil).DeleteReleaseAsset), arg0, arg1, arg2, arg3)
}

// DeleteTagProtection mocks base method.
func (m *MockRepositoriesService) DeleteTagProtection(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTagProtection", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTagProtection indicates an expected call of DeleteTagProtection.
func (mr *MockRepositoriesServiceMockRecorder) DeleteTagProtection(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTagProtection", reflect.TypeOf((*MockRepositoriesService)(nil).DeleteTagProtection), arg0, arg1, arg2, arg3)
}

// DisableAutomatedSecurityFixes mocks base method.
func (m *MockRepositoriesService) DisableAutomatedSecurityFixes(arg0 context.Context, arg1, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableAutomatedSecurityFixes", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableAutomatedSecurityFixes indicates an expected call of DisableAutomatedSecurityFixes.
func (mr *MockRepositoriesServiceMockRecorder) DisableAutomatedSecurityFixes(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableAutomatedSecurityFixes", reflect.TypeOf((*MockRepositoriesService)(nil).DisableAutomatedSecurityFixes), arg0, arg1, arg2)
}

// DisableDismissalRestrictions mocks base method.
func (m *MockRepositoriesService) DisableDismissalRestrictions(arg0 context.Context, arg1, arg2, arg3 string) (*github.PullRequestReviewsEnforcement, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableDismissalRestrictions", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.PullRequestReviewsEnforcement)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DisableDismissalRestrictions indicates an expected call of DisableDismissalRestrictions.
func (mr *MockRepositoriesServiceMockRecorder) DisableDismissalRestrictions(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableDismissalRestrictions", reflect.TypeOf((*MockRepositoriesService)(nil).DisableDismissalRestrictions), arg0, arg1, arg2, arg3)
}

// DisableLFS mocks base method.
func (m *MockRepositoriesService) DisableLFS(arg0 context.Context, arg1, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableLFS", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableLFS indicates an expected call of DisableLFS.
func (mr *MockRepositoriesServiceMockRecorder) DisableLFS(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableLFS", reflect.TypeOf((*MockRepositoriesService)(nil).DisableLFS), arg0, arg1, arg2)
}

// DisablePages mocks base method.
func (m *MockRepositoriesService) DisablePages(arg0 context.Context, arg1, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisablePages", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisablePages indicates an expected call of DisablePages.
func (mr *MockRepositoriesServiceMockRecorder) DisablePages(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisablePages", reflect.TypeOf((*MockRepositoriesService)(nil).DisablePages), arg0, arg1, arg2)
}

// DisableVulnerabilityAlerts mocks base method.
func (m *MockRepositoriesService) DisableVulnerabilityAlerts(arg0 context.Context, arg1, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableVulnerabilityAlerts", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableVulnerabilityAlerts indicates an expected call of DisableVulnerabilityAlerts.
func (mr *MockRepositoriesServiceMockRecorder) DisableVulnerabilityAlerts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableVulnerabilityAlerts", reflect.TypeOf((*MockRepositoriesService)(nil).DisableVulnerabilityAlerts), arg0, arg1, arg2)
}

// Dispatch mocks base method.
func (m *MockRepositoriesService) Dispatch(arg0 context.Context, arg1, arg2 string, arg3 github.DispatchRequestOptions) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dispatch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Dispatch indicates an expected call of Dispatch.
func (mr *MockRepositoriesServiceMockRecorder) Dispatch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockRepositoriesService)(nil).Dispatch), arg0, arg1, arg2, arg3)
}

// DownloadContents mocks base method.
func (m *MockRepositoriesService) DownloadContents(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.RepositoryContentGetOptions) (io.ReadCloser, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadContents", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DownloadContents indicates an expected call of DownloadContents.
func (mr *MockRepositoriesServiceMockRecorder) DownloadContents(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadContents", reflect.TypeOf((*MockRepositoriesService)(nil).DownloadContents), arg0, arg1, arg2, arg3, arg4)
}

// DownloadContentsWithMeta mocks base method.
func (m *MockRepositoriesService) DownloadContentsWithMeta(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.RepositoryContentGetOptions) (io.ReadCloser, *github.RepositoryContent, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadContentsWithMeta", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(*github.RepositoryContent)
	ret2, _ := ret[2].(*github.Response)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// DownloadContentsWithMeta indicates an expected call of DownloadContentsWithMeta.
func (mr *MockRepositoriesServiceMockRecorder) DownloadContentsWithMeta(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadContentsWithMeta", reflect.TypeOf((*MockRepositoriesService)(nil).DownloadContentsWithMeta), arg0, arg1, arg2, arg3, arg4)
}

// DownloadReleaseAsset mocks base method.
func (m *MockRepositoriesService) DownloadReleaseAsset(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 *http.Client) (io.ReadCloser, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadReleaseAsset", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DownloadReleaseAsset indicates an expected call of DownloadReleaseAsset.
func (mr *MockRepositoriesServiceMockRecorder) DownloadReleaseAsset(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadReleaseAsset", reflect.TypeOf((*MockRepositoriesService)(nil).DownloadReleaseAsset), arg0, arg1, arg2, arg3, arg4)
}

// Edit mocks base method.
func (m *MockRepositoriesService) Edit(arg0 context.Context, arg1, arg2 string, arg3 *github.Repository) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Edit indicates an expected call of Edit.
func (mr *MockRepositoriesServiceMockRecorder) Edit(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockRepositoriesService)(nil).Edit), arg0, arg1, arg2, arg3)
}

// EditActionsAllowed mocks base method.
func (m *MockRepositoriesService) EditActionsAllowed(arg0 context.Context, arg1, arg2 string, arg3 github.ActionsAllowed) (*github.ActionsAllowed, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditActionsAllowed", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.ActionsAllowed)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditActionsAllowed indicates an expected call of EditActionsAllowed.
func (mr *MockRepositoriesServiceMockRecorder) EditActionsAllowed(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditActionsAllowed", reflect.TypeOf((*MockRepositoriesService)(nil).EditActionsAllowed), arg0, arg1, arg2, arg3)
}

// EditActionsPermissions mocks base method.
func (m *MockRepositoriesService) EditActionsPermissions(arg0 context.Context, arg1, arg2 string, arg3 github.ActionsPermissionsRepository) (*github.ActionsPermissionsRepository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditActionsPermissions", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.ActionsPermissionsRepository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditActionsPermissions indicates an expected call of EditActionsPermissions.
func (mr *MockRepositoriesServiceMockRecorder) EditActionsPermissions(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditActionsPermissions", reflect.TypeOf((*MockRepositoriesService)(nil).EditActionsPermissions), arg0, arg1, arg2, arg3)
}

// EditHook mocks base method.
func (m *MockRepositoriesService) EditHook(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 *github.Hook) (*github.Hook, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditHook", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Hook)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditHook indicates an expected call of EditHook.
func (mr *MockRepositoriesServiceMockRecorder) EditHook(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditHook", reflect.TypeOf((*MockRepositoriesService)(nil).EditHook), arg0, arg1, arg2, arg3, arg4)
}

// EditRelease mocks base method.
func (m *MockRepositoriesService) EditRelease(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 *github.RepositoryRelease) (*github.RepositoryRelease, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditRelease", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.RepositoryRelease)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditRelease indicates an expected call of EditRelease.
func (mr *MockRepositoriesServiceMockRecorder) EditRelease(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditRelease", reflect.TypeOf((*MockRepositoriesService)(nil).EditRelease), arg0, arg1, arg2, arg3, arg4)
}

// EditReleaseAsset mocks base method.
func (m *MockRepositoriesService) EditReleaseAsset(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 *github.ReleaseAsset) (*github.ReleaseAsset, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditReleaseAsset", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.ReleaseAsset)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditReleaseAsset indicates an expected call of EditReleaseAsset.
func (mr *MockRepositoriesServiceMockRecorder) EditReleaseAsset(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditReleaseAsset", reflect.TypeOf((*MockRepositoriesService)(nil).EditReleaseAsset), arg0, arg1, arg2, arg3, arg4)
}

// EnableAutomatedSecurityFixes mocks base method.
func (m *MockRepositoriesService) EnableAutomatedSecurityFixes(arg0 context.Context, arg1, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableAutomatedSecurityFixes", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableAutomatedSecurityFixes indicates an expected call of EnableAutomatedSecurityFixes.
func (mr *MockRepositoriesServiceMockRecorder) EnableAutomatedSecurityFixes(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableAutomatedSecurityFixes", reflect.TypeOf((*MockRepositoriesService)(nil).EnableAutomatedSecurityFixes), arg0, arg1, arg2)
}

// EnableLFS mocks base method.
func (m *MockRepositoriesService) EnableLFS(arg0 context.Context, arg1, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableLFS", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableLFS indicates an expected call of EnableLFS.
func (mr *MockRepositoriesServiceMockRecorder) EnableLFS(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableLFS", reflect.TypeOf((*MockRepositoriesService)(nil).EnableLFS), arg0, arg1, arg2)
}

// EnablePages mocks base method.
func (m *MockRepositoriesService) EnablePages(arg0 context.Context, arg1, arg2 string, arg3 *github.Pages) (*github.Pages, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnablePages", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Pages)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EnablePages indicates an expected call of EnablePages.
func (mr *MockRepositoriesServiceMockRecorder) EnablePages(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnablePages", reflect.TypeOf((*MockRepositoriesService)(nil).EnablePages), arg0, arg1, arg2, arg3)
}

// EnableVulnerabilityAlerts mocks base method.
func (m *MockRepositoriesService) EnableVulnerabilityAlerts(arg0 context.Context, arg1, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableVulnerabilityAlerts", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableVulnerabilityAlerts indicates an expected call of EnableVulnerabilityAlerts.
func (mr *MockRepositoriesServiceMockRecorder) EnableVulnerabilityAlerts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableVulnerabilityAlerts", reflect.TypeOf((*MockRepositoriesService)(nil).EnableVulnerabilityAlerts), arg0, arg1, arg2)
}

// GenerateReleaseNotes mocks base method.
func (m *MockRepositoriesService) GenerateReleaseNotes(arg0 context.Context, arg1, arg2 string, arg3 *github.GenerateNotesOptions) (*github.RepositoryReleaseNotes, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateReleaseNotes", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.RepositoryReleaseNotes)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateReleaseNotes indicates an expected call of GenerateReleaseNotes.
func (mr *MockRepositoriesServiceMockRecorder) GenerateReleaseNotes(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateReleaseNotes", reflect.TypeOf((*MockRepositoriesService)(nil).GenerateReleaseNotes), arg0, arg1, arg2, arg3)
}

// Get mocks base method.
func (m *MockRepositoriesService) Get(arg0 context.Context, arg1, arg2 string) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockRepositoriesServiceMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepositoriesService)(nil).Get), arg0, arg1, arg2)
}

// GetActionsAllowed mocks base method.
func (m *MockRepositoriesService) GetActionsAllowed(arg0 context.Context, arg1, arg2 string) (*github.ActionsAllowed, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionsAllowed", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.ActionsAllowed)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetActionsAllowed indicates an expected call of GetActionsAllowed.
func (mr *MockRepositoriesServiceMockRecorder) GetActionsAllowed(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionsAllowed", reflect.TypeOf((*MockRepositoriesService)(nil).GetActionsAllowed), arg0, arg1, arg2)
}

// GetActionsPermissions mocks base method.
func (m *MockRepositoriesService) GetActionsPermissions(arg0 context.Context, arg1, arg2 string) (*github.ActionsPermissionsRepository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionsPermissions", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.ActionsPermissionsRepository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetActionsPermissions indicates an expected call of GetActionsPermissions.
func (mr *MockRepositoriesServiceMockRecorder) GetActionsPermissions(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionsPermissions", reflect.TypeOf((*MockRepositoriesService)(nil).GetActionsPermissions), arg0, arg1, arg2)
}

// GetAdminEnforcement mocks base method.
func (m *MockRepositoriesService) GetAdminEnforcement(arg0 context.Context, arg1, arg2, arg3 string) (*github.AdminEnforcement, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminEnforcement", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.AdminEnforcement)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAdminEnforcement indicates an expected call of GetAdminEnforcement.
func (mr *MockRepositoriesServiceMockRecorder) GetAdminEnforcement(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminEnforcement", reflect.TypeOf((*MockRepositoriesService)(nil).GetAdminEnforcement), arg0, arg1, arg2, arg3)
}

// GetArchiveLink mocks base method.
func (m *MockRepositoriesService) GetArchiveLink(arg0 context.Context, arg1, arg2 string, arg3 github.ArchiveFormat, arg4 *github.RepositoryContentGetOptions, arg5 bool) (*url.URL, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchiveLink", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*url.URL)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetArchiveLink indicates an expected call of GetArchiveLink.
func (mr *MockRepositoriesServiceMockRecorder) GetArchiveLink(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveLink", reflect.TypeOf((*MockRepositoriesService)(nil).GetArchiveLink), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetAutolink mocks base method.
func (m *MockRepositoriesService) GetAutolink(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Autolink, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutolink", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Autolink)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAutolink indicates an expected call of GetAutolink.
func (mr *MockRepositoriesServiceMockRecorder) GetAutolink(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutolink", reflect.TypeOf((*MockRepositoriesService)(nil).GetAutolink), arg0, arg1, arg2, arg3)
}

// GetBranch mocks base method.
func (m *MockRepositoriesService) GetBranch(arg0 context.Context, arg1, arg2, arg3 string, arg4 bool) (*github.Branch, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranch", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Branch)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBranch indicates an expected call of GetBranch.
func (mr *MockRepositoriesServiceMockRecorder) GetBranch(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranch", reflect.TypeOf((*MockRepositoriesService)(nil).GetBranch), arg0, arg1, arg2, arg3, arg4)
}

// GetBranchProtection mocks base method.
func (m *MockRepositoriesService) GetBranchProtection(arg0 context.Context, arg1, arg2, arg3 string) (*github.Protection, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranchProtection", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Protection)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBranchProtection indicates an expected call of GetBranchProtection.
func (mr *MockRepositoriesServiceMockRecorder) GetBranchProtection(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranchProtection", reflect.TypeOf((*MockRepositoriesService)(nil).GetBranchProtection), arg0, arg1, arg2, arg3)
}

// GetByID mocks base method.
func (m *MockRepositoriesService) GetByID(arg0 context.Context, arg1 int64) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepositoriesServiceMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepositoriesService)(nil).GetByID), arg0, arg1)
}

// GetCodeOfConduct mocks base method.
func (m *MockRepositoriesService) GetCodeOfConduct(arg0 context.Context, arg1, arg2 string) (*github.CodeOfConduct, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeOfConduct", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.CodeOfConduct)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCodeOfConduct indicates an expected call of GetCodeOfConduct.
func (mr *MockRepositoriesServiceMockRecorder) GetCodeOfConduct(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeOfConduct", reflect.TypeOf((*MockRepositoriesService)(nil).GetCodeOfConduct), arg0, arg1, arg2)
}

// GetCodeownersErrors mocks base method.
func (m *MockRepositoriesService) GetCodeownersErrors(arg0 context.Context, arg1, arg2 string) (*github.CodeownersErrors, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeownersErrors", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.CodeownersErrors)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCodeownersErrors indicates an expected call of GetCodeownersErrors.
func (mr *MockRepositoriesServiceMockRecorder) GetCodeownersErrors(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeownersErrors", reflect.TypeOf((*MockRepositoriesService)(nil).GetCodeownersErrors), arg0, arg1, arg2)
}

// GetCombinedStatus mocks base method.
func (m *MockRepositoriesService) GetCombinedStatus(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.ListOptions) (*github.CombinedStatus, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCombinedStatus", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.CombinedStatus)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCombinedStatus indicates an expected call of GetCombinedStatus.
func (mr *MockRepositoriesServiceMockRecorder) GetCombinedStatus(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCombinedStatus", reflect.TypeOf((*MockRepositoriesService)(nil).GetCombinedStatus), arg0, arg1, arg2, arg3, arg4)
}

// GetComment mocks base method.
func (m *MockRepositoriesService) GetComment(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.RepositoryComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.RepositoryComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetComment indicates an expected call of GetComment.
func (mr *MockRepositoriesServiceMockRecorder) GetComment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockRepositoriesService)(nil).GetComment), arg0, arg1, arg2, arg3)
}

// GetCommit mocks base method.
func (m *MockRepositoriesService) GetCommit(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.ListOptions) (*github.RepositoryCommit, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommit", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.RepositoryCommit)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommit indicates an expected call of GetCommit.
func (mr *MockRepositoriesServiceMockRecorder) GetCommit(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommit", reflect.TypeOf((*MockRepositoriesService)(nil).GetCommit), arg0, arg1, arg2, arg3, arg4)
}

// GetCommitRaw mocks base method.
func (m *MockRepositoriesService) GetCommitRaw(arg0 context.Context, arg1, arg2, arg3 string, arg4 github.RawOptions) (string, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitRaw", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommitRaw indicates an expected call of GetCommitRaw.
func (mr *MockRepositoriesServiceMockRecorder) GetCommitRaw(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitRaw", reflect.TypeOf((*MockRepositoriesService)(nil).GetCommitRaw), arg0, arg1, arg2, arg3, arg4)
}

// GetCommitSHA1 mocks base method.
func (m *MockRepositoriesService) GetCommitSHA1(arg0 context.Context, arg1, arg2, arg3, arg4 string) (string, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitSHA1", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommitSHA1 indicates an expected call of GetCommitSHA1.
func (mr *MockRepositoriesServiceMockRecorder) GetCommitSHA1(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitSHA1", reflect.TypeOf((*MockRepositoriesService)(nil).GetCommitSHA1), arg0, arg1, arg2, arg3, arg4)
}

// GetCommunityHealthMetrics mocks base method.
func (m *MockRepositoriesService) GetCommunityHealthMetrics(arg0 context.Context, arg1, arg2 string) (*github.CommunityHealthMetrics, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommunityHealthMetrics", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.CommunityHealthMetrics)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommunityHealthMetrics indicates an expected call of GetCommunityHealthMetrics.
func (mr *MockRepositoriesServiceMockRecorder) GetCommunityHealthMetrics(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommunityHealthMetrics", reflect.TypeOf((*MockRepositoriesService)(nil).GetCommunityHealthMetrics), arg0, arg1, arg2)
}

// GetContents mocks base method.
func (m *MockRepositoriesService) GetContents(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.RepositoryContentGetOptions) (*github.RepositoryContent, []*github.RepositoryContent, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContents", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.RepositoryContent)
	ret1, _ := ret[1].([]*github.RepositoryContent)
	ret2, _ := ret[2].(*github.Response)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetContents indicates an expected call of GetContents.
func (mr *MockRepositoriesServiceMockRecorder) GetContents(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContents", reflect.TypeOf((*MockRepositoriesService)(nil).GetContents), arg0, arg1, arg2, arg3, arg4)
}

// GetDeployment mocks base method.
func (m *MockRepositoriesService) GetDeployment(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Deployment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Deployment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDeployment indicates an expected call of GetDeployment.
func (mr *MockRepositoriesServiceMockRecorder) GetDeployment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployment", reflect.TypeOf((*MockRepositoriesService)(nil).GetDeployment), arg0, arg1, arg2, arg3)
}

// GetDeploymentStatus mocks base method.
func (m *MockRepositoriesService) GetDeploymentStatus(arg0 context.Context, arg1, arg2 string, arg3, arg4 int64) (*github.DeploymentStatus, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentStatus", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.DeploymentStatus)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDeploymentStatus indicates an expected call of GetDeploymentStatus.
func (mr *MockRepositoriesServiceMockRecorder) GetDeploymentStatus(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentStatus", reflect.TypeOf((*MockRepositoriesService)(nil).GetDeploymentStatus), arg0, arg1, arg2, arg3, arg4)
}

// GetEnvironment mocks base method.
func (m *MockRepositoriesService) GetEnvironment(arg0 context.Context, arg1, arg2, arg3 string) (*github.Environment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Environment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEnvironment indicates an expected call of GetEnvironment.
func (mr *MockRepositoriesServiceMockRecorder) GetEnvironment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockRepositoriesService)(nil).GetEnvironment), arg0, arg1, arg2, arg3)
}

// GetHook mocks base method.
func (m *MockRepositoriesService) GetHook(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Hook, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHook", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Hook)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetHook indicates an expected call of GetHook.
func (mr *MockRepositoriesServiceMockRecorder) GetHook(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHook", reflect.TypeOf((*MockRepositoriesService)(nil).GetHook), arg0, arg1, arg2, arg3)
}

// GetHookDelivery mocks base method.
func (m *MockRepositoriesService) GetHookDelivery(arg0 context.Context, arg1, arg2 string, arg3, arg4 int64) (*github.HookDelivery, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHookDelivery", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.HookDelivery)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetHookDelivery indicates an expected call of GetHookDelivery.
func (mr *MockRepositoriesServiceMockRecorder) GetHookDelivery(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHookDelivery", reflect.TypeOf((*MockRepositoriesService)(nil).GetHookDelivery), arg0, arg1, arg2, arg3, arg4)
}

// GetKey mocks base method.
func (m *MockRepositoriesService) GetKey(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Key, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Key)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetKey indicates an expected call of GetKey.
func (mr *MockRepositoriesServiceMockRecorder) GetKey(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockRepositoriesService)(nil).GetKey), arg0, arg1, arg2, arg3)
}

// GetLatestPagesBuild mocks base method.
func (m *MockRepositoriesService) GetLatestPagesBuild(arg0 context.Context, arg1, arg2 string) (*github.PagesBuild, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestPagesBuild", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.PagesBuild)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLatestPagesBuild indicates an expected call of GetLatestPagesBuild.
func (mr *MockRepositoriesServiceMockRecorder) GetLatestPagesBuild(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestPagesBuild", reflect.TypeOf((*MockRepositoriesService)(nil).GetLatestPagesBuild), arg0, arg1, arg2)
}

// GetLatestRelease mocks base method.
func (m *MockRepositoriesService) GetLatestRelease(arg0 context.Context, arg1, arg2 string) (*github.RepositoryRelease, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestRelease", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.RepositoryRelease)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLatestRelease indicates an expected call of GetLatestRelease.
func (mr *MockRepositoriesServiceMockRecorder) GetLatestRelease(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestRelease", reflect.TypeOf((*MockRepositoriesService)(nil).GetLatestRelease), arg0, arg1, arg2)
}

// GetPageBuild mocks base method.
func (m *MockRepositoriesService) GetPageBuild(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.PagesBuild, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPageBuild", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.PagesBuild)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPageBuild indicates an expected call of GetPageBuild.
func (mr *MockRepositoriesServiceMockRecorder) GetPageBuild(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPageBuild", reflect.TypeOf((*MockRepositoriesService)(nil).GetPageBuild), arg0, arg1, arg2, arg3)
}

// GetPagesInfo mocks base method.
func (m *MockRepositoriesService) GetPagesInfo(arg0 context.Context, arg1, arg2 string) (*github.Pages, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPagesInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Pages)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPagesInfo indicates an expected call of GetPagesInfo.
func (mr *MockRepositoriesServiceMockRecorder) GetPagesInfo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPagesInfo", reflect.TypeOf((*MockRepositoriesService)(nil).GetPagesInfo), arg0, arg1, arg2)
}

// GetPermissionLevel mocks base method.
func (m *MockRepositoriesService) GetPermissionLevel(arg0 context.Context, arg1, arg2, arg3 string) (*github.RepositoryPermissionLevel, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionLevel", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.RepositoryPermissionLevel)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPermissionLevel indicates an expected call of GetPermissionLevel.
func (mr *MockRepositoriesServiceMockRecorder) GetPermissionLevel(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionLevel", reflect.TypeOf((*MockRepositoriesService)(nil).GetPermissionLevel), arg0, arg1, arg2, arg3)
}

// GetPreReceiveHook mocks base method.
func (m *MockRepositoriesService) GetPreReceiveHook(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.PreReceiveHook, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreReceiveHook", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.PreReceiveHook)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPreReceiveHook indicates an expected call of GetPreReceiveHook.
func (mr *MockRepositoriesServiceMockRecorder) GetPreReceiveHook(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreReceiveHook", reflect.TypeOf((*MockRepositoriesService)(nil).GetPreReceiveHook), arg0, arg1, arg2, arg3)
}

// GetPullRequestReviewEnforcement mocks base method.
func (m *MockRepositoriesService) GetPullRequestReviewEnforcement(arg0 context.Context, arg1, arg2, arg3 string) (*github.PullRequestReviewsEnforcement, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestReviewEnforcement", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.PullRequestReviewsEnforcement)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPullRequestReviewEnforcement indicates an expected call of GetPullRequestReviewEnforcement.
func (mr *MockRepositoriesServiceMockRecorder) GetPullRequestReviewEnforcement(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestReviewEnforcement", reflect.TypeOf((*MockRepositoriesService)(nil).GetPullRequestReviewEnforcement), arg0, arg1, arg2, arg3)
}

// GetReadme mocks base method.
func (m *MockRepositoriesService) GetReadme(arg0 context.Context, arg1, arg2 string, arg3 *github.RepositoryContentGetOptions) (*github.RepositoryContent, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadme", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.RepositoryContent)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetReadme indicates an expected call of GetReadme.
func (mr *MockRepositoriesServiceMockRecorder) GetReadme(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadme", reflect.TypeOf((*MockRepositoriesService)(nil).GetReadme), arg0, arg1, arg2, arg3)
}

// GetRelease mocks base method.
func (m *MockRepositoriesService) GetRelease(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.RepositoryRelease, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelease", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.RepositoryRelease)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRelease indicates an expected call of GetRelease.
func (mr *MockRepositoriesServiceMockRecorder) GetRelease(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelease", reflect.TypeOf((*MockRepositoriesService)(nil).GetRelease), arg0, arg1, arg2, arg3)
}

// GetReleaseAsset mocks base method.
func (m *MockRepositoriesService) GetReleaseAsset(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.ReleaseAsset, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReleaseAsset", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.ReleaseAsset)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetReleaseAsset indicates an expected call of GetReleaseAsset.
func (mr *MockRepositoriesServiceMockRecorder) GetReleaseAsset(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleaseAsset", reflect.TypeOf((*MockRepositoriesService)(nil).GetReleaseAsset), arg0, arg1, arg2, arg3)
}

// GetReleaseByTag mocks base method.
func (m *MockRepositoriesService) GetReleaseByTag(arg0 context.Context, arg1, arg2, arg3 string) (*github.RepositoryRelease, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReleaseByTag", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.RepositoryRelease)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetReleaseByTag indicates an expected call of GetReleaseByTag.
func (mr *MockRepositoriesServiceMockRecorder) GetReleaseByTag(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleaseByTag", reflect.TypeOf((*MockRepositoriesService)(nil).GetReleaseByTag), arg0, arg1, arg2, arg3)
}

// GetRequiredStatusChecks mocks base method.
func (m *MockRepositoriesService) GetRequiredStatusChecks(arg0 context.Context, arg1, arg2, arg3 string) (*github.RequiredStatusChecks, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequiredStatusChecks", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.RequiredStatusChecks)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRequiredStatusChecks indicates an expected call of GetRequiredStatusChecks.
func (mr *MockRepositoriesServiceMockRecorder) GetRequiredStatusChecks(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequiredStatusChecks", reflect.TypeOf((*MockRepositoriesService)(nil).GetRequiredStatusChecks), arg0, arg1, arg2, arg3)
}

// GetSignaturesProtectedBranch mocks base method.
func (m *MockRepositoriesService) GetSignaturesProtectedBranch(arg0 context.Context, arg1, arg2, arg3 string) (*github.SignaturesProtectedBranch, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignaturesProtectedBranch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.SignaturesProtectedBranch)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSignaturesProtectedBranch indicates an expected call of GetSignaturesProtectedBranch.
func (mr *MockRepositoriesServiceMockRecorder) GetSignaturesProtectedBranch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignaturesProtectedBranch", reflect.TypeOf((*MockRepositoriesService)(nil).GetSignaturesProtectedBranch), arg0, arg1, arg2, arg3)
}

// GetVulnerabilityAlerts mocks base method.
func (m *MockRepositoriesService) GetVulnerabilityAlerts(arg0 context.Context, arg1, arg2 string) (bool, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVulnerabilityAlerts", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVulnerabilityAlerts indicates an expected call of GetVulnerabilityAlerts.
func (mr *MockRepositoriesServiceMockRecorder) GetVulnerabilityAlerts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVulnerabilityAlerts", reflect.TypeOf((*MockRepositoriesService)(nil).GetVulnerabilityAlerts), arg0, arg1, arg2)
}

// IsCollaborator mocks base method.
func (m *MockRepositoriesService) IsCollaborator(arg0 context.Context, arg1, arg2, arg3 string) (bool, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCollaborator", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsCollaborator indicates an expected call of IsCollaborator.
func (mr *MockRepositoriesServiceMockRecorder) IsCollaborator(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCollaborator", reflect.TypeOf((*MockRepositoriesService)(nil).IsCollaborator), arg0, arg1, arg2, arg3)
}

// License mocks base method.
func (m *MockRepositoriesService) License(arg0 context.Context, arg1, arg2 string) (*github.RepositoryLicense, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "License", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.RepositoryLicense)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// License indicates an expected call of License.
func (mr *MockRepositoriesServiceMockRecorder) License(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "License", reflect.TypeOf((*MockRepositoriesService)(nil).License), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockRepositoriesService) List(arg0 context.Context, arg1 string, arg2 *github.RepositoryListOptions) ([]*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockRepositoriesServiceMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepositoriesService)(nil).List), arg0, arg1, arg2)
}

// ListAll mocks base method.
func (m *MockRepositoriesService) ListAll(arg0 context.Context, arg1 *github.RepositoryListAllOptions) ([]*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", arg0, arg1)
	ret0, _ := ret[0].([]*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAll indicates an expected call of ListAll.
func (mr *MockRepositoriesServiceMockRecorder) ListAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockRepositoriesService)(nil).ListAll), arg0, arg1)
}

// ListAllTopics mocks base method.
func (m *MockRepositoriesService) ListAllTopics(arg0 context.Context, arg1, arg2 string) ([]string, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllTopics", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAllTopics indicates an expected call of ListAllTopics.
func (mr *MockRepositoriesServiceMockRecorder) ListAllTopics(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllTopics", reflect.TypeOf((*MockRepositoriesService)(nil).ListAllTopics), arg0, arg1, arg2)
}

// ListApps mocks base method.
func (m *MockRepositoriesService) ListApps(arg0 context.Context, arg1, arg2, arg3 string) ([]*github.App, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApps", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.App)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListApps indicates an expected call of ListApps.
func (mr *MockRepositoriesServiceMockRecorder) ListApps(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApps", reflect.TypeOf((*MockRepositoriesService)(nil).ListApps), arg0, arg1, arg2, arg3)
}

// ListAutolinks mocks base method.
func (m *MockRepositoriesService) ListAutolinks(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) ([]*github.Autolink, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAutolinks", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.Autolink)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAutolinks indicates an expected call of ListAutolinks.
func (mr *MockRepositoriesServiceMockRecorder) ListAutolinks(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAutolinks", reflect.TypeOf((*MockRepositoriesService)(nil).ListAutolinks), arg0, arg1, arg2, arg3)
}

// ListBranches mocks base method.
func (m *MockRepositoriesService) ListBranches(arg0 context.Context, arg1, arg2 string, arg3 *github.BranchListOptions) ([]*github.Branch, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBranches", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.Branch)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBranches indicates an expected call of ListBranches.
func (mr *MockRepositoriesServiceMockRecorder) ListBranches(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBranches", reflect.TypeOf((*MockRepositoriesService)(nil).ListBranches), arg0, arg1, arg2, arg3)
}

// ListBranchesHeadCommit mocks base method.
func (m *MockRepositoriesService) ListBranchesHeadCommit(arg0 context.Context, arg1, arg2, arg3 string) ([]*github.BranchCommit, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBranchesHeadCommit", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.BranchCommit)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBranchesHeadCommit indicates an expected call of ListBranchesHeadCommit.
func (mr *MockRepositoriesServiceMockRecorder) ListBranchesHeadCommit(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBranchesHeadCommit", reflect.TypeOf((*MockRepositoriesService)(nil).ListBranchesHeadCommit), arg0, arg1, arg2, arg3)
}

// ListByOrg mocks base method.
func (m *MockRepositoriesService) ListByOrg(arg0 context.Context, arg1 string, arg2 *github.RepositoryListByOrgOptions) ([]*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByOrg", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByOrg indicates an expected call of ListByOrg.
func (mr *MockRepositoriesServiceMockRecorder) ListByOrg(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByOrg", reflect.TypeOf((*MockRepositoriesService)(nil).ListByOrg), arg0, arg1, arg2)
}

// ListCodeFrequency mocks base method.
func (m *MockRepositoriesService) ListCodeFrequency(arg0 context.Context, arg1, arg2 string) ([]*github.WeeklyStats, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCodeFrequency", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.WeeklyStats)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCodeFrequency indicates an expected call of ListCodeFrequency.
func (mr *MockRepositoriesServiceMockRecorder) ListCodeFrequency(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCodeFrequency", reflect.TypeOf((*MockRepositoriesService)(nil).ListCodeFrequency), arg0, arg1, arg2)
}

// ListCollaborators mocks base method.
func (m *MockRepositoriesService) ListCollaborators(arg0 context.Context, arg1, arg2 string, arg3 *github.ListCollaboratorsOptions) ([]*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCollaborators", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCollaborators indicates an expected call of ListCollaborators.
func (mr *MockRepositoriesServiceMockRecorder) ListCollaborators(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollaborators", reflect.TypeOf((*MockRepositoriesService)(nil).ListCollaborators), arg0, arg1, arg2, arg3)
}

// ListComments mocks base method.
func (m *MockRepositoriesService) ListComments(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) ([]*github.RepositoryComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComments", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.RepositoryComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListComments indicates an expected call of ListComments.
func (mr *MockRepositoriesServiceMockRecorder) ListComments(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComments", reflect.TypeOf((*MockRepositoriesService)(nil).ListComments), arg0, arg1, arg2, arg3)
}

// ListCommitActivity mocks base method.
func (m *MockRepositoriesService) ListCommitActivity(arg0 context.Context, arg1, arg2 string) ([]*github.WeeklyCommitActivity, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommitActivity", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.WeeklyCommitActivity)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCommitActivity indicates an expected call of ListCommitActivity.
func (mr *MockRepositoriesServiceMockRecorder) ListCommitActivity(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommitActivity", reflect.TypeOf((*MockRepositoriesService)(nil).ListCommitActivity), arg0, arg1, arg2)
}

// ListCommitComments mocks base method.
func (m *MockRepositoriesService) ListCommitComments(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.ListOptions) ([]*github.RepositoryComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommitComments", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.RepositoryComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCommitComments indicates an expected call of ListCommitComments.
func (mr *MockRepositoriesServiceMockRecorder) ListCommitComments(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommitComments", reflect.TypeOf((*MockRepositoriesService)(nil).ListCommitComments), arg0, arg1, arg2, arg3, arg4)
}

// ListCommits mocks base method.
func (m *MockRepositoriesService) ListCommits(arg0 context.Context, arg1, arg2 string, arg3 *github.CommitsListOptions) ([]*github.RepositoryCommit, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommits", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.RepositoryCommit)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCommits indicates an expected call of ListCommits.
func (mr *MockRepositoriesServiceMockRecorder) ListCommits(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommits", reflect.TypeOf((*MockRepositoriesService)(nil).ListCommits), arg0, arg1, arg2, arg3)
}

// ListContributors mocks base method.
func (m *MockRepositoriesService) ListContributors(arg0 context.Context, arg1, arg2 string, arg3 *github.ListContributorsOptions) ([]*github.Contributor, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContributors", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.Contributor)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListContributors indicates an expected call of ListContributors.
func (mr *MockRepositoriesServiceMockRecorder) ListContributors(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContributors", reflect.TypeOf((*MockRepositoriesService)(nil).ListContributors), arg0, arg1, arg2, arg3)
}

// ListContributorsStats mocks base method.
func (m *MockRepositoriesService) ListContributorsStats(arg0 context.Context, arg1, arg2 string) ([]*github.ContributorStats, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContributorsStats", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.ContributorStats)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListContributorsStats indicates an expected call of ListContributorsStats.
func (mr *MockRepositoriesServiceMockRecorder) ListContributorsStats(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContributorsStats", reflect.TypeOf((*MockRepositoriesService)(nil).ListContributorsStats), arg0, arg1, arg2)
}

// ListDeploymentStatuses mocks base method.
func (m *MockRepositoriesService) ListDeploymentStatuses(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 *github.ListOptions) ([]*github.DeploymentStatus, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploymentStatuses", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.DeploymentStatus)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDeploymentStatuses indicates an expected call of ListDeploymentStatuses.
func (mr *MockRepositoriesServiceMockRecorder) ListDeploymentStatuses(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentStatuses", reflect.TypeOf((*MockRepositoriesService)(nil).ListDeploymentStatuses), arg0, arg1, arg2, arg3, arg4)
}

// ListDeployments mocks base method.
func (m *MockRepositoriesService) ListDeployments(arg0 context.Context, arg1, arg2 string, arg3 *github.DeploymentsListOptions) ([]*github.Deployment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeployments", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.Deployment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDeployments indicates an expected call of ListDeployments.
func (mr *MockRepositoriesServiceMockRecorder) ListDeployments(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeployments", reflect.TypeOf((*MockRepositoriesService)(nil).ListDeployments), arg0, arg1, arg2, arg3)
}

// ListEnvironments mocks base method.
func (m *MockRepositoriesService) ListEnvironments(arg0 context.Context, arg1, arg2 string, arg3 *github.EnvironmentListOptions) (*github.EnvResponse, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironments", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.EnvResponse)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEnvironments indicates an expected call of ListEnvironments.
func (mr *MockRepositoriesServiceMockRecorder) ListEnvironments(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockRepositoriesService)(nil).ListEnvironments), arg0, arg1, arg2, arg3)
}

// ListForks mocks base method.
func (m *MockRepositoriesService) ListForks(arg0 context.Context, arg1, arg2 string, arg3 *github.RepositoryListForksOptions) ([]*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForks", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListForks indicates an expected call of ListForks.
func (mr *MockRepositoriesServiceMockRecorder) ListForks(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForks", reflect.TypeOf((*MockRepositoriesService)(nil).ListForks), arg0, arg1, arg2, arg3)
}

// ListHookDeliveries mocks base method.
func (m *MockRepositoriesService) ListHookDeliveries(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 *github.ListCursorOptions) ([]*github.HookDelivery, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHookDeliveries", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.HookDelivery)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListHookDeliveries indicates an expected call of ListHookDeliveries.
func (mr *MockRepositoriesServiceMockRecorder) ListHookDeliveries(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHookDeliveries", reflect.TypeOf((*MockRepositoriesService)(nil).ListHookDeliveries), arg0, arg1, arg2, arg3, arg4)
}

// ListHooks mocks base method.
func (m *MockRepositoriesService) ListHooks(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) ([]*github.Hook, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHooks", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.Hook)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListHooks indicates an expected call of ListHooks.
func (mr *MockRepositoriesServiceMockRecorder) ListHooks(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHooks", reflect.TypeOf((*MockRepositoriesService)(nil).ListHooks), arg0, arg1, arg2, arg3)
}

// ListInvitations mocks base method.
func (m *MockRepositoriesService) ListInvitations(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) ([]*github.RepositoryInvitation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvitations", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.RepositoryInvitation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListInvitations indicates an expected call of ListInvitations.
func (mr *MockRepositoriesServiceMockRecorder) ListInvitations(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitations", reflect.TypeOf((*MockRepositoriesService)(nil).ListInvitations), arg0, arg1, arg2, arg3)
}

// ListKeys mocks base method.
func (m *MockRepositoriesService) ListKeys(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) ([]*github.Key, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeys", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.Key)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListKeys indicates an expected call of ListKeys.
func (mr *MockRepositoriesServiceMockRecorder) ListKeys(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeys", reflect.TypeOf((*MockRepositoriesService)(nil).ListKeys), arg0, arg1, arg2, arg3)
}

// ListLanguages mocks base method.
func (m *MockRepositoriesService) ListLanguages(arg0 context.Context, arg1, arg2 string) (map[string]int, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLanguages", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListLanguages indicates an expected call of ListLanguages.
func (mr *MockRepositoriesServiceMockRecorder) ListLanguages(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLanguages", reflect.TypeOf((*MockRepositoriesService)(nil).ListLanguages), arg0, arg1, arg2)
}

// ListPagesBuilds mocks base method.
func (m *MockRepositoriesService) ListPagesBuilds(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) ([]*github.PagesBuild, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPagesBuilds", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.PagesBuild)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPagesBuilds indicates an expected call of ListPagesBuilds.
func (mr *MockRepositoriesServiceMockRecorder) ListPagesBuilds(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPagesBuilds", reflect.TypeOf((*MockRepositoriesService)(nil).ListPagesBuilds), arg0, arg1, arg2, arg3)
}

// ListParticipation mocks base method.
func (m *MockRepositoriesService) ListParticipation(arg0 context.Context, arg1, arg2 string) (*github.RepositoryParticipation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListParticipation", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.RepositoryParticipation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListParticipation indicates an expected call of ListParticipation.
func (mr *MockRepositoriesServiceMockRecorder) ListParticipation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParticipation", reflect.TypeOf((*MockRepositoriesService)(nil).ListParticipation), arg0, arg1, arg2)
}

// ListPreReceiveHooks mocks base method.
func (m *MockRepositoriesService) ListPreReceiveHooks(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) ([]*github.PreReceiveHook, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPreReceiveHooks", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.PreReceiveHook)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPreReceiveHooks indicates an expected call of ListPreReceiveHooks.
func (mr *MockRepositoriesServiceMockRecorder) ListPreReceiveHooks(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPreReceiveHooks", reflect.TypeOf((*MockRepositoriesService)(nil).ListPreReceiveHooks), arg0, arg1, arg2, arg3)
}

// ListProjects mocks base method.
func (m *MockRepositoriesService) ListProjects(arg0 context.Context, arg1, arg2 string, arg3 *github.ProjectListOptions) ([]*github.Project, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.Project)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockRepositoriesServiceMockRecorder) ListProjects(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockRepositoriesService)(nil).ListProjects), arg0, arg1, arg2, arg3)
}

// ListPunchCard mocks base method.
func (m *MockRepositoriesService) ListPunchCard(arg0 context.Context, arg1, arg2 string) ([]*github.PunchCard, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPunchCard", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.PunchCard)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPunchCard indicates an expected call of ListPunchCard.
func (mr *MockRepositoriesServiceMockRecorder) ListPunchCard(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPunchCard", reflect.TypeOf((*MockRepositoriesService)(nil).ListPunchCard), arg0, arg1, arg2)
}

// ListReleaseAssets mocks base method.
func (m *MockRepositoriesService) ListReleaseAssets(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 *github.ListOptions) ([]*github.ReleaseAsset, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReleaseAssets", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.ReleaseAsset)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListReleaseAssets indicates an expected call of ListReleaseAssets.
func (mr *MockRepositoriesServiceMockRecorder) ListReleaseAssets(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReleaseAssets", reflect.TypeOf((*MockRepositoriesService)(nil).ListReleaseAssets), arg0, arg1, arg2, arg3, arg4)
}

// ListReleases mocks base method.
func (m *MockRepositoriesService) ListReleases(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) ([]*github.RepositoryRelease, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReleases", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.RepositoryRelease)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListReleases indicates an expected call of ListReleases.
func (mr *MockRepositoriesServiceMockRecorder) ListReleases(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReleases", reflect.TypeOf((*MockRepositoriesService)(nil).ListReleases), arg0, arg1, arg2, arg3)
}

// ListRequiredStatusChecksContexts mocks base method.
func (m *MockRepositoriesService) ListRequiredStatusChecksContexts(arg0 context.Context, arg1, arg2, arg3 string) ([]string, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRequiredStatusChecksContexts", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRequiredStatusChecksContexts indicates an expected call of ListRequiredStatusChecksContexts.
func (mr *MockRepositoriesServiceMockRecorder) ListRequiredStatusChecksContexts(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRequiredStatusChecksContexts", reflect.TypeOf((*MockRepositoriesService)(nil).ListRequiredStatusChecksContexts), arg0, arg1, arg2, arg3)
}

// ListStatuses mocks base method.
func (m *MockRepositoriesService) ListStatuses(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.ListOptions) ([]*github.RepoStatus, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStatuses", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.RepoStatus)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListStatuses indicates an expected call of ListStatuses.
func (mr *MockRepositoriesServiceMockRecorder) ListStatuses(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStatuses", reflect.TypeOf((*MockRepositoriesService)(nil).ListStatuses), arg0, arg1, arg2, arg3, arg4)
}

// ListTagProtection mocks base method.
func (m *MockRepositoriesService) ListTagProtection(arg0 context.Context, arg1, arg2 string) ([]*github.TagProtection, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagProtection", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.TagProtection)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTagProtection indicates an expected call of ListTagProtection.
func (mr *MockRepositoriesServiceMockRecorder) ListTagProtection(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagProtection", reflect.TypeOf((*MockRepositoriesService)(nil).ListTagProtection), arg0, arg1, arg2)
}

// ListTags mocks base method.
func (m *MockRepositoriesService) ListTags(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) ([]*github.RepositoryTag, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTags", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.RepositoryTag)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTags indicates an expected call of ListTags.
func (mr *MockRepositoriesServiceMockRecorder) ListTags(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockRepositoriesService)(nil).ListTags), arg0, arg1, arg2, arg3)
}

// ListTeams mocks base method.
func (m *MockRepositoriesService) ListTeams(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) ([]*github.Team, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeams", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.Team)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTeams indicates an expected call of ListTeams.
func (mr *MockRepositoriesServiceMockRecorder) ListTeams(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeams", reflect.TypeOf((*MockRepositoriesService)(nil).ListTeams), arg0, arg1, arg2, arg3)
}

// ListTrafficClones mocks base method.
func (m *MockRepositoriesService) ListTrafficClones(arg0 context.Context, arg1, arg2 string, arg3 *github.TrafficBreakdownOptions) (*github.TrafficClones, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrafficClones", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.TrafficClones)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTrafficClones indicates an expected call of ListTrafficClones.
func (mr *MockRepositoriesServiceMockRecorder) ListTrafficClones(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrafficClones", reflect.TypeOf((*MockRepositoriesService)(nil).ListTrafficClones), arg0, arg1, arg2, arg3)
}

// ListTrafficPaths mocks base method.
func (m *MockRepositoriesService) ListTrafficPaths(arg0 context.Context, arg1, arg2 string) ([]*github.TrafficPath, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrafficPaths", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.TrafficPath)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTrafficPaths indicates an expected call of ListTrafficPaths.
func (mr *MockRepositoriesServiceMockRecorder) ListTrafficPaths(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrafficPaths", reflect.TypeOf((*MockRepositoriesService)(nil).ListTrafficPaths), arg0, arg1, arg2)
}

// ListTrafficReferrers mocks base method.
func (m *MockRepositoriesService) ListTrafficReferrers(arg0 context.Context, arg1, arg2 string) ([]*github.TrafficReferrer, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrafficReferrers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.TrafficReferrer)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTrafficReferrers indicates an expected call of ListTrafficReferrers.
func (mr *MockRepositoriesServiceMockRecorder) ListTrafficReferrers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrafficReferrers", reflect.TypeOf((*MockRepositoriesService)(nil).ListTrafficReferrers), arg0, arg1, arg2)
}

// ListTrafficViews mocks base method.
func (m *MockRepositoriesService) ListTrafficViews(arg0 context.Context, arg1, arg2 string, arg3 *github.TrafficBreakdownOptions) (*github.TrafficViews, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrafficViews", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.TrafficViews)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTrafficViews indicates an expected call of ListTrafficViews.
func (mr *MockRepositoriesServiceMockRecorder) ListTrafficViews(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrafficViews", reflect.TypeOf((*MockRepositoriesService)(nil).ListTrafficViews), arg0, arg1, arg2, arg3)
}

// Merge mocks base method.
func (m *MockRepositoriesService) Merge(arg0 context.Context, arg1, arg2 string, arg3 *github.RepositoryMergeRequest) (*github.RepositoryCommit, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Merge", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.RepositoryCommit)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Merge indicates an expected call of Merge.
func (mr *MockRepositoriesServiceMockRecorder) Merge(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockRepositoriesService)(nil).Merge), arg0, arg1, arg2, arg3)
}

// MergeUpstream mocks base method.
func (m *MockRepositoriesService) MergeUpstream(arg0 context.Context, arg1, arg2 string, arg3 *github.RepoMergeUpstreamRequest) (*github.RepoMergeUpstreamResult, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeUpstream", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.RepoMergeUpstreamResult)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MergeUpstream indicates an expected call of MergeUpstream.
func (mr *MockRepositoriesServiceMockRecorder) MergeUpstream(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeUpstream", reflect.TypeOf((*MockRepositoriesService)(nil).MergeUpstream), arg0, arg1, arg2, arg3)
}

// OptionalSignaturesOnProtectedBranch mocks base method.
func (m *MockRepositoriesService) OptionalSignaturesOnProtectedBranch(arg0 context.Context, arg1, arg2, arg3 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OptionalSignaturesOnProtectedBranch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OptionalSignaturesOnProtectedBranch indicates an expected call of OptionalSignaturesOnProtectedBranch.
func (mr *MockRepositoriesServiceMockRecorder) OptionalSignaturesOnProtectedBranch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptionalSignaturesOnProtectedBranch", reflect.TypeOf((*MockRepositoriesService)(nil).OptionalSignaturesOnProtectedBranch), arg0, arg1, arg2, arg3)
}

// PingHook mocks base method.
func (m *MockRepositoriesService) PingHook(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingHook", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingHook indicates an expected call of PingHook.
func (mr *MockRepositoriesServiceMockRecorder) PingHook(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingHook", reflect.TypeOf((*MockRepositoriesService)(nil).PingHook), arg0, arg1, arg2, arg3)
}

// RedeliverHookDelivery mocks base method.
func (m *MockRepositoriesService) RedeliverHookDelivery(arg0 context.Context, arg1, arg2 string, arg3, arg4 int64) (*github.HookDelivery, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedeliverHookDelivery", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.HookDelivery)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RedeliverHookDelivery indicates an expected call of RedeliverHookDelivery.
func (mr *MockRepositoriesServiceMockRecorder) RedeliverHookDelivery(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedeliverHookDelivery", reflect.TypeOf((*MockRepositoriesService)(nil).RedeliverHookDelivery), arg0, arg1, arg2, arg3, arg4)
}

// RemoveAdminEnforcement mocks base method.
func (m *MockRepositoriesService) RemoveAdminEnforcement(arg0 context.Context, arg1, arg2, arg3 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAdminEnforcement", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAdminEnforcement indicates an expected call of RemoveAdminEnforcement.
func (mr *MockRepositoriesServiceMockRecorder) RemoveAdminEnforcement(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAdminEnforcement", reflect.TypeOf((*MockRepositoriesService)(nil).RemoveAdminEnforcement), arg0, arg1, arg2, arg3)
}

// RemoveAppRestrictions mocks base method.
func (m *MockRepositoriesService) RemoveAppRestrictions(arg0 context.Context, arg1, arg2, arg3 string, arg4 []string) ([]*github.App, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAppRestrictions", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.App)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RemoveAppRestrictions indicates an expected call of RemoveAppRestrictions.
func (mr *MockRepositoriesServiceMockRecorder) RemoveAppRestrictions(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAppRestrictions", reflect.TypeOf((*MockRepositoriesService)(nil).RemoveAppRestrictions), arg0, arg1, arg2, arg3, arg4)
}

// RemoveBranchProtection mocks base method.
func (m *MockRepositoriesService) RemoveBranchProtection(arg0 context.Context, arg1, arg2, arg3 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBranchProtection", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBranchProtection indicates an expected call of RemoveBranchProtection.
func (mr *MockRepositoriesServiceMockRecorder) RemoveBranchProtection(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBranchProtection", reflect.TypeOf((*MockRepositoriesService)(nil).RemoveBranchProtection), arg0, arg1, arg2, arg3)
}

// RemoveCollaborator mocks base method.
func (m *MockRepositoriesService) RemoveCollaborator(arg0 context.Context, arg1, arg2, arg3 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCollaborator", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveCollaborator indicates an expected call of RemoveCollaborator.
func (mr *MockRepositoriesServiceMockRecorder) RemoveCollaborator(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCollaborator", reflect.TypeOf((*MockRepositoriesService)(nil).RemoveCollaborator), arg0, arg1, arg2, arg3)
}

// RemovePullRequestReviewEnforcement mocks base method.
func (m *MockRepositoriesService) RemovePullRequestReviewEnforcement(arg0 context.Context, arg1, arg2, arg3 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePullRequestReviewEnforcement", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePullRequestReviewEnforcement indicates an expected call of RemovePullRequestReviewEnforcement.
func (mr *MockRepositoriesServiceMockRecorder) RemovePullRequestReviewEnforcement(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePullRequestReviewEnforcement", reflect.TypeOf((*MockRepositoriesService)(nil).RemovePullRequestReviewEnforcement), arg0, arg1, arg2, arg3)
}

// RemoveRequiredStatusChecks mocks base method.
func (m *MockRepositoriesService) RemoveRequiredStatusChecks(arg0 context.Context, arg1, arg2, arg3 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRequiredStatusChecks", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRequiredStatusChecks indicates an expected call of RemoveRequiredStatusChecks.
func (mr *MockRepositoriesServiceMockRecorder) RemoveRequiredStatusChecks(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRequiredStatusChecks", reflect.TypeOf((*MockRepositoriesService)(nil).RemoveRequiredStatusChecks), arg0, arg1, arg2, arg3)
}

// RenameBranch mocks base method.
func (m *MockRepositoriesService) RenameBranch(arg0 context.Context, arg1, arg2, arg3, arg4 string) (*github.Branch, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameBranch", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Branch)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RenameBranch indicates an expected call of RenameBranch.
func (mr *MockRepositoriesServiceMockRecorder) RenameBranch(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameBranch", reflect.TypeOf((*MockRepositoriesService)(nil).RenameBranch), arg0, arg1, arg2, arg3, arg4)
}

// ReplaceAllTopics mocks base method.
func (m *MockRepositoriesService) ReplaceAllTopics(arg0 context.Context, arg1, arg2 string, arg3 []string) ([]string, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceAllTopics", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReplaceAllTopics indicates an expected call of ReplaceAllTopics.
func (mr *MockRepositoriesServiceMockRecorder) ReplaceAllTopics(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceAllTopics", reflect.TypeOf((*MockRepositoriesService)(nil).ReplaceAllTopics), arg0, arg1, arg2, arg3)
}

// ReplaceAppRestrictions mocks base method.
func (m *MockRepositoriesService) ReplaceAppRestrictions(arg0 context.Context, arg1, arg2, arg3 string, arg4 []string) ([]*github.App, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceAppRestrictions", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.App)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReplaceAppRestrictions indicates an expected call of ReplaceAppRestrictions.
func (mr *MockRepositoriesServiceMockRecorder) ReplaceAppRestrictions(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceAppRestrictions", reflect.TypeOf((*MockRepositoriesService)(nil).ReplaceAppRestrictions), arg0, arg1, arg2, arg3, arg4)
}

// RequestPageBuild mocks base method.
func (m *MockRepositoriesService) RequestPageBuild(arg0 context.Context, arg1, arg2 string) (*github.PagesBuild, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestPageBuild", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.PagesBuild)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RequestPageBuild indicates an expected call of RequestPageBuild.
func (mr *MockRepositoriesServiceMockRecorder) RequestPageBuild(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestPageBuild", reflect.TypeOf((*MockRepositoriesService)(nil).RequestPageBuild), arg0, arg1, arg2)
}

// RequireSignaturesOnProtectedBranch mocks base method.
func (m *MockRepositoriesService) RequireSignaturesOnProtectedBranch(arg0 context.Context, arg1, arg2, arg3 string) (*github.SignaturesProtectedBranch, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequireSignaturesOnProtectedBranch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.SignaturesProtectedBranch)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RequireSignaturesOnProtectedBranch indicates an expected call of RequireSignaturesOnProtectedBranch.
func (mr *MockRepositoriesServiceMockRecorder) RequireSignaturesOnProtectedBranch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequireSignaturesOnProtectedBranch", reflect.TypeOf((*MockRepositoriesService)(nil).RequireSignaturesOnProtectedBranch), arg0, arg1, arg2, arg3)
}

// Subscribe mocks base method.
func (m *MockRepositoriesService) Subscribe(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 []uint8) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockRepositoriesServiceMockRecorder) Subscribe(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockRepositoriesService)(nil).Subscribe), arg0, arg1, arg2, arg3, arg4, arg5)
}

// TestHook mocks base method.
func (m *MockRepositoriesService) TestHook(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestHook", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestHook indicates an expected call of TestHook.
func (mr *MockRepositoriesServiceMockRecorder) TestHook(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestHook", reflect.TypeOf((*MockRepositoriesService)(nil).TestHook), arg0, arg1, arg2, arg3)
}

// Transfer mocks base method.
func (m *MockRepositoriesService) Transfer(arg0 context.Context, arg1, arg2 string, arg3 github.TransferRequest) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Transfer indicates an expected call of Transfer.
func (mr *MockRepositoriesServiceMockRecorder) Transfer(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockRepositoriesService)(nil).Transfer), arg0, arg1, arg2, arg3)
}

// Unsubscribe mocks base method.
func (m *MockRepositoriesService) Unsubscribe(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 []uint8) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockRepositoriesServiceMockRecorder) Unsubscribe(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockRepositoriesService)(nil).Unsubscribe), arg0, arg1, arg2, arg3, arg4, arg5)
}

// UpdateBranchProtection mocks base method.
func (m *MockRepositoriesService) UpdateBranchProtection(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.ProtectionRequest) (*github.Protection, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBranchProtection", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Protection)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateBranchProtection indicates an expected call of UpdateBranchProtection.
func (mr *MockRepositoriesServiceMockRecorder) UpdateBranchProtection(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBranchProtection", reflect.TypeOf((*MockRepositoriesService)(nil).UpdateBranchProtection), arg0, arg1, arg2, arg3, arg4)
}

// UpdateComment mocks base method.
func (m *MockRepositoriesService) UpdateComment(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 *github.RepositoryComment) (*github.RepositoryComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.RepositoryComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockRepositoriesServiceMockRecorder) UpdateComment(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockRepositoriesService)(nil).UpdateComment), arg0, arg1, arg2, arg3, arg4)
}

// UpdateFile mocks base method.
func (m *MockRepositoriesService) UpdateFile(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.RepositoryContentFileOptions) (*github.RepositoryContentResponse, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFile", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.RepositoryContentResponse)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateFile indicates an expected call of UpdateFile.
func (mr *MockRepositoriesServiceMockRecorder) UpdateFile(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFile", reflect.TypeOf((*MockRepositoriesService)(nil).UpdateFile), arg0, arg1, arg2, arg3, arg4)
}

// UpdateInvitation mocks base method.
func (m *MockRepositoriesService) UpdateInvitation(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 string) (*github.RepositoryInvitation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvitation", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.RepositoryInvitation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateInvitation indicates an expected call of UpdateInvitation.
func (mr *MockRepositoriesServiceMockRecorder) UpdateInvitation(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvitation", reflect.TypeOf((*MockRepositoriesService)(nil).UpdateInvitation), arg0, arg1, arg2, arg3, arg4)
}

// UpdatePages mocks base method.
func (m *MockRepositoriesService) UpdatePages(arg0 context.Context, arg1, arg2 string, arg3 *github.PagesUpdate) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePages", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePages indicates an expected call of UpdatePages.
func (mr *MockRepositoriesServiceMockRecorder) UpdatePages(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePages", reflect.TypeOf((*MockRepositoriesService)(nil).UpdatePages), arg0, arg1, arg2, arg3)
}

// UpdatePreReceiveHook mocks base method.
func (m *MockRepositoriesService) UpdatePreReceiveHook(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 *github.PreReceiveHook) (*github.PreReceiveHook, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePreReceiveHook", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.PreReceiveHook)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdatePreReceiveHook indicates an expected call of UpdatePreReceiveHook.
func (mr *MockRepositoriesServiceMockRecorder) UpdatePreReceiveHook(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePreReceiveHook", reflect.TypeOf((*MockRepositoriesService)(nil).UpdatePreReceiveHook), arg0, arg1, arg2, arg3, arg4)
}

// UpdatePullRequestReviewEnforcement mocks base method.
func (m *MockRepositoriesService) UpdatePullRequestReviewEnforcement(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.PullRequestReviewsEnforcementUpdate) (*github.PullRequestReviewsEnforcement, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePullRequestReviewEnforcement", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.PullRequestReviewsEnforcement)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdatePullRequestReviewEnforcement indicates an expected call of UpdatePullRequestReviewEnforcement.
func (mr *MockRepositoriesServiceMockRecorder) UpdatePullRequestReviewEnforcement(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePullRequestReviewEnforcement", reflect.TypeOf((*MockRepositoriesService)(nil).UpdatePullRequestReviewEnforcement), arg0, arg1, arg2, arg3, arg4)
}

// UpdateRequiredStatusChecks mocks base method.
func (m *MockRepositoriesService) UpdateRequiredStatusChecks(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.RequiredStatusChecksRequest) (*github.RequiredStatusChecks, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRequiredStatusChecks", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.RequiredStatusChecks)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateRequiredStatusChecks indicates an expected call of UpdateRequiredStatusChecks.
func (mr *MockRepositoriesServiceMockRecorder) UpdateRequiredStatusChecks(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRequiredStatusChecks", reflect.TypeOf((*MockRepositoriesService)(nil).UpdateRequiredStatusChecks), arg0, arg1, arg2, arg3, arg4)
}

// UploadReleaseAsset mocks base method.
func (m *MockRepositoriesService) UploadReleaseAsset(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 *github.UploadOptions, arg5 *os.File) (*github.ReleaseAsset, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadReleaseAsset", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*github.ReleaseAsset)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UploadReleaseAsset indicates an expected call of UploadReleaseAsset.
func (mr *MockRepositoriesServiceMockRecorder) UploadReleaseAsset(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadReleaseAsset", reflect.TypeOf((*MockRepositoriesService)(nil).UploadReleaseAsset), arg0, arg1, arg2, arg3, arg4, arg5)
}

// MockSCIMService is a mock of SCIMService interface.
type MockSCIMService struct {
	ctrl     *gomock.Controller
	recorder *MockSCIMServiceMockRecorder
}

// MockSCIMServiceMockRecorder is the mock recorder for MockSCIMService.
type MockSCIMServiceMockRecorder struct {
	mock *MockSCIMService
}

// NewMockSCIMService creates a new mock instance.
func NewMockSCIMService(ctrl *gomock.Controller) *MockSCIMService {
	mock := &MockSCIMService{ctrl: ctrl}
	mock.recorder = &MockSCIMServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSCIMService) EXPECT() *MockSCIMServiceMockRecorder {
	return m.recorder
}

// DeleteSCIMUserFromOrg mocks base method.
func (m *MockSCIMService) DeleteSCIMUserFromOrg(arg0 context.Context, arg1, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSCIMUserFromOrg", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSCIMUserFromOrg indicates an expected call of DeleteSCIMUserFromOrg.
func (mr *MockSCIMServiceMockRecorder) DeleteSCIMUserFromOrg(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSCIMUserFromOrg", reflect.TypeOf((*MockSCIMService)(nil).DeleteSCIMUserFromOrg), arg0, arg1, arg2)
}

// GetSCIMProvisioningInfoForUser mocks base method.
func (m *MockSCIMService) GetSCIMProvisioningInfoForUser(arg0 context.Context, arg1, arg2 string) (*github.SCIMUserAttributes, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSCIMProvisioningInfoForUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.SCIMUserAttributes)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSCIMProvisioningInfoForUser indicates an expected call of GetSCIMProvisioningInfoForUser.
func (mr *MockSCIMServiceMockRecorder) GetSCIMProvisioningInfoForUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSCIMProvisioningInfoForUser", reflect.TypeOf((*MockSCIMService)(nil).GetSCIMProvisioningInfoForUser), arg0, arg1, arg2)
}

// ListSCIMProvisionedIdentities mocks base method.
func (m *MockSCIMService) ListSCIMProvisionedIdentities(arg0 context.Context, arg1 string, arg2 *github.ListSCIMProvisionedIdentitiesOptions) (*github.SCIMProvisionedIdentities, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSCIMProvisionedIdentities", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.SCIMProvisionedIdentities)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSCIMProvisionedIdentities indicates an expected call of ListSCIMProvisionedIdentities.
func (mr *MockSCIMServiceMockRecorder) ListSCIMProvisionedIdentities(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSCIMProvisionedIdentities", reflect.TypeOf((*MockSCIMService)(nil).ListSCIMProvisionedIdentities), arg0, arg1, arg2)
}

// ProvisionAndInviteSCIMUser mocks base method.
func (m *MockSCIMService) ProvisionAndInviteSCIMUser(arg0 context.Context, arg1 string, arg2 *github.SCIMUserAttributes) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvisionAndInviteSCIMUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProvisionAndInviteSCIMUser indicates an expected call of ProvisionAndInviteSCIMUser.
func (mr *MockSCIMServiceMockRecorder) ProvisionAndInviteSCIMUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvisionAndInviteSCIMUser", reflect.TypeOf((*MockSCIMService)(nil).ProvisionAndInviteSCIMUser), arg0, arg1, arg2)
}

// UpdateAttributeForSCIMUser mocks base method.
func (m *MockSCIMService) UpdateAttributeForSCIMUser(arg0 context.Context, arg1, arg2 string, arg3 *github.UpdateAttributeForSCIMUserOptions) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAttributeForSCIMUser", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAttributeForSCIMUser indicates an expected call of UpdateAttributeForSCIMUser.
func (mr *MockSCIMServiceMockRecorder) UpdateAttributeForSCIMUser(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttributeForSCIMUser", reflect.TypeOf((*MockSCIMService)(nil).UpdateAttributeForSCIMUser), arg0, arg1, arg2, arg3)
}

// UpdateProvisionedOrgMembership mocks base method.
func (m *MockSCIMService) UpdateProvisionedOrgMembership(arg0 context.Context, arg1, arg2 string, arg3 *github.SCIMUserAttributes) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProvisionedOrgMembership", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProvisionedOrgMembership indicates an expected call of UpdateProvisionedOrgMembership.
func (mr *MockSCIMServiceMockRecorder) UpdateProvisionedOrgMembership(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProvisionedOrgMembership", reflect.TypeOf((*MockSCIMService)(nil).UpdateProvisionedOrgMembership), arg0, arg1, arg2, arg3)
}

// MockSearchService is a mock of SearchService interface.
type MockSearchService struct {
	ctrl     *gomock.Controller
	recorder *MockSearchServiceMockRecorder
}

// MockSearchServiceMockRecorder is the mock recorder for MockSearchService.
type MockSearchServiceMockRecorder struct {
	mock *MockSearchService
}

// NewMockSearchService creates a new mock instance.
func NewMockSearchService(ctrl *gomock.Controller) *MockSearchService {
	mock := &MockSearchService{ctrl: ctrl}
	mock.recorder = &MockSearchServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchService) EXPECT() *MockSearchServiceMockRecorder {
	return m.recorder
}

// Code mocks base method.
func (m *MockSearchService) Code(arg0 context.Context, arg1 string, arg2 *github.SearchOptions) (*github.CodeSearchResult, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Code", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.CodeSearchResult)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Code indicates an expected call of Code.
func (mr *MockSearchServiceMockRecorder) Code(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Code", reflect.TypeOf((*MockSearchService)(nil).Code), arg0, arg1, arg2)
}

// Commits mocks base method.
func (m *MockSearchService) Commits(arg0 context.Context, arg1 string, arg2 *github.SearchOptions) (*github.CommitsSearchResult, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commits", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.CommitsSearchResult)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Commits indicates an expected call of Commits.
func (mr *MockSearchServiceMockRecorder) Commits(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commits", reflect.TypeOf((*MockSearchService)(nil).Commits), arg0, arg1, arg2)
}

// Issues mocks base method.
func (m *MockSearchService) Issues(arg0 context.Context, arg1 string, arg2 *github.SearchOptions) (*github.IssuesSearchResult, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Issues", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.IssuesSearchResult)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Issues indicates an expected call of Issues.
func (mr *MockSearchServiceMockRecorder) Issues(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Issues", reflect.TypeOf((*MockSearchService)(nil).Issues), arg0, arg1, arg2)
}

// Labels mocks base method.
func (m *MockSearchService) Labels(arg0 context.Context, arg1 int64, arg2 string, arg3 *github.SearchOptions) (*github.LabelsSearchResult, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.LabelsSearchResult)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Labels indicates an expected call of Labels.
func (mr *MockSearchServiceMockRecorder) Labels(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockSearchService)(nil).Labels), arg0, arg1, arg2, arg3)
}

// Repositories mocks base method.
func (m *MockSearchService) Repositories(arg0 context.Context, arg1 string, arg2 *github.SearchOptions) (*github.RepositoriesSearchResult, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Repositories", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.RepositoriesSearchResult)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Repositories indicates an expected call of Repositories.
func (mr *MockSearchServiceMockRecorder) Repositories(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Repositories", reflect.TypeOf((*MockSearchService)(nil).Repositories), arg0, arg1, arg2)
}

// Topics mocks base method.
func (m *MockSearchService) Topics(arg0 context.Context, arg1 string, arg2 *github.SearchOptions) (*github.TopicsSearchResult, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topics", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.TopicsSearchResult)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Topics indicates an expected call of Topics.
func (mr *MockSearchServiceMockRecorder) Topics(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topics", reflect.TypeOf((*MockSearchService)(nil).Topics), arg0, arg1, arg2)
}

// Users mocks base method.
func (m *MockSearchService) Users(arg0 context.Context, arg1 string, arg2 *github.SearchOptions) (*github.UsersSearchResult, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.UsersSearchResult)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Users indicates an expected call of Users.
func (mr *MockSearchServiceMockRecorder) Users(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockSearchService)(nil).Users), arg0, arg1, arg2)
}

// MockSecretScanningService is a mock of SecretScanningService interface.
type MockSecretScanningService struct {
	ctrl     *gomock.Controller
	recorder *MockSecretScanningServiceMockRecorder
}

// MockSecretScanningServiceMockRecorder is the mock recorder for MockSecretScanningService.
type MockSecretScanningServiceMockRecorder struct {
	mock *MockSecretScanningService
}

// NewMockSecretScanningService creates a new mock instance.
func NewMockSecretScanningService(ctrl *gomock.Controller) *MockSecretScanningService {
	mock := &MockSecretScanningService{ctrl: ctrl}
	mock.recorder = &MockSecretScanningServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretScanningService) EXPECT() *MockSecretScanningServiceMockRecorder {
	return m.recorder
}

// GetAlert mocks base method.
func (m *MockSecretScanningService) GetAlert(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.SecretScanningAlert, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlert", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.SecretScanningAlert)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAlert indicates an expected call of GetAlert.
func (mr *MockSecretScanningServiceMockRecorder) GetAlert(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlert", reflect.TypeOf((*MockSecretScanningService)(nil).GetAlert), arg0, arg1, arg2, arg3)
}

// ListAlertsForEnterprise mocks base method.
func (m *MockSecretScanningService) ListAlertsForEnterprise(arg0 context.Context, arg1 string, arg2 *github.SecretScanningAlertListOptions) ([]*github.SecretScanningAlert, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAlertsForEnterprise", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.SecretScanningAlert)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAlertsForEnterprise indicates an expected call of ListAlertsForEnterprise.
func (mr *MockSecretScanningServiceMockRecorder) ListAlertsForEnterprise(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlertsForEnterprise", reflect.TypeOf((*MockSecretScanningService)(nil).ListAlertsForEnterprise), arg0, arg1, arg2)
}

// ListAlertsForOrg mocks base method.
func (m *MockSecretScanningService) ListAlertsForOrg(arg0 context.Context, arg1 string, arg2 *github.SecretScanningAlertListOptions) ([]*github.SecretScanningAlert, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAlertsForOrg", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.SecretScanningAlert)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAlertsForOrg indicates an expected call of ListAlertsForOrg.
func (mr *MockSecretScanningServiceMockRecorder) ListAlertsForOrg(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlertsForOrg", reflect.TypeOf((*MockSecretScanningService)(nil).ListAlertsForOrg), arg0, arg1, arg2)
}

// ListAlertsForRepo mocks base method.
func (m *MockSecretScanningService) ListAlertsForRepo(arg0 context.Context, arg1, arg2 string, arg3 *github.SecretScanningAlertListOptions) ([]*github.SecretScanningAlert, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAlertsForRepo", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.SecretScanningAlert)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAlertsForRepo indicates an expected call of ListAlertsForRepo.
func (mr *MockSecretScanningServiceMockRecorder) ListAlertsForRepo(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlertsForRepo", reflect.TypeOf((*MockSecretScanningService)(nil).ListAlertsForRepo), arg0, arg1, arg2, arg3)
}

// ListLocationsForAlert mocks base method.
func (m *MockSecretScanningService) ListLocationsForAlert(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 *github.ListOptions) ([]*github.SecretScanningAlertLocation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLocationsForAlert", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.SecretScanningAlertLocation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListLocationsForAlert indicates an expected call of ListLocationsForAlert.
func (mr *MockSecretScanningServiceMockRecorder) ListLocationsForAlert(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLocationsForAlert", reflect.TypeOf((*MockSecretScanningService)(nil).ListLocationsForAlert), arg0, arg1, arg2, arg3, arg4)
}

// UpdateAlert mocks base method.
func (m *MockSecretScanningService) UpdateAlert(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 *github.SecretScanningAlertUpdateOptions) (*github.SecretScanningAlert, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAlert", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.SecretScanningAlert)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateAlert indicates an expected call of UpdateAlert.
func (mr *MockSecretScanningServiceMockRecorder) UpdateAlert(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlert", reflect.TypeOf((*MockSecretScanningService)(nil).UpdateAlert), arg0, arg1, arg2, arg3, arg4)
}

// MockTeamsService is a mock of TeamsService interface.
type MockTeamsService struct {
	ctrl     *gomock.Controller
	recorder *MockTeamsServiceMockRecorder
}

// MockTeamsServiceMockRecorder is the mock recorder for MockTeamsService.
type MockTeamsServiceMockRecorder struct {
	mock *MockTeamsService
}

// NewMockTeamsService creates a new mock instance.
func NewMockTeamsService(ctrl *gomock.Controller) *MockTeamsService {
	mock := &MockTeamsService{ctrl: ctrl}
	mock.recorder = &MockTeamsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamsService) EXPECT() *MockTeamsServiceMockRecorder {
	return m.recorder
}

// AddTeamMembershipByID mocks base method.
func (m *MockTeamsService) AddTeamMembershipByID(arg0 context.Context, arg1, arg2 int64, arg3 string, arg4 *github.TeamAddTeamMembershipOptions) (*github.Membership, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTeamMembershipByID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Membership)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddTeamMembershipByID indicates an expected call of AddTeamMembershipByID.
func (mr *MockTeamsServiceMockRecorder) AddTeamMembershipByID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTeamMembershipByID", reflect.TypeOf((*MockTeamsService)(nil).AddTeamMembershipByID), arg0, arg1, arg2, arg3, arg4)
}

// AddTeamMembershipBySlug mocks base method.
func (m *MockTeamsService) AddTeamMembershipBySlug(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.TeamAddTeamMembershipOptions) (*github.Membership, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTeamMembershipBySlug", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Membership)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddTeamMembershipBySlug indicates an expected call of AddTeamMembershipBySlug.
func (mr *MockTeamsServiceMockRecorder) AddTeamMembershipBySlug(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTeamMembershipBySlug", reflect.TypeOf((*MockTeamsService)(nil).AddTeamMembershipBySlug), arg0, arg1, arg2, arg3, arg4)
}

// AddTeamProjectByID mocks base method.
func (m *MockTeamsService) AddTeamProjectByID(arg0 context.Context, arg1, arg2, arg3 int64, arg4 *github.TeamProjectOptions) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTeamProjectByID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTeamProjectByID indicates an expected call of AddTeamProjectByID.
func (mr *MockTeamsServiceMockRecorder) AddTeamProjectByID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTeamProjectByID", reflect.TypeOf((*MockTeamsService)(nil).AddTeamProjectByID), arg0, arg1, arg2, arg3, arg4)
}

// AddTeamProjectBySlug mocks base method.
func (m *MockTeamsService) AddTeamProjectBySlug(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 *github.TeamProjectOptions) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTeamProjectBySlug", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTeamProjectBySlug indicates an expected call of AddTeamProjectBySlug.
func (mr *MockTeamsServiceMockRecorder) AddTeamProjectBySlug(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTeamProjectBySlug", reflect.TypeOf((*MockTeamsService)(nil).AddTeamProjectBySlug), arg0, arg1, arg2, arg3, arg4)
}

// AddTeamRepoByID mocks base method.
func (m *MockTeamsService) AddTeamRepoByID(arg0 context.Context, arg1, arg2 int64, arg3, arg4 string, arg5 *github.TeamAddTeamRepoOptions) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTeamRepoByID", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTeamRepoByID indicates an expected call of AddTeamRepoByID.
func (mr *MockTeamsServiceMockRecorder) AddTeamRepoByID(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTeamRepoByID", reflect.TypeOf((*MockTeamsService)(nil).AddTeamRepoByID), arg0, arg1, arg2, arg3, arg4, arg5)
}

// AddTeamRepoBySlug mocks base method.
func (m *MockTeamsService) AddTeamRepoBySlug(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *github.TeamAddTeamRepoOptions) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTeamRepoBySlug", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTeamRepoBySlug indicates an expected call of AddTeamRepoBySlug.
func (mr *MockTeamsServiceMockRecorder) AddTeamRepoBySlug(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTeamRepoBySlug", reflect.TypeOf((*MockTeamsService)(nil).AddTeamRepoBySlug), arg0, arg1, arg2, arg3, arg4, arg5)
}

// CreateCommentByID mocks base method.
func (m *MockTeamsService) CreateCommentByID(arg0 context.Context, arg1, arg2 int64, arg3 int, arg4 github.DiscussionComment) (*github.DiscussionComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommentByID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.DiscussionComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCommentByID indicates an expected call of CreateCommentByID.
func (mr *MockTeamsServiceMockRecorder) CreateCommentByID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentByID", reflect.TypeOf((*MockTeamsService)(nil).CreateCommentByID), arg0, arg1, arg2, arg3, arg4)
}

// CreateCommentBySlug mocks base method.
func (m *MockTeamsService) CreateCommentBySlug(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 github.DiscussionComment) (*github.DiscussionComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommentBySlug", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.DiscussionComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCommentBySlug indicates an expected call of CreateCommentBySlug.
func (mr *MockTeamsServiceMockRecorder) CreateCommentBySlug(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentBySlug", reflect.TypeOf((*MockTeamsService)(nil).CreateCommentBySlug), arg0, arg1, arg2, arg3, arg4)
}

// CreateDiscussionByID mocks base method.
func (m *MockTeamsService) CreateDiscussionByID(arg0 context.Context, arg1, arg2 int64, arg3 github.TeamDiscussion) (*github.TeamDiscussion, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDiscussionByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.TeamDiscussion)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDiscussionByID indicates an expected call of CreateDiscussionByID.
func (mr *MockTeamsServiceMockRecorder) CreateDiscussionByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiscussionByID", reflect.TypeOf((*MockTeamsService)(nil).CreateDiscussionByID), arg0, arg1, arg2, arg3)
}

// CreateDiscussionBySlug mocks base method.
func (m *MockTeamsService) CreateDiscussionBySlug(arg0 context.Context, arg1, arg2 string, arg3 github.TeamDiscussion) (*github.TeamDiscussion, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDiscussionBySlug", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.TeamDiscussion)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDiscussionBySlug indicates an expected call of CreateDiscussionBySlug.
func (mr *MockTeamsServiceMockRecorder) CreateDiscussionBySlug(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiscussionBySlug", reflect.TypeOf((*MockTeamsService)(nil).CreateDiscussionBySlug), arg0, arg1, arg2, arg3)
}

// CreateOrUpdateIDPGroupConnectionsByID mocks base method.
func (m *MockTeamsService) CreateOrUpdateIDPGroupConnectionsByID(arg0 context.Context, arg1, arg2 int64, arg3 github.IDPGroupList) (*github.IDPGroupList, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateIDPGroupConnectionsByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.IDPGroupList)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateOrUpdateIDPGroupConnectionsByID indicates an expected call of CreateOrUpdateIDPGroupConnectionsByID.
func (mr *MockTeamsServiceMockRecorder) CreateOrUpdateIDPGroupConnectionsByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateIDPGroupConnectionsByID", reflect.TypeOf((*MockTeamsService)(nil).CreateOrUpdateIDPGroupConnectionsByID), arg0, arg1, arg2, arg3)
}

// CreateOrUpdateIDPGroupConnectionsBySlug mocks base method.
func (m *MockTeamsService) CreateOrUpdateIDPGroupConnectionsBySlug(arg0 context.Context, arg1, arg2 string, arg3 github.IDPGroupList) (*github.IDPGroupList, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateIDPGroupConnectionsBySlug", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.IDPGroupList)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateOrUpdateIDPGroupConnectionsBySlug indicates an expected call of CreateOrUpdateIDPGroupConnectionsBySlug.
func (mr *MockTeamsServiceMockRecorder) CreateOrUpdateIDPGroupConnectionsBySlug(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateIDPGroupConnectionsBySlug", reflect.TypeOf((*MockTeamsService)(nil).CreateOrUpdateIDPGroupConnectionsBySlug), arg0, arg1, arg2, arg3)
}

// CreateTeam mocks base method.
func (m *MockTeamsService) CreateTeam(arg0 context.Context, arg1 string, arg2 github.NewTeam) (*github.Team, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Team)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTeam indicates an expected call of CreateTeam.
func (mr *MockTeamsServiceMockRecorder) CreateTeam(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockTeamsService)(nil).CreateTeam), arg0, arg1, arg2)
}

// DeleteCommentByID mocks base method.
func (m *MockTeamsService) DeleteCommentByID(arg0 context.Context, arg1, arg2 int64, arg3, arg4 int) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommentByID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCommentByID indicates an expected call of DeleteCommentByID.
func (mr *MockTeamsServiceMockRecorder) DeleteCommentByID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommentByID", reflect.TypeOf((*MockTeamsService)(nil).DeleteCommentByID), arg0, arg1, arg2, arg3, arg4)
}

// DeleteCommentBySlug mocks base method.
func (m *MockTeamsService) DeleteCommentBySlug(arg0 context.Context, arg1, arg2 string, arg3, arg4 int) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommentBySlug", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCommentBySlug indicates an expected call of DeleteCommentBySlug.
func (mr *MockTeamsServiceMockRecorder) DeleteCommentBySlug(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommentBySlug", reflect.TypeOf((*MockTeamsService)(nil).DeleteCommentBySlug), arg0, arg1, arg2, arg3, arg4)
}

// DeleteDiscussionByID mocks base method.
func (m *MockTeamsService) DeleteDiscussionByID(arg0 context.Context, arg1, arg2 int64, arg3 int) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDiscussionByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDiscussionByID indicates an expected call of DeleteDiscussionByID.
func (mr *MockTeamsServiceMockRecorder) DeleteDiscussionByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDiscussionByID", reflect.TypeOf((*MockTeamsService)(nil).DeleteDiscussionByID), arg0, arg1, arg2, arg3)
}

// DeleteDiscussionBySlug mocks base method.
func (m *MockTeamsService) DeleteDiscussionBySlug(arg0 context.Context, arg1, arg2 string, arg3 int) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDiscussionBySlug", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDiscussionBySlug indicates an expected call of DeleteDiscussionBySlug.
func (mr *MockTeamsServiceMockRecorder) DeleteDiscussionBySlug(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDiscussionBySlug", reflect.TypeOf((*MockTeamsService)(nil).DeleteDiscussionBySlug), arg0, arg1, arg2, arg3)
}

// DeleteTeamByID mocks base method.
func (m *MockTeamsService) DeleteTeamByID(arg0 context.Context, arg1, arg2 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeamByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTeamByID indicates an expected call of DeleteTeamByID.
func (mr *MockTeamsServiceMockRecorder) DeleteTeamByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeamByID", reflect.TypeOf((*MockTeamsService)(nil).DeleteTeamByID), arg0, arg1, arg2)
}

// DeleteTeamBySlug mocks base method.
func (m *MockTeamsService) DeleteTeamBySlug(arg0 context.Context, arg1, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeamBySlug", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTeamBySlug indicates an expected call of DeleteTeamBySlug.
func (mr *MockTeamsServiceMockRecorder) DeleteTeamBySlug(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeamBySlug", reflect.TypeOf((*MockTeamsService)(nil).DeleteTeamBySlug), arg0, arg1, arg2)
}

// EditCommentByID mocks base method.
func (m *MockTeamsService) EditCommentByID(arg0 context.Context, arg1, arg2 int64, arg3, arg4 int, arg5 github.DiscussionComment) (*github.DiscussionComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditCommentByID", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*github.DiscussionComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditCommentByID indicates an expected call of EditCommentByID.
func (mr *MockTeamsServiceMockRecorder) EditCommentByID(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditCommentByID", reflect.TypeOf((*MockTeamsService)(nil).EditCommentByID), arg0, arg1, arg2, arg3, arg4, arg5)
}

// EditCommentBySlug mocks base method.
func (m *MockTeamsService) EditCommentBySlug(arg0 context.Context, arg1, arg2 string, arg3, arg4 int, arg5 github.DiscussionComment) (*github.DiscussionComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditCommentBySlug", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*github.DiscussionComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditCommentBySlug indicates an expected call of EditCommentBySlug.
func (mr *MockTeamsServiceMockRecorder) EditCommentBySlug(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditCommentBySlug", reflect.TypeOf((*MockTeamsService)(nil).EditCommentBySlug), arg0, arg1, arg2, arg3, arg4, arg5)
}

// EditDiscussionByID mocks base method.
func (m *MockTeamsService) EditDiscussionByID(arg0 context.Context, arg1, arg2 int64, arg3 int, arg4 github.TeamDiscussion) (*github.TeamDiscussion, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditDiscussionByID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.TeamDiscussion)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditDiscussionByID indicates an expected call of EditDiscussionByID.
func (mr *MockTeamsServiceMockRecorder) EditDiscussionByID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditDiscussionByID", reflect.TypeOf((*MockTeamsService)(nil).EditDiscussionByID), arg0, arg1, arg2, arg3, arg4)
}

// EditDiscussionBySlug mocks base method.
func (m *MockTeamsService) EditDiscussionBySlug(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 github.TeamDiscussion) (*github.TeamDiscussion, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditDiscussionBySlug", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.TeamDiscussion)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditDiscussionBySlug indicates an expected call of EditDiscussionBySlug.
func (mr *MockTeamsServiceMockRecorder) EditDiscussionBySlug(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditDiscussionBySlug", reflect.TypeOf((*MockTeamsService)(nil).EditDiscussionBySlug), arg0, arg1, arg2, arg3, arg4)
}

// EditTeamByID mocks base method.
func (m *MockTeamsService) EditTeamByID(arg0 context.Context, arg1, arg2 int64, arg3 github.NewTeam, arg4 bool) (*github.Team, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditTeamByID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Team)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditTeamByID indicates an expected call of EditTeamByID.
func (mr *MockTeamsServiceMockRecorder) EditTeamByID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditTeamByID", reflect.TypeOf((*MockTeamsService)(nil).EditTeamByID), arg0, arg1, arg2, arg3, arg4)
}

// EditTeamBySlug mocks base method.
func (m *MockTeamsService) EditTeamBySlug(arg0 context.Context, arg1, arg2 string, arg3 github.NewTeam, arg4 bool) (*github.Team, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditTeamBySlug", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Team)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditTeamBySlug indicates an expected call of EditTeamBySlug.
func (mr *MockTeamsServiceMockRecorder) EditTeamBySlug(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditTeamBySlug", reflect.TypeOf((*MockTeamsService)(nil).EditTeamBySlug), arg0, arg1, arg2, arg3, arg4)
}

// GetCommentByID mocks base method.
func (m *MockTeamsService) GetCommentByID(arg0 context.Context, arg1, arg2 int64, arg3, arg4 int) (*github.DiscussionComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentByID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.DiscussionComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommentByID indicates an expected call of GetCommentByID.
func (mr *MockTeamsServiceMockRecorder) GetCommentByID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentByID", reflect.TypeOf((*MockTeamsService)(nil).GetCommentByID), arg0, arg1, arg2, arg3, arg4)
}

// GetCommentBySlug mocks base method.
func (m *MockTeamsService) GetCommentBySlug(arg0 context.Context, arg1, arg2 string, arg3, arg4 int) (*github.DiscussionComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentBySlug", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.DiscussionComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommentBySlug indicates an expected call of GetCommentBySlug.
func (mr *MockTeamsServiceMockRecorder) GetCommentBySlug(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentBySlug", reflect.TypeOf((*MockTeamsService)(nil).GetCommentBySlug), arg0, arg1, arg2, arg3, arg4)
}

// GetDiscussionByID mocks base method.
func (m *MockTeamsService) GetDiscussionByID(arg0 context.Context, arg1, arg2 int64, arg3 int) (*github.TeamDiscussion, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscussionByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.TeamDiscussion)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDiscussionByID indicates an expected call of GetDiscussionByID.
func (mr *MockTeamsServiceMockRecorder) GetDiscussionByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscussionByID", reflect.TypeOf((*MockTeamsService)(nil).GetDiscussionByID), arg0, arg1, arg2, arg3)
}

// GetDiscussionBySlug mocks base method.
func (m *MockTeamsService) GetDiscussionBySlug(arg0 context.Context, arg1, arg2 string, arg3 int) (*github.TeamDiscussion, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscussionBySlug", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.TeamDiscussion)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDiscussionBySlug indicates an expected call of GetDiscussionBySlug.
func (mr *MockTeamsServiceMockRecorder) GetDiscussionBySlug(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscussionBySlug", reflect.TypeOf((*MockTeamsService)(nil).GetDiscussionBySlug), arg0, arg1, arg2, arg3)
}

// GetExternalGroup mocks base method.
func (m *MockTeamsService) GetExternalGroup(arg0 context.Context, arg1 string, arg2 int64) (*github.ExternalGroup, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.ExternalGroup)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetExternalGroup indicates an expected call of GetExternalGroup.
func (mr *MockTeamsServiceMockRecorder) GetExternalGroup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalGroup", reflect.TypeOf((*MockTeamsService)(nil).GetExternalGroup), arg0, arg1, arg2)
}

// GetTeamByID mocks base method.
func (m *MockTeamsService) GetTeamByID(arg0 context.Context, arg1, arg2 int64) (*github.Team, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Team)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTeamByID indicates an expected call of GetTeamByID.
func (mr *MockTeamsServiceMockRecorder) GetTeamByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamByID", reflect.TypeOf((*MockTeamsService)(nil).GetTeamByID), arg0, arg1, arg2)
}

// GetTeamBySlug mocks base method.
func (m *MockTeamsService) GetTeamBySlug(arg0 context.Context, arg1, arg2 string) (*github.Team, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamBySlug", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Team)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTeamBySlug indicates an expected call of GetTeamBySlug.
func (mr *MockTeamsServiceMockRecorder) GetTeamBySlug(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamBySlug", reflect.TypeOf((*MockTeamsService)(nil).GetTeamBySlug), arg0, arg1, arg2)
}

// GetTeamMembershipByID mocks base method.
func (m *MockTeamsService) GetTeamMembershipByID(arg0 context.Context, arg1, arg2 int64, arg3 string) (*github.Membership, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamMembershipByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Membership)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTeamMembershipByID indicates an expected call of GetTeamMembershipByID.
func (mr *MockTeamsServiceMockRecorder) GetTeamMembershipByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamMembershipByID", reflect.TypeOf((*MockTeamsService)(nil).GetTeamMembershipByID), arg0, arg1, arg2, arg3)
}

// GetTeamMembershipBySlug mocks base method.
func (m *MockTeamsService) GetTeamMembershipBySlug(arg0 context.Context, arg1, arg2, arg3 string) (*github.Membership, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamMembershipBySlug", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Membership)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTeamMembershipBySlug indicates an expected call of GetTeamMembershipBySlug.
func (mr *MockTeamsServiceMockRecorder) GetTeamMembershipBySlug(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamMembershipBySlug", reflect.TypeOf((*MockTeamsService)(nil).GetTeamMembershipBySlug), arg0, arg1, arg2, arg3)
}

// IsTeamRepoByID mocks base method.
func (m *MockTeamsService) IsTeamRepoByID(arg0 context.Context, arg1, arg2 int64, arg3, arg4 string) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTeamRepoByID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsTeamRepoByID indicates an expected call of IsTeamRepoByID.
func (mr *MockTeamsServiceMockRecorder) IsTeamRepoByID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTeamRepoByID", reflect.TypeOf((*MockTeamsService)(nil).IsTeamRepoByID), arg0, arg1, arg2, arg3, arg4)
}

// IsTeamRepoBySlug mocks base method.
func (m *MockTeamsService) IsTeamRepoBySlug(arg0 context.Context, arg1, arg2, arg3, arg4 string) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTeamRepoBySlug", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsTeamRepoBySlug indicates an expected call of IsTeamRepoBySlug.
func (mr *MockTeamsServiceMockRecorder) IsTeamRepoBySlug(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTeamRepoBySlug", reflect.TypeOf((*MockTeamsService)(nil).IsTeamRepoBySlug), arg0, arg1, arg2, arg3, arg4)
}

// ListChildTeamsByParentID mocks base method.
func (m *MockTeamsService) ListChildTeamsByParentID(arg0 context.Context, arg1, arg2 int64, arg3 *github.ListOptions) ([]*github.Team, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChildTeamsByParentID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.Team)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListChildTeamsByParentID indicates an expected call of ListChildTeamsByParentID.
func (mr *MockTeamsServiceMockRecorder) ListChildTeamsByParentID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChildTeamsByParentID", reflect.TypeOf((*MockTeamsService)(nil).ListChildTeamsByParentID), arg0, arg1, arg2, arg3)
}

// ListChildTeamsByParentSlug mocks base method.
func (m *MockTeamsService) ListChildTeamsByParentSlug(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) ([]*github.Team, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChildTeamsByParentSlug", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.Team)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListChildTeamsByParentSlug indicates an expected call of ListChildTeamsByParentSlug.
func (mr *MockTeamsServiceMockRecorder) ListChildTeamsByParentSlug(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChildTeamsByParentSlug", reflect.TypeOf((*MockTeamsService)(nil).ListChildTeamsByParentSlug), arg0, arg1, arg2, arg3)
}

// ListCommentsByID mocks base method.
func (m *MockTeamsService) ListCommentsByID(arg0 context.Context, arg1, arg2 int64, arg3 int, arg4 *github.DiscussionCommentListOptions) ([]*github.DiscussionComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommentsByID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.DiscussionComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCommentsByID indicates an expected call of ListCommentsByID.
func (mr *MockTeamsServiceMockRecorder) ListCommentsByID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommentsByID", reflect.TypeOf((*MockTeamsService)(nil).ListCommentsByID), arg0, arg1, arg2, arg3, arg4)
}

// ListCommentsBySlug mocks base method.
func (m *MockTeamsService) ListCommentsBySlug(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.DiscussionCommentListOptions) ([]*github.DiscussionComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommentsBySlug", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.DiscussionComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCommentsBySlug indicates an expected call of ListCommentsBySlug.
func (mr *MockTeamsServiceMockRecorder) ListCommentsBySlug(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommentsBySlug", reflect.TypeOf((*MockTeamsService)(nil).ListCommentsBySlug), arg0, arg1, arg2, arg3, arg4)
}

// ListDiscussionsByID mocks base method.
func (m *MockTeamsService) ListDiscussionsByID(arg0 context.Context, arg1, arg2 int64, arg3 *github.DiscussionListOptions) ([]*github.TeamDiscussion, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDiscussionsByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.TeamDiscussion)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDiscussionsByID indicates an expected call of ListDiscussionsByID.
func (mr *MockTeamsServiceMockRecorder) ListDiscussionsByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDiscussionsByID", reflect.TypeOf((*MockTeamsService)(nil).ListDiscussionsByID), arg0, arg1, arg2, arg3)
}

// ListDiscussionsBySlug mocks base method.
func (m *MockTeamsService) ListDiscussionsBySlug(arg0 context.Context, arg1, arg2 string, arg3 *github.DiscussionListOptions) ([]*github.TeamDiscussion, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDiscussionsBySlug", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.TeamDiscussion)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDiscussionsBySlug indicates an expected call of ListDiscussionsBySlug.
func (mr *MockTeamsServiceMockRecorder) ListDiscussionsBySlug(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDiscussionsBySlug", reflect.TypeOf((*MockTeamsService)(nil).ListDiscussionsBySlug), arg0, arg1, arg2, arg3)
}

// ListExternalGroups mocks base method.
func (m *MockTeamsService) ListExternalGroups(arg0 context.Context, arg1 string, arg2 *github.ListExternalGroupsOptions) (*github.ExternalGroupList, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExternalGroups", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.ExternalGroupList)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListExternalGroups indicates an expected call of ListExternalGroups.
func (mr *MockTeamsServiceMockRecorder) ListExternalGroups(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExternalGroups", reflect.TypeOf((*MockTeamsService)(nil).ListExternalGroups), arg0, arg1, arg2)
}

// ListIDPGroupsForTeamByID mocks base method.
func (m *MockTeamsService) ListIDPGroupsForTeamByID(arg0 context.Context, arg1, arg2 int64) (*github.IDPGroupList, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIDPGroupsForTeamByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.IDPGroupList)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListIDPGroupsForTeamByID indicates an expected call of ListIDPGroupsForTeamByID.
func (mr *MockTeamsServiceMockRecorder) ListIDPGroupsForTeamByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIDPGroupsForTeamByID", reflect.TypeOf((*MockTeamsService)(nil).ListIDPGroupsForTeamByID), arg0, arg1, arg2)
}

// ListIDPGroupsForTeamBySlug mocks base method.
func (m *MockTeamsService) ListIDPGroupsForTeamBySlug(arg0 context.Context, arg1, arg2 string) (*github.IDPGroupList, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIDPGroupsForTeamBySlug", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.IDPGroupList)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListIDPGroupsForTeamBySlug indicates an expected call of ListIDPGroupsForTeamBySlug.
func (mr *MockTeamsServiceMockRecorder) ListIDPGroupsForTeamBySlug(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIDPGroupsForTeamBySlug", reflect.TypeOf((*MockTeamsService)(nil).ListIDPGroupsForTeamBySlug), arg0, arg1, arg2)
}

// ListIDPGroupsInOrganization mocks base method.
func (m *MockTeamsService) ListIDPGroupsInOrganization(arg0 context.Context, arg1 string, arg2 *github.ListCursorOptions) (*github.IDPGroupList, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIDPGroupsInOrganization", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.IDPGroupList)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListIDPGroupsInOrganization indicates an expected call of ListIDPGroupsInOrganization.
func (mr *MockTeamsServiceMockRecorder) ListIDPGroupsInOrganization(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIDPGroupsInOrganization", reflect.TypeOf((*MockTeamsService)(nil).ListIDPGroupsInOrganization), arg0, arg1, arg2)
}

// ListPendingTeamInvitationsByID mocks base method.
func (m *MockTeamsService) ListPendingTeamInvitationsByID(arg0 context.Context, arg1, arg2 int64, arg3 *github.ListOptions) ([]*github.Invitation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPendingTeamInvitationsByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.Invitation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPendingTeamInvitationsByID indicates an expected call of ListPendingTeamInvitationsByID.
func (mr *MockTeamsServiceMockRecorder) ListPendingTeamInvitationsByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPendingTeamInvitationsByID", reflect.TypeOf((*MockTeamsService)(nil).ListPendingTeamInvitationsByID), arg0, arg1, arg2, arg3)
}

// ListPendingTeamInvitationsBySlug mocks base method.
func (m *MockTeamsService) ListPendingTeamInvitationsBySlug(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) ([]*github.Invitation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPendingTeamInvitationsBySlug", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.Invitation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPendingTeamInvitationsBySlug indicates an expected call of ListPendingTeamInvitationsBySlug.
func (mr *MockTeamsServiceMockRecorder) ListPendingTeamInvitationsBySlug(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPendingTeamInvitationsBySlug", reflect.TypeOf((*MockTeamsService)(nil).ListPendingTeamInvitationsBySlug), arg0, arg1, arg2, arg3)
}

// ListTeamMembersByID mocks base method.
func (m *MockTeamsService) ListTeamMembersByID(arg0 context.Context, arg1, arg2 int64, arg3 *github.TeamListTeamMembersOptions) ([]*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeamMembersByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTeamMembersByID indicates an expected call of ListTeamMembersByID.
func (mr *MockTeamsServiceMockRecorder) ListTeamMembersByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeamMembersByID", reflect.TypeOf((*MockTeamsService)(nil).ListTeamMembersByID), arg0, arg1, arg2, arg3)
}

// ListTeamMembersBySlug mocks base method.
func (m *MockTeamsService) ListTeamMembersBySlug(arg0 context.Context, arg1, arg2 string, arg3 *github.TeamListTeamMembersOptions) ([]*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeamMembersBySlug", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTeamMembersBySlug indicates an expected call of ListTeamMembersBySlug.
func (mr *MockTeamsServiceMockRecorder) ListTeamMembersBySlug(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeamMembersBySlug", reflect.TypeOf((*MockTeamsService)(nil).ListTeamMembersBySlug), arg0, arg1, arg2, arg3)
}

// ListTeamProjectsByID mocks base method.
func (m *MockTeamsService) ListTeamProjectsByID(arg0 context.Context, arg1, arg2 int64) ([]*github.Project, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeamProjectsByID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.Project)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTeamProjectsByID indicates an expected call of ListTeamProjectsByID.
func (mr *MockTeamsServiceMockRecorder) ListTeamProjectsByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeamProjectsByID", reflect.TypeOf((*MockTeamsService)(nil).ListTeamProjectsByID), arg0, arg1, arg2)
}

// ListTeamProjectsBySlug mocks base method.
func (m *MockTeamsService) ListTeamProjectsBySlug(arg0 context.Context, arg1, arg2 string) ([]*github.Project, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeamProjectsBySlug", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.Project)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTeamProjectsBySlug indicates an expected call of ListTeamProjectsBySlug.
func (mr *MockTeamsServiceMockRecorder) ListTeamProjectsBySlug(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeamProjectsBySlug", reflect.TypeOf((*MockTeamsService)(nil).ListTeamProjectsBySlug), arg0, arg1, arg2)
}

// ListTeamReposByID mocks base method.
func (m *MockTeamsService) ListTeamReposByID(arg0 context.Context, arg1, arg2 int64, arg3 *github.ListOptions) ([]*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeamReposByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTeamReposByID indicates an expected call of ListTeamReposByID.
func (mr *MockTeamsServiceMockRecorder) ListTeamReposByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeamReposByID", reflect.TypeOf((*MockTeamsService)(nil).ListTeamReposByID), arg0, arg1, arg2, arg3)
}

// ListTeamReposBySlug mocks base method.
func (m *MockTeamsService) ListTeamReposBySlug(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) ([]*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeamReposBySlug", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTeamReposBySlug indicates an expected call of ListTeamReposBySlug.
func (mr *MockTeamsServiceMockRecorder) ListTeamReposBySlug(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeamReposBySlug", reflect.TypeOf((*MockTeamsService)(nil).ListTeamReposBySlug), arg0, arg1, arg2, arg3)
}

// ListTeams mocks base method.
func (m *MockTeamsService) ListTeams(arg0 context.Context, arg1 string, arg2 *github.ListOptions) ([]*github.Team, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeams", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.Team)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTeams indicates an expected call of ListTeams.
func (mr *MockTeamsServiceMockRecorder) ListTeams(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeams", reflect.TypeOf((*MockTeamsService)(nil).ListTeams), arg0, arg1, arg2)
}

// ListUserTeams mocks base method.
func (m *MockTeamsService) ListUserTeams(arg0 context.Context, arg1 *github.ListOptions) ([]*github.Team, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserTeams", arg0, arg1)
	ret0, _ := ret[0].([]*github.Team)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUserTeams indicates an expected call of ListUserTeams.
func (mr *MockTeamsServiceMockRecorder) ListUserTeams(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserTeams", reflect.TypeOf((*MockTeamsService)(nil).ListUserTeams), arg0, arg1)
}

// RemoveConnectedExternalGroup mocks base method.
func (m *MockTeamsService) RemoveConnectedExternalGroup(arg0 context.Context, arg1, arg2 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveConnectedExternalGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveConnectedExternalGroup indicates an expected call of RemoveConnectedExternalGroup.
func (mr *MockTeamsServiceMockRecorder) RemoveConnectedExternalGroup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveConnectedExternalGroup", reflect.TypeOf((*MockTeamsService)(nil).RemoveConnectedExternalGroup), arg0, arg1, arg2)
}

// RemoveTeamMembershipByID mocks base method.
func (m *MockTeamsService) RemoveTeamMembershipByID(arg0 context.Context, arg1, arg2 int64, arg3 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTeamMembershipByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTeamMembershipByID indicates an expected call of RemoveTeamMembershipByID.
func (mr *MockTeamsServiceMockRecorder) RemoveTeamMembershipByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTeamMembershipByID", reflect.TypeOf((*MockTeamsService)(nil).RemoveTeamMembershipByID), arg0, arg1, arg2, arg3)
}

// RemoveTeamMembershipBySlug mocks base method.
func (m *MockTeamsService) RemoveTeamMembershipBySlug(arg0 context.Context, arg1, arg2, arg3 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTeamMembershipBySlug", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTeamMembershipBySlug indicates an expected call of RemoveTeamMembershipBySlug.
func (mr *MockTeamsServiceMockRecorder) RemoveTeamMembershipBySlug(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTeamMembershipBySlug", reflect.TypeOf((*MockTeamsService)(nil).RemoveTeamMembershipBySlug), arg0, arg1, arg2, arg3)
}

// RemoveTeamProjectByID mocks base method.
func (m *MockTeamsService) RemoveTeamProjectByID(arg0 context.Context, arg1, arg2, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTeamProjectByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTeamProjectByID indicates an expected call of RemoveTeamProjectByID.
func (mr *MockTeamsServiceMockRecorder) RemoveTeamProjectByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTeamProjectByID", reflect.TypeOf((*MockTeamsService)(nil).RemoveTeamProjectByID), arg0, arg1, arg2, arg3)
}

// RemoveTeamProjectBySlug mocks base method.
func (m *MockTeamsService) RemoveTeamProjectBySlug(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTeamProjectBySlug", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTeamProjectBySlug indicates an expected call of RemoveTeamProjectBySlug.
func (mr *MockTeamsServiceMockRecorder) RemoveTeamProjectBySlug(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTeamProjectBySlug", reflect.TypeOf((*MockTeamsService)(nil).RemoveTeamProjectBySlug), arg0, arg1, arg2, arg3)
}

// RemoveTeamRepoByID mocks base method.
func (m *MockTeamsService) RemoveTeamRepoByID(arg0 context.Context, arg1, arg2 int64, arg3, arg4 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTeamRepoByID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTeamRepoByID indicates an expected call of RemoveTeamRepoByID.
func (mr *MockTeamsServiceMockRecorder) RemoveTeamRepoByID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTeamRepoByID", reflect.TypeOf((*MockTeamsService)(nil).RemoveTeamRepoByID), arg0, arg1, arg2, arg3, arg4)
}

// RemoveTeamRepoBySlug mocks base method.
func (m *MockTeamsService) RemoveTeamRepoBySlug(arg0 context.Context, arg1, arg2, arg3, arg4 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTeamRepoBySlug", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTeamRepoBySlug indicates an expected call of RemoveTeamRepoBySlug.
func (mr *MockTeamsServiceMockRecorder) RemoveTeamRepoBySlug(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTeamRepoBySlug", reflect.TypeOf((*MockTeamsService)(nil).RemoveTeamRepoBySlug), arg0, arg1, arg2, arg3, arg4)
}

// ReviewTeamProjectsByID mocks base method.
func (m *MockTeamsService) ReviewTeamProjectsByID(arg0 context.Context, arg1, arg2, arg3 int64) (*github.Project, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReviewTeamProjectsByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Project)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReviewTeamProjectsByID indicates an expected call of ReviewTeamProjectsByID.
func (mr *MockTeamsServiceMockRecorder) ReviewTeamProjectsByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReviewTeamProjectsByID", reflect.TypeOf((*MockTeamsService)(nil).ReviewTeamProjectsByID), arg0, arg1, arg2, arg3)
}

// ReviewTeamProjectsBySlug mocks base method.
func (m *MockTeamsService) ReviewTeamProjectsBySlug(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Project, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReviewTeamProjectsBySlug", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Project)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReviewTeamProjectsBySlug indicates an expected call of ReviewTeamProjectsBySlug.
func (mr *MockTeamsServiceMockRecorder) ReviewTeamProjectsBySlug(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReviewTeamProjectsBySlug", reflect.TypeOf((*MockTeamsService)(nil).ReviewTeamProjectsBySlug), arg0, arg1, arg2, arg3)
}

// UpdateConnectedExternalGroup mocks base method.
func (m *MockTeamsService) UpdateConnectedExternalGroup(arg0 context.Context, arg1, arg2 string, arg3 *github.ExternalGroup) (*github.ExternalGroup, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConnectedExternalGroup", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.ExternalGroup)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateConnectedExternalGroup indicates an expected call of UpdateConnectedExternalGroup.
func (mr *MockTeamsServiceMockRecorder) UpdateConnectedExternalGroup(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnectedExternalGroup", reflect.TypeOf((*MockTeamsService)(nil).UpdateConnectedExternalGroup), arg0, arg1, arg2, arg3)
}

// MockUsersService is a mock of UsersService interface.
type MockUsersService struct {
	ctrl     *gomock.Controller
	recorder *MockUsersServiceMockRecorder
}

// MockUsersServiceMockRecorder is the mock recorder for MockUsersService.
type MockUsersServiceMockRecorder struct {
	mock *MockUsersService
}

// NewMockUsersService creates a new mock instance.
func NewMockUsersService(ctrl *gomock.Controller) *MockUsersService {
	mock := &MockUsersService{ctrl: ctrl}
	mock.recorder = &MockUsersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersService) EXPECT() *MockUsersServiceMockRecorder {
	return m.recorder
}

// AcceptInvitation mocks base method.
func (m *MockUsersService) AcceptInvitation(arg0 context.Context, arg1 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptInvitation", arg0, arg1)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptInvitation indicates an expected call of AcceptInvitation.
func (mr *MockUsersServiceMockRecorder) AcceptInvitation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptInvitation", reflect.TypeOf((*MockUsersService)(nil).AcceptInvitation), arg0, arg1)
}

// AddEmails mocks base method.
func (m *MockUsersService) AddEmails(arg0 context.Context, arg1 []string) ([]*github.UserEmail, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEmails", arg0, arg1)
	ret0, _ := ret[0].([]*github.UserEmail)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddEmails indicates an expected call of AddEmails.
func (mr *MockUsersServiceMockRecorder) AddEmails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEmails", reflect.TypeOf((*MockUsersService)(nil).AddEmails), arg0, arg1)
}

// BlockUser mocks base method.
func (m *MockUsersService) BlockUser(arg0 context.Context, arg1 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockUser", arg0, arg1)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockUser indicates an expected call of BlockUser.
func (mr *MockUsersServiceMockRecorder) BlockUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockUser", reflect.TypeOf((*MockUsersService)(nil).BlockUser), arg0, arg1)
}

// CreateGPGKey mocks base method.
func (m *MockUsersService) CreateGPGKey(arg0 context.Context, arg1 string) (*github.GPGKey, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGPGKey", arg0, arg1)
	ret0, _ := ret[0].(*github.GPGKey)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateGPGKey indicates an expected call of CreateGPGKey.
func (mr *MockUsersServiceMockRecorder) CreateGPGKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGPGKey", reflect.TypeOf((*MockUsersService)(nil).CreateGPGKey), arg0, arg1)
}

// CreateKey mocks base method.
func (m *MockUsersService) CreateKey(arg0 context.Context, arg1 *github.Key) (*github.Key, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKey", arg0, arg1)
	ret0, _ := ret[0].(*github.Key)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateKey indicates an expected call of CreateKey.
func (mr *MockUsersServiceMockRecorder) CreateKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKey", reflect.TypeOf((*MockUsersService)(nil).CreateKey), arg0, arg1)
}

// CreateProject mocks base method.
func (m *MockUsersService) CreateProject(arg0 context.Context, arg1 *github.CreateUserProjectOptions) (*github.Project, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", arg0, arg1)
	ret0, _ := ret[0].(*github.Project)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockUsersServiceMockRecorder) CreateProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockUsersService)(nil).CreateProject), arg0, arg1)
}

// CreateSSHSigningKey mocks base method.
func (m *MockUsersService) CreateSSHSigningKey(arg0 context.Context, arg1 *github.Key) (*github.SSHSigningKey, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSSHSigningKey", arg0, arg1)
	ret0, _ := ret[0].(*github.SSHSigningKey)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSSHSigningKey indicates an expected call of CreateSSHSigningKey.
func (mr *MockUsersServiceMockRecorder) CreateSSHSigningKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSSHSigningKey", reflect.TypeOf((*MockUsersService)(nil).CreateSSHSigningKey), arg0, arg1)
}

// DeclineInvitation mocks base method.
func (m *MockUsersService) DeclineInvitation(arg0 context.Context, arg1 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclineInvitation", arg0, arg1)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeclineInvitation indicates an expected call of DeclineInvitation.
func (mr *MockUsersServiceMockRecorder) DeclineInvitation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclineInvitation", reflect.TypeOf((*MockUsersService)(nil).DeclineInvitation), arg0, arg1)
}

// DeleteEmails mocks base method.
func (m *MockUsersService) DeleteEmails(arg0 context.Context, arg1 []string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmails", arg0, arg1)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmails indicates an expected call of DeleteEmails.
func (mr *MockUsersServiceMockRecorder) DeleteEmails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmails", reflect.TypeOf((*MockUsersService)(nil).DeleteEmails), arg0, arg1)
}

// DeleteGPGKey mocks base method.
func (m *MockUsersService) DeleteGPGKey(arg0 context.Context, arg1 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGPGKey", arg0, arg1)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGPGKey indicates an expected call of DeleteGPGKey.
func (mr *MockUsersServiceMockRecorder) DeleteGPGKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGPGKey", reflect.TypeOf((*MockUsersService)(nil).DeleteGPGKey), arg0, arg1)
}

// DeleteKey mocks base method.
func (m *MockUsersService) DeleteKey(arg0 context.Context, arg1 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKey", arg0, arg1)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKey indicates an expected call of DeleteKey.
func (mr *MockUsersServiceMockRecorder) DeleteKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKey", reflect.TypeOf((*MockUsersService)(nil).DeleteKey), arg0, arg1)
}

// DeletePackage mocks base method.
func (m *MockUsersService) DeletePackage(arg0 context.Context, arg1, arg2, arg3 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePackage", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePackage indicates an expected call of DeletePackage.
func (mr *MockUsersServiceMockRecorder) DeletePackage(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePackage", reflect.TypeOf((*MockUsersService)(nil).DeletePackage), arg0, arg1, arg2, arg3)
}

// DeleteSSHSigningKey mocks base method.
func (m *MockUsersService) DeleteSSHSigningKey(arg0 context.Context, arg1 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSSHSigningKey", arg0, arg1)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSSHSigningKey indicates an expected call of DeleteSSHSigningKey.
func (mr *MockUsersServiceMockRecorder) DeleteSSHSigningKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSSHSigningKey", reflect.TypeOf((*MockUsersService)(nil).DeleteSSHSigningKey), arg0, arg1)
}

// DemoteSiteAdmin mocks base method.
func (m *MockUsersService) DemoteSiteAdmin(arg0 context.Context, arg1 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DemoteSiteAdmin", arg0, arg1)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DemoteSiteAdmin indicates an expected call of DemoteSiteAdmin.
func (mr *MockUsersServiceMockRecorder) DemoteSiteAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DemoteSiteAdmin", reflect.TypeOf((*MockUsersService)(nil).DemoteSiteAdmin), arg0, arg1)
}

// Edit mocks base method.
func (m *MockUsersService) Edit(arg0 context.Context, arg1 *github.User) (*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", arg0, arg1)
	ret0, _ := ret[0].(*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Edit indicates an expected call of Edit.
func (mr *MockUsersServiceMockRecorder) Edit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockUsersService)(nil).Edit), arg0, arg1)
}

// Follow mocks base method.
func (m *MockUsersService) Follow(arg0 context.Context, arg1 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Follow", arg0, arg1)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Follow indicates an expected call of Follow.
func (mr *MockUsersServiceMockRecorder) Follow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Follow", reflect.TypeOf((*MockUsersService)(nil).Follow), arg0, arg1)
}

// Get mocks base method.
func (m *MockUsersService) Get(arg0 context.Context, arg1 string) (*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockUsersServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUsersService)(nil).Get), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockUsersService) GetByID(arg0 context.Context, arg1 int64) (*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUsersServiceMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUsersService)(nil).GetByID), arg0, arg1)
}

// GetGPGKey mocks base method.
func (m *MockUsersService) GetGPGKey(arg0 context.Context, arg1 int64) (*github.GPGKey, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGPGKey", arg0, arg1)
	ret0, _ := ret[0].(*github.GPGKey)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGPGKey indicates an expected call of GetGPGKey.
func (mr *MockUsersServiceMockRecorder) GetGPGKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGPGKey", reflect.TypeOf((*MockUsersService)(nil).GetGPGKey), arg0, arg1)
}

// GetHovercard mocks base method.
func (m *MockUsersService) GetHovercard(arg0 context.Context, arg1 string, arg2 *github.HovercardOptions) (*github.Hovercard, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHovercard", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Hovercard)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetHovercard indicates an expected call of GetHovercard.
func (mr *MockUsersServiceMockRecorder) GetHovercard(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHovercard", reflect.TypeOf((*MockUsersService)(nil).GetHovercard), arg0, arg1, arg2)
}

// GetKey mocks base method.
func (m *MockUsersService) GetKey(arg0 context.Context, arg1 int64) (*github.Key, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey", arg0, arg1)
	ret0, _ := ret[0].(*github.Key)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetKey indicates an expected call of GetKey.
func (mr *MockUsersServiceMockRecorder) GetKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockUsersService)(nil).GetKey), arg0, arg1)
}

// GetPackage mocks base method.
func (m *MockUsersService) GetPackage(arg0 context.Context, arg1, arg2, arg3 string) (*github.Package, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackage", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Package)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPackage indicates an expected call of GetPackage.
func (mr *MockUsersServiceMockRecorder) GetPackage(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackage", reflect.TypeOf((*MockUsersService)(nil).GetPackage), arg0, arg1, arg2, arg3)
}

// GetSSHSigningKey mocks base method.
func (m *MockUsersService) GetSSHSigningKey(arg0 context.Context, arg1 int64) (*github.SSHSigningKey, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSSHSigningKey", arg0, arg1)
	ret0, _ := ret[0].(*github.SSHSigningKey)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSSHSigningKey indicates an expected call of GetSSHSigningKey.
func (mr *MockUsersServiceMockRecorder) GetSSHSigningKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSHSigningKey", reflect.TypeOf((*MockUsersService)(nil).GetSSHSigningKey), arg0, arg1)
}

// IsBlocked mocks base method.
func (m *MockUsersService) IsBlocked(arg0 context.Context, arg1 string) (bool, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBlocked", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsBlocked indicates an expected call of IsBlocked.
func (mr *MockUsersServiceMockRecorder) IsBlocked(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBlocked", reflect.TypeOf((*MockUsersService)(nil).IsBlocked), arg0, arg1)
}

// IsFollowing mocks base method.
func (m *MockUsersService) IsFollowing(arg0 context.Context, arg1, arg2 string) (bool, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFollowing", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsFollowing indicates an expected call of IsFollowing.
func (mr *MockUsersServiceMockRecorder) IsFollowing(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFollowing", reflect.TypeOf((*MockUsersService)(nil).IsFollowing), arg0, arg1, arg2)
}

// ListAll mocks base method.
func (m *MockUsersService) ListAll(arg0 context.Context, arg1 *github.UserListOptions) ([]*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", arg0, arg1)
	ret0, _ := ret[0].([]*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAll indicates an expected call of ListAll.
func (mr *MockUsersServiceMockRecorder) ListAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockUsersService)(nil).ListAll), arg0, arg1)
}

// ListBlockedUsers mocks base method.
func (m *MockUsersService) ListBlockedUsers(arg0 context.Context, arg1 *github.ListOptions) ([]*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBlockedUsers", arg0, arg1)
	ret0, _ := ret[0].([]*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBlockedUsers indicates an expected call of ListBlockedUsers.
func (mr *MockUsersServiceMockRecorder) ListBlockedUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBlockedUsers", reflect.TypeOf((*MockUsersService)(nil).ListBlockedUsers), arg0, arg1)
}

// ListEmails mocks base method.
func (m *MockUsersService) ListEmails(arg0 context.Context, arg1 *github.ListOptions) ([]*github.UserEmail, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmails", arg0, arg1)
	ret0, _ := ret[0].([]*github.UserEmail)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEmails indicates an expected call of ListEmails.
func (mr *MockUsersServiceMockRecorder) ListEmails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmails", reflect.TypeOf((*MockUsersService)(nil).ListEmails), arg0, arg1)
}

// ListFollowers mocks base method.
func (m *MockUsersService) ListFollowers(arg0 context.Context, arg1 string, arg2 *github.ListOptions) ([]*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFollowers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFollowers indicates an expected call of ListFollowers.
func (mr *MockUsersServiceMockRecorder) ListFollowers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFollowers", reflect.TypeOf((*MockUsersService)(nil).ListFollowers), arg0, arg1, arg2)
}

// ListFollowing mocks base method.
func (m *MockUsersService) ListFollowing(arg0 context.Context, arg1 string, arg2 *github.ListOptions) ([]*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFollowing", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFollowing indicates an expected call of ListFollowing.
func (mr *MockUsersServiceMockRecorder) ListFollowing(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFollowing", reflect.TypeOf((*MockUsersService)(nil).ListFollowing), arg0, arg1, arg2)
}

// ListGPGKeys mocks base method.
func (m *MockUsersService) ListGPGKeys(arg0 context.Context, arg1 string, arg2 *github.ListOptions) ([]*github.GPGKey, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGPGKeys", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.GPGKey)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGPGKeys indicates an expected call of ListGPGKeys.
func (mr *MockUsersServiceMockRecorder) ListGPGKeys(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGPGKeys", reflect.TypeOf((*MockUsersService)(nil).ListGPGKeys), arg0, arg1, arg2)
}

// ListInvitations mocks base method.
func (m *MockUsersService) ListInvitations(arg0 context.Context, arg1 *github.ListOptions) ([]*github.RepositoryInvitation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvitations", arg0, arg1)
	ret0, _ := ret[0].([]*github.RepositoryInvitation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListInvitations indicates an expected call of ListInvitations.
func (mr *MockUsersServiceMockRecorder) ListInvitations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitations", reflect.TypeOf((*MockUsersService)(nil).ListInvitations), arg0, arg1)
}

// ListKeys mocks base method.
func (m *MockUsersService) ListKeys(arg0 context.Context, arg1 string, arg2 *github.ListOptions) ([]*github.Key, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeys", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.Key)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListKeys indicates an expected call of ListKeys.
func (mr *MockUsersServiceMockRecorder) ListKeys(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeys", reflect.TypeOf((*MockUsersService)(nil).ListKeys), arg0, arg1, arg2)
}

// ListPackages mocks base method.
func (m *MockUsersService) ListPackages(arg0 context.Context, arg1 string, arg2 *github.PackageListOptions) ([]*github.Package, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPackages", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.Package)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPackages indicates an expected call of ListPackages.
func (mr *MockUsersServiceMockRecorder) ListPackages(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackages", reflect.TypeOf((*MockUsersService)(nil).ListPackages), arg0, arg1, arg2)
}

// ListProjects mocks base method.
func (m *MockUsersService) ListProjects(arg0 context.Context, arg1 string, arg2 *github.ProjectListOptions) ([]*github.Project, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.Project)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockUsersServiceMockRecorder) ListProjects(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockUsersService)(nil).ListProjects), arg0, arg1, arg2)
}

// ListSSHSigningKeys mocks base method.
func (m *MockUsersService) ListSSHSigningKeys(arg0 context.Context, arg1 string, arg2 *github.ListOptions) ([]*github.SSHSigningKey, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSSHSigningKeys", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.SSHSigningKey)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSSHSigningKeys indicates an expected call of ListSSHSigningKeys.
func (mr *MockUsersServiceMockRecorder) ListSSHSigningKeys(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSSHSigningKeys", reflect.TypeOf((*MockUsersService)(nil).ListSSHSigningKeys), arg0, arg1, arg2)
}

// PackageDeleteVersion mocks base method.
func (m *MockUsersService) PackageDeleteVersion(arg0 context.Context, arg1, arg2, arg3 string, arg4 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PackageDeleteVersion", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PackageDeleteVersion indicates an expected call of PackageDeleteVersion.
func (mr *MockUsersServiceMockRecorder) PackageDeleteVersion(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PackageDeleteVersion", reflect.TypeOf((*MockUsersService)(nil).PackageDeleteVersion), arg0, arg1, arg2, arg3, arg4)
}

// PackageGetAllVersions mocks base method.
func (m *MockUsersService) PackageGetAllVersions(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.PackageListOptions) ([]*github.PackageVersion, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PackageGetAllVersions", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.PackageVersion)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PackageGetAllVersions indicates an expected call of PackageGetAllVersions.
func (mr *MockUsersServiceMockRecorder) PackageGetAllVersions(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PackageGetAllVersions", reflect.TypeOf((*MockUsersService)(nil).PackageGetAllVersions), arg0, arg1, arg2, arg3, arg4)
}

// PackageGetVersion mocks base method.
func (m *MockUsersService) PackageGetVersion(arg0 context.Context, arg1, arg2, arg3 string, arg4 int64) (*github.PackageVersion, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PackageGetVersion", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.PackageVersion)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PackageGetVersion indicates an expected call of PackageGetVersion.
func (mr *MockUsersServiceMockRecorder) PackageGetVersion(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PackageGetVersion", reflect.TypeOf((*MockUsersService)(nil).PackageGetVersion), arg0, arg1, arg2, arg3, arg4)
}

// PackageRestoreVersion mocks base method.
func (m *MockUsersService) PackageRestoreVersion(arg0 context.Context, arg1, arg2, arg3 string, arg4 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PackageRestoreVersion", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PackageRestoreVersion indicates an expected call of PackageRestoreVersion.
func (mr *MockUsersServiceMockRecorder) PackageRestoreVersion(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PackageRestoreVersion", reflect.TypeOf((*MockUsersService)(nil).PackageRestoreVersion), arg0, arg1, arg2, arg3, arg4)
}

// PromoteSiteAdmin mocks base method.
func (m *MockUsersService) PromoteSiteAdmin(arg0 context.Context, arg1 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromoteSiteAdmin", arg0, arg1)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromoteSiteAdmin indicates an expected call of PromoteSiteAdmin.
func (mr *MockUsersServiceMockRecorder) PromoteSiteAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromoteSiteAdmin", reflect.TypeOf((*MockUsersService)(nil).PromoteSiteAdmin), arg0, arg1)
}

// RestorePackage mocks base method.
func (m *MockUsersService) RestorePackage(arg0 context.Context, arg1, arg2, arg3 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestorePackage", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestorePackage indicates an expected call of RestorePackage.
func (mr *MockUsersServiceMockRecorder) RestorePackage(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestorePackage", reflect.TypeOf((*MockUsersService)(nil).RestorePackage), arg0, arg1, arg2, arg3)
}

// Suspend mocks base method.
func (m *MockUsersService) Suspend(arg0 context.Context, arg1 string, arg2 *github.UserSuspendOptions) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Suspend", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Suspend indicates an expected call of Suspend.
func (mr *MockUsersServiceMockRecorder) Suspend(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Suspend", reflect.TypeOf((*MockUsersService)(nil).Suspend), arg0, arg1, arg2)
}

// UnblockUser mocks base method.
func (m *MockUsersService) UnblockUser(arg0 context.Context, arg1 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnblockUser", arg0, arg1)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnblockUser indicates an expected call of UnblockUser.
func (mr *MockUsersServiceMockRecorder) UnblockUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnblockUser", reflect.TypeOf((*MockUsersService)(nil).UnblockUser), arg0, arg1)
}

// Unfollow mocks base method.
func (m *MockUsersService) Unfollow(arg0 context.Context, arg1 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unfollow", arg0, arg1)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unfollow indicates an expected call of Unfollow.
func (mr *MockUsersServiceMockRecorder) Unfollow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unfollow", reflect.TypeOf((*MockUsersService)(nil).Unfollow), arg0, arg1)
}

// Unsuspend mocks base method.
func (m *MockUsersService) Unsuspend(arg0 context.Context, arg1 string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsuspend", arg0, arg1)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unsuspend indicates an expected call of Unsuspend.
func (mr *MockUsersServiceMockRecorder) Unsuspend(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsuspend", reflect.TypeOf((*MockUsersService)(nil).Unsuspend), arg0, arg1)
}
