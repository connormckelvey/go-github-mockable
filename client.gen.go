// Code generated by github.com/connormckelvey/go-github-mockable/cmd/generate. DO NOT EDIT.

package gogithubmockable

import (
	"context"
	github "github.com/google/go-github/v48/github"
	"io"
	"net/http"
	"net/url"
	"os"
	"time"
)

type Client struct {
	client *github.Client
}

func NewClient(client *github.Client) *Client {
	c := new(Client)
	c.client = client
	return c
}

func (c *Client) GetBaseURL() *url.URL {
	return c.client.BaseURL
}

func (c *Client) SetBaseURL(baseurl *url.URL) {
	c.client.BaseURL = baseurl
}

func (c *Client) GetUploadURL() *url.URL {
	return c.client.UploadURL
}

func (c *Client) SetUploadURL(uploadurl *url.URL) {
	c.client.UploadURL = uploadurl
}

func (c *Client) GetUserAgent() string {
	return c.client.UserAgent
}

func (c *Client) SetUserAgent(useragent string) {
	c.client.UserAgent = useragent
}

func (c *Client) GetActions() ActionsService {
	return c.client.Actions
}

func (c *Client) GetActivity() ActivityService {
	return c.client.Activity
}

func (c *Client) GetAdmin() AdminService {
	return c.client.Admin
}

func (c *Client) GetApps() AppsService {
	return c.client.Apps
}

func (c *Client) GetAuthorizations() AuthorizationsService {
	return c.client.Authorizations
}

func (c *Client) GetBilling() BillingService {
	return c.client.Billing
}

func (c *Client) GetChecks() ChecksService {
	return c.client.Checks
}

func (c *Client) GetCodeScanning() CodeScanningService {
	return c.client.CodeScanning
}

func (c *Client) GetDependabot() DependabotService {
	return c.client.Dependabot
}

func (c *Client) GetEnterprise() EnterpriseService {
	return c.client.Enterprise
}

func (c *Client) GetGists() GistsService {
	return c.client.Gists
}

func (c *Client) GetGit() GitService {
	return c.client.Git
}

func (c *Client) GetGitignores() GitignoresService {
	return c.client.Gitignores
}

func (c *Client) GetInteractions() InteractionsService {
	return c.client.Interactions
}

func (c *Client) GetIssueImport() IssueImportService {
	return c.client.IssueImport
}

func (c *Client) GetIssues() IssuesService {
	return c.client.Issues
}

func (c *Client) GetLicenses() LicensesService {
	return c.client.Licenses
}

func (c *Client) GetMarketplace() MarketplaceService {
	return c.client.Marketplace
}

func (c *Client) GetMigrations() MigrationsService {
	return c.client.Migrations
}

func (c *Client) GetOrganizations() OrganizationsService {
	return c.client.Organizations
}

func (c *Client) GetProjects() ProjectsService {
	return c.client.Projects
}

func (c *Client) GetPullRequests() PullRequestsService {
	return c.client.PullRequests
}

func (c *Client) GetReactions() ReactionsService {
	return c.client.Reactions
}

func (c *Client) GetRepositories() RepositoriesService {
	return c.client.Repositories
}

func (c *Client) GetSCIM() SCIMService {
	return c.client.SCIM
}

func (c *Client) GetSearch() SearchService {
	return c.client.Search
}

func (c *Client) GetSecretScanning() SecretScanningService {
	return c.client.SecretScanning
}

func (c *Client) GetTeams() TeamsService {
	return c.client.Teams
}

func (c *Client) GetUsers() UsersService {
	return c.client.Users
}

type ClientAPI interface {
	GetBaseURL() *url.URL
	SetBaseURL(*url.URL)
	GetUploadURL() *url.URL
	SetUploadURL(*url.URL)
	GetUserAgent() string
	SetUserAgent(string)
	GetActions() ActionsService
	GetActivity() ActivityService
	GetAdmin() AdminService
	GetApps() AppsService
	GetAuthorizations() AuthorizationsService
	GetBilling() BillingService
	GetChecks() ChecksService
	GetCodeScanning() CodeScanningService
	GetDependabot() DependabotService
	GetEnterprise() EnterpriseService
	GetGists() GistsService
	GetGit() GitService
	GetGitignores() GitignoresService
	GetInteractions() InteractionsService
	GetIssueImport() IssueImportService
	GetIssues() IssuesService
	GetLicenses() LicensesService
	GetMarketplace() MarketplaceService
	GetMigrations() MigrationsService
	GetOrganizations() OrganizationsService
	GetProjects() ProjectsService
	GetPullRequests() PullRequestsService
	GetReactions() ReactionsService
	GetRepositories() RepositoriesService
	GetSCIM() SCIMService
	GetSearch() SearchService
	GetSecretScanning() SecretScanningService
	GetTeams() TeamsService
	GetUsers() UsersService
}

type ActionsService interface {
	AddEnabledReposInOrg(context.Context, string, int64) (*github.Response, error)
	AddRepositoryAccessRunnerGroup(context.Context, string, int64, int64) (*github.Response, error)
	AddRunnerGroupRunners(context.Context, string, int64, int64) (*github.Response, error)
	AddSelectedRepoToOrgSecret(context.Context, string, string, *github.Repository) (*github.Response, error)
	CancelWorkflowRunByID(context.Context, string, string, int64) (*github.Response, error)
	CreateOrUpdateEnvSecret(context.Context, int, string, *github.EncryptedSecret) (*github.Response, error)
	CreateOrUpdateOrgSecret(context.Context, string, *github.EncryptedSecret) (*github.Response, error)
	CreateOrUpdateRepoSecret(context.Context, string, string, *github.EncryptedSecret) (*github.Response, error)
	CreateOrganizationRegistrationToken(context.Context, string) (*github.RegistrationToken, *github.Response, error)
	CreateOrganizationRemoveToken(context.Context, string) (*github.RemoveToken, *github.Response, error)
	CreateOrganizationRunnerGroup(context.Context, string, github.CreateRunnerGroupRequest) (*github.RunnerGroup, *github.Response, error)
	CreateRegistrationToken(context.Context, string, string) (*github.RegistrationToken, *github.Response, error)
	CreateRemoveToken(context.Context, string, string) (*github.RemoveToken, *github.Response, error)
	CreateWorkflowDispatchEventByFileName(context.Context, string, string, string, github.CreateWorkflowDispatchEventRequest) (*github.Response, error)
	CreateWorkflowDispatchEventByID(context.Context, string, string, int64, github.CreateWorkflowDispatchEventRequest) (*github.Response, error)
	DeleteArtifact(context.Context, string, string, int64) (*github.Response, error)
	DeleteEnvSecret(context.Context, int, string, string) (*github.Response, error)
	DeleteOrgSecret(context.Context, string, string) (*github.Response, error)
	DeleteOrganizationRunnerGroup(context.Context, string, int64) (*github.Response, error)
	DeleteRepoSecret(context.Context, string, string, string) (*github.Response, error)
	DeleteWorkflowRun(context.Context, string, string, int64) (*github.Response, error)
	DeleteWorkflowRunLogs(context.Context, string, string, int64) (*github.Response, error)
	DisableWorkflowByFileName(context.Context, string, string, string) (*github.Response, error)
	DisableWorkflowByID(context.Context, string, string, int64) (*github.Response, error)
	DownloadArtifact(context.Context, string, string, int64, bool) (*url.URL, *github.Response, error)
	EnableWorkflowByFileName(context.Context, string, string, string) (*github.Response, error)
	EnableWorkflowByID(context.Context, string, string, int64) (*github.Response, error)
	GetArtifact(context.Context, string, string, int64) (*github.Artifact, *github.Response, error)
	GetEnvPublicKey(context.Context, int, string) (*github.PublicKey, *github.Response, error)
	GetEnvSecret(context.Context, int, string, string) (*github.Secret, *github.Response, error)
	GetOrgPublicKey(context.Context, string) (*github.PublicKey, *github.Response, error)
	GetOrgSecret(context.Context, string, string) (*github.Secret, *github.Response, error)
	GetOrganizationRunner(context.Context, string, int64) (*github.Runner, *github.Response, error)
	GetOrganizationRunnerGroup(context.Context, string, int64) (*github.RunnerGroup, *github.Response, error)
	GetRepoPublicKey(context.Context, string, string) (*github.PublicKey, *github.Response, error)
	GetRepoSecret(context.Context, string, string, string) (*github.Secret, *github.Response, error)
	GetRunner(context.Context, string, string, int64) (*github.Runner, *github.Response, error)
	GetWorkflowByFileName(context.Context, string, string, string) (*github.Workflow, *github.Response, error)
	GetWorkflowByID(context.Context, string, string, int64) (*github.Workflow, *github.Response, error)
	GetWorkflowJobByID(context.Context, string, string, int64) (*github.WorkflowJob, *github.Response, error)
	GetWorkflowJobLogs(context.Context, string, string, int64, bool) (*url.URL, *github.Response, error)
	GetWorkflowRunAttempt(context.Context, string, string, int64, int, *github.WorkflowRunAttemptOptions) (*github.WorkflowRun, *github.Response, error)
	GetWorkflowRunByID(context.Context, string, string, int64) (*github.WorkflowRun, *github.Response, error)
	GetWorkflowRunLogs(context.Context, string, string, int64, bool) (*url.URL, *github.Response, error)
	GetWorkflowRunUsageByID(context.Context, string, string, int64) (*github.WorkflowRunUsage, *github.Response, error)
	GetWorkflowUsageByFileName(context.Context, string, string, string) (*github.WorkflowUsage, *github.Response, error)
	GetWorkflowUsageByID(context.Context, string, string, int64) (*github.WorkflowUsage, *github.Response, error)
	ListArtifacts(context.Context, string, string, *github.ListOptions) (*github.ArtifactList, *github.Response, error)
	ListEnabledReposInOrg(context.Context, string, *github.ListOptions) (*github.ActionsEnabledOnOrgRepos, *github.Response, error)
	ListEnvSecrets(context.Context, int, string, *github.ListOptions) (*github.Secrets, *github.Response, error)
	ListOrgSecrets(context.Context, string, *github.ListOptions) (*github.Secrets, *github.Response, error)
	ListOrganizationRunnerApplicationDownloads(context.Context, string) ([]*github.RunnerApplicationDownload, *github.Response, error)
	ListOrganizationRunnerGroups(context.Context, string, *github.ListOrgRunnerGroupOptions) (*github.RunnerGroups, *github.Response, error)
	ListOrganizationRunners(context.Context, string, *github.ListOptions) (*github.Runners, *github.Response, error)
	ListRepoSecrets(context.Context, string, string, *github.ListOptions) (*github.Secrets, *github.Response, error)
	ListRepositoryAccessRunnerGroup(context.Context, string, int64, *github.ListOptions) (*github.ListRepositories, *github.Response, error)
	ListRepositoryWorkflowRuns(context.Context, string, string, *github.ListWorkflowRunsOptions) (*github.WorkflowRuns, *github.Response, error)
	ListRunnerApplicationDownloads(context.Context, string, string) ([]*github.RunnerApplicationDownload, *github.Response, error)
	ListRunnerGroupRunners(context.Context, string, int64, *github.ListOptions) (*github.Runners, *github.Response, error)
	ListRunners(context.Context, string, string, *github.ListOptions) (*github.Runners, *github.Response, error)
	ListSelectedReposForOrgSecret(context.Context, string, string, *github.ListOptions) (*github.SelectedReposList, *github.Response, error)
	ListWorkflowJobs(context.Context, string, string, int64, *github.ListWorkflowJobsOptions) (*github.Jobs, *github.Response, error)
	ListWorkflowRunArtifacts(context.Context, string, string, int64, *github.ListOptions) (*github.ArtifactList, *github.Response, error)
	ListWorkflowRunsByFileName(context.Context, string, string, string, *github.ListWorkflowRunsOptions) (*github.WorkflowRuns, *github.Response, error)
	ListWorkflowRunsByID(context.Context, string, string, int64, *github.ListWorkflowRunsOptions) (*github.WorkflowRuns, *github.Response, error)
	ListWorkflows(context.Context, string, string, *github.ListOptions) (*github.Workflows, *github.Response, error)
	PendingDeployments(context.Context, string, string, int64, *github.PendingDeploymentsRequest) ([]*github.Deployment, *github.Response, error)
	RemoveEnabledRepoInOrg(context.Context, string, int64) (*github.Response, error)
	RemoveOrganizationRunner(context.Context, string, int64) (*github.Response, error)
	RemoveRepositoryAccessRunnerGroup(context.Context, string, int64, int64) (*github.Response, error)
	RemoveRunner(context.Context, string, string, int64) (*github.Response, error)
	RemoveRunnerGroupRunners(context.Context, string, int64, int64) (*github.Response, error)
	RemoveSelectedRepoFromOrgSecret(context.Context, string, string, *github.Repository) (*github.Response, error)
	RerunFailedJobsByID(context.Context, string, string, int64) (*github.Response, error)
	RerunJobByID(context.Context, string, string, int64) (*github.Response, error)
	RerunWorkflowByID(context.Context, string, string, int64) (*github.Response, error)
	SetEnabledReposInOrg(context.Context, string, []int64) (*github.Response, error)
	SetRepositoryAccessRunnerGroup(context.Context, string, int64, github.SetRepoAccessRunnerGroupRequest) (*github.Response, error)
	SetRunnerGroupRunners(context.Context, string, int64, github.SetRunnerGroupRunnersRequest) (*github.Response, error)
	SetSelectedReposForOrgSecret(context.Context, string, string, github.SelectedRepoIDs) (*github.Response, error)
	UpdateOrganizationRunnerGroup(context.Context, string, int64, github.UpdateRunnerGroupRequest) (*github.RunnerGroup, *github.Response, error)
}

type ActivityService interface {
	DeleteRepositorySubscription(context.Context, string, string) (*github.Response, error)
	DeleteThreadSubscription(context.Context, string) (*github.Response, error)
	GetRepositorySubscription(context.Context, string, string) (*github.Subscription, *github.Response, error)
	GetThread(context.Context, string) (*github.Notification, *github.Response, error)
	GetThreadSubscription(context.Context, string) (*github.Subscription, *github.Response, error)
	IsStarred(context.Context, string, string) (bool, *github.Response, error)
	ListEvents(context.Context, *github.ListOptions) ([]*github.Event, *github.Response, error)
	ListEventsForOrganization(context.Context, string, *github.ListOptions) ([]*github.Event, *github.Response, error)
	ListEventsForRepoNetwork(context.Context, string, string, *github.ListOptions) ([]*github.Event, *github.Response, error)
	ListEventsPerformedByUser(context.Context, string, bool, *github.ListOptions) ([]*github.Event, *github.Response, error)
	ListEventsReceivedByUser(context.Context, string, bool, *github.ListOptions) ([]*github.Event, *github.Response, error)
	ListFeeds(context.Context) (*github.Feeds, *github.Response, error)
	ListIssueEventsForRepository(context.Context, string, string, *github.ListOptions) ([]*github.IssueEvent, *github.Response, error)
	ListNotifications(context.Context, *github.NotificationListOptions) ([]*github.Notification, *github.Response, error)
	ListRepositoryEvents(context.Context, string, string, *github.ListOptions) ([]*github.Event, *github.Response, error)
	ListRepositoryNotifications(context.Context, string, string, *github.NotificationListOptions) ([]*github.Notification, *github.Response, error)
	ListStargazers(context.Context, string, string, *github.ListOptions) ([]*github.Stargazer, *github.Response, error)
	ListStarred(context.Context, string, *github.ActivityListStarredOptions) ([]*github.StarredRepository, *github.Response, error)
	ListUserEventsForOrganization(context.Context, string, string, *github.ListOptions) ([]*github.Event, *github.Response, error)
	ListWatched(context.Context, string, *github.ListOptions) ([]*github.Repository, *github.Response, error)
	ListWatchers(context.Context, string, string, *github.ListOptions) ([]*github.User, *github.Response, error)
	MarkNotificationsRead(context.Context, time.Time) (*github.Response, error)
	MarkRepositoryNotificationsRead(context.Context, string, string, time.Time) (*github.Response, error)
	MarkThreadRead(context.Context, string) (*github.Response, error)
	SetRepositorySubscription(context.Context, string, string, *github.Subscription) (*github.Subscription, *github.Response, error)
	SetThreadSubscription(context.Context, string, *github.Subscription) (*github.Subscription, *github.Response, error)
	Star(context.Context, string, string) (*github.Response, error)
	Unstar(context.Context, string, string) (*github.Response, error)
}

type AdminService interface {
	CreateOrg(context.Context, *github.Organization, string) (*github.Organization, *github.Response, error)
	CreateUser(context.Context, string, string) (*github.User, *github.Response, error)
	CreateUserImpersonation(context.Context, string, *github.ImpersonateUserOptions) (*github.UserAuthorization, *github.Response, error)
	DeleteUser(context.Context, string) (*github.Response, error)
	DeleteUserImpersonation(context.Context, string) (*github.Response, error)
	GetAdminStats(context.Context) (*github.AdminStats, *github.Response, error)
	RenameOrg(context.Context, *github.Organization, string) (*github.RenameOrgResponse, *github.Response, error)
	RenameOrgByName(context.Context, string, string) (*github.RenameOrgResponse, *github.Response, error)
	UpdateTeamLDAPMapping(context.Context, int64, *github.TeamLDAPMapping) (*github.TeamLDAPMapping, *github.Response, error)
	UpdateUserLDAPMapping(context.Context, string, *github.UserLDAPMapping) (*github.UserLDAPMapping, *github.Response, error)
}

type AppsService interface {
	AddRepository(context.Context, int64, int64) (*github.Repository, *github.Response, error)
	CompleteAppManifest(context.Context, string) (*github.AppConfig, *github.Response, error)
	CreateAttachment(context.Context, int64, string, string) (*github.Attachment, *github.Response, error)
	CreateInstallationToken(context.Context, int64, *github.InstallationTokenOptions) (*github.InstallationToken, *github.Response, error)
	DeleteInstallation(context.Context, int64) (*github.Response, error)
	FindOrganizationInstallation(context.Context, string) (*github.Installation, *github.Response, error)
	FindRepositoryInstallation(context.Context, string, string) (*github.Installation, *github.Response, error)
	FindRepositoryInstallationByID(context.Context, int64) (*github.Installation, *github.Response, error)
	FindUserInstallation(context.Context, string) (*github.Installation, *github.Response, error)
	Get(context.Context, string) (*github.App, *github.Response, error)
	GetHookConfig(context.Context) (*github.HookConfig, *github.Response, error)
	GetHookDelivery(context.Context, int64) (*github.HookDelivery, *github.Response, error)
	GetInstallation(context.Context, int64) (*github.Installation, *github.Response, error)
	ListHookDeliveries(context.Context, *github.ListCursorOptions) ([]*github.HookDelivery, *github.Response, error)
	ListInstallations(context.Context, *github.ListOptions) ([]*github.Installation, *github.Response, error)
	ListRepos(context.Context, *github.ListOptions) (*github.ListRepositories, *github.Response, error)
	ListUserInstallations(context.Context, *github.ListOptions) ([]*github.Installation, *github.Response, error)
	ListUserRepos(context.Context, int64, *github.ListOptions) (*github.ListRepositories, *github.Response, error)
	RedeliverHookDelivery(context.Context, int64) (*github.HookDelivery, *github.Response, error)
	RemoveRepository(context.Context, int64, int64) (*github.Response, error)
	RevokeInstallationToken(context.Context) (*github.Response, error)
	SuspendInstallation(context.Context, int64) (*github.Response, error)
	UnsuspendInstallation(context.Context, int64) (*github.Response, error)
	UpdateHookConfig(context.Context, *github.HookConfig) (*github.HookConfig, *github.Response, error)
}

type AuthorizationsService interface {
	Check(context.Context, string, string) (*github.Authorization, *github.Response, error)
	CreateImpersonation(context.Context, string, *github.AuthorizationRequest) (*github.Authorization, *github.Response, error)
	DeleteGrant(context.Context, string, string) (*github.Response, error)
	DeleteImpersonation(context.Context, string) (*github.Response, error)
	Reset(context.Context, string, string) (*github.Authorization, *github.Response, error)
	Revoke(context.Context, string, string) (*github.Response, error)
}

type BillingService interface {
	GetActionsBillingOrg(context.Context, string) (*github.ActionBilling, *github.Response, error)
	GetActionsBillingUser(context.Context, string) (*github.ActionBilling, *github.Response, error)
	GetAdvancedSecurityActiveCommittersOrg(context.Context, string) (*github.ActiveCommitters, *github.Response, error)
	GetPackagesBillingOrg(context.Context, string) (*github.PackageBilling, *github.Response, error)
	GetPackagesBillingUser(context.Context, string) (*github.PackageBilling, *github.Response, error)
	GetStorageBillingOrg(context.Context, string) (*github.StorageBilling, *github.Response, error)
	GetStorageBillingUser(context.Context, string) (*github.StorageBilling, *github.Response, error)
}

type ChecksService interface {
	CreateCheckRun(context.Context, string, string, github.CreateCheckRunOptions) (*github.CheckRun, *github.Response, error)
	CreateCheckSuite(context.Context, string, string, github.CreateCheckSuiteOptions) (*github.CheckSuite, *github.Response, error)
	GetCheckRun(context.Context, string, string, int64) (*github.CheckRun, *github.Response, error)
	GetCheckSuite(context.Context, string, string, int64) (*github.CheckSuite, *github.Response, error)
	ListCheckRunAnnotations(context.Context, string, string, int64, *github.ListOptions) ([]*github.CheckRunAnnotation, *github.Response, error)
	ListCheckRunsCheckSuite(context.Context, string, string, int64, *github.ListCheckRunsOptions) (*github.ListCheckRunsResults, *github.Response, error)
	ListCheckRunsForRef(context.Context, string, string, string, *github.ListCheckRunsOptions) (*github.ListCheckRunsResults, *github.Response, error)
	ListCheckSuitesForRef(context.Context, string, string, string, *github.ListCheckSuiteOptions) (*github.ListCheckSuiteResults, *github.Response, error)
	ReRequestCheckRun(context.Context, string, string, int64) (*github.Response, error)
	ReRequestCheckSuite(context.Context, string, string, int64) (*github.Response, error)
	SetCheckSuitePreferences(context.Context, string, string, github.CheckSuitePreferenceOptions) (*github.CheckSuitePreferenceResults, *github.Response, error)
	UpdateCheckRun(context.Context, string, string, int64, github.UpdateCheckRunOptions) (*github.CheckRun, *github.Response, error)
}

type CodeScanningService interface {
	GetAlert(context.Context, string, string, int64) (*github.Alert, *github.Response, error)
	GetAnalysis(context.Context, string, string, int64) (*github.ScanningAnalysis, *github.Response, error)
	ListAlertsForOrg(context.Context, string, *github.AlertListOptions) ([]*github.Alert, *github.Response, error)
	ListAlertsForRepo(context.Context, string, string, *github.AlertListOptions) ([]*github.Alert, *github.Response, error)
	ListAnalysesForRepo(context.Context, string, string, *github.AnalysesListOptions) ([]*github.ScanningAnalysis, *github.Response, error)
	UploadSarif(context.Context, string, string, *github.SarifAnalysis) (*github.SarifID, *github.Response, error)
}

type DependabotService interface {
	AddSelectedRepoToOrgSecret(context.Context, string, string, *github.Repository) (*github.Response, error)
	CreateOrUpdateOrgSecret(context.Context, string, *github.DependabotEncryptedSecret) (*github.Response, error)
	CreateOrUpdateRepoSecret(context.Context, string, string, *github.DependabotEncryptedSecret) (*github.Response, error)
	DeleteOrgSecret(context.Context, string, string) (*github.Response, error)
	DeleteRepoSecret(context.Context, string, string, string) (*github.Response, error)
	GetOrgPublicKey(context.Context, string) (*github.PublicKey, *github.Response, error)
	GetOrgSecret(context.Context, string, string) (*github.Secret, *github.Response, error)
	GetRepoPublicKey(context.Context, string, string) (*github.PublicKey, *github.Response, error)
	GetRepoSecret(context.Context, string, string, string) (*github.Secret, *github.Response, error)
	ListOrgSecrets(context.Context, string, *github.ListOptions) (*github.Secrets, *github.Response, error)
	ListRepoSecrets(context.Context, string, string, *github.ListOptions) (*github.Secrets, *github.Response, error)
	ListSelectedReposForOrgSecret(context.Context, string, string, *github.ListOptions) (*github.SelectedReposList, *github.Response, error)
	RemoveSelectedRepoFromOrgSecret(context.Context, string, string, *github.Repository) (*github.Response, error)
	SetSelectedReposForOrgSecret(context.Context, string, string, github.DependabotSecretsSelectedRepoIDs) (*github.Response, error)
}

type EnterpriseService interface {
	CreateRegistrationToken(context.Context, string) (*github.RegistrationToken, *github.Response, error)
	GetAuditLog(context.Context, string, *github.GetAuditLogOptions) ([]*github.AuditEntry, *github.Response, error)
	ListRunnerApplicationDownloads(context.Context, string) ([]*github.RunnerApplicationDownload, *github.Response, error)
	ListRunners(context.Context, string, *github.ListOptions) (*github.Runners, *github.Response, error)
	RemoveRunner(context.Context, string, int64) (*github.Response, error)
}

type GistsService interface {
	Create(context.Context, *github.Gist) (*github.Gist, *github.Response, error)
	CreateComment(context.Context, string, *github.GistComment) (*github.GistComment, *github.Response, error)
	Delete(context.Context, string) (*github.Response, error)
	DeleteComment(context.Context, string, int64) (*github.Response, error)
	Edit(context.Context, string, *github.Gist) (*github.Gist, *github.Response, error)
	EditComment(context.Context, string, int64, *github.GistComment) (*github.GistComment, *github.Response, error)
	Fork(context.Context, string) (*github.Gist, *github.Response, error)
	Get(context.Context, string) (*github.Gist, *github.Response, error)
	GetComment(context.Context, string, int64) (*github.GistComment, *github.Response, error)
	GetRevision(context.Context, string, string) (*github.Gist, *github.Response, error)
	IsStarred(context.Context, string) (bool, *github.Response, error)
	List(context.Context, string, *github.GistListOptions) ([]*github.Gist, *github.Response, error)
	ListAll(context.Context, *github.GistListOptions) ([]*github.Gist, *github.Response, error)
	ListComments(context.Context, string, *github.ListOptions) ([]*github.GistComment, *github.Response, error)
	ListCommits(context.Context, string, *github.ListOptions) ([]*github.GistCommit, *github.Response, error)
	ListForks(context.Context, string, *github.ListOptions) ([]*github.GistFork, *github.Response, error)
	ListStarred(context.Context, *github.GistListOptions) ([]*github.Gist, *github.Response, error)
	Star(context.Context, string) (*github.Response, error)
	Unstar(context.Context, string) (*github.Response, error)
}

type GitService interface {
	CreateBlob(context.Context, string, string, *github.Blob) (*github.Blob, *github.Response, error)
	CreateCommit(context.Context, string, string, *github.Commit) (*github.Commit, *github.Response, error)
	CreateRef(context.Context, string, string, *github.Reference) (*github.Reference, *github.Response, error)
	CreateTag(context.Context, string, string, *github.Tag) (*github.Tag, *github.Response, error)
	CreateTree(context.Context, string, string, string, []*github.TreeEntry) (*github.Tree, *github.Response, error)
	DeleteRef(context.Context, string, string, string) (*github.Response, error)
	GetBlob(context.Context, string, string, string) (*github.Blob, *github.Response, error)
	GetBlobRaw(context.Context, string, string, string) ([]uint8, *github.Response, error)
	GetCommit(context.Context, string, string, string) (*github.Commit, *github.Response, error)
	GetRef(context.Context, string, string, string) (*github.Reference, *github.Response, error)
	GetTag(context.Context, string, string, string) (*github.Tag, *github.Response, error)
	GetTree(context.Context, string, string, string, bool) (*github.Tree, *github.Response, error)
	ListMatchingRefs(context.Context, string, string, *github.ReferenceListOptions) ([]*github.Reference, *github.Response, error)
	UpdateRef(context.Context, string, string, *github.Reference, bool) (*github.Reference, *github.Response, error)
}

type GitignoresService interface {
	Get(context.Context, string) (*github.Gitignore, *github.Response, error)
	List(context.Context) ([]string, *github.Response, error)
}

type InteractionsService interface {
	GetRestrictionsForOrg(context.Context, string) (*github.InteractionRestriction, *github.Response, error)
	GetRestrictionsForRepo(context.Context, string, string) (*github.InteractionRestriction, *github.Response, error)
	RemoveRestrictionsFromOrg(context.Context, string) (*github.Response, error)
	RemoveRestrictionsFromRepo(context.Context, string, string) (*github.Response, error)
	UpdateRestrictionsForOrg(context.Context, string, string) (*github.InteractionRestriction, *github.Response, error)
	UpdateRestrictionsForRepo(context.Context, string, string, string) (*github.InteractionRestriction, *github.Response, error)
}

type IssueImportService interface {
	CheckStatus(context.Context, string, string, int64) (*github.IssueImportResponse, *github.Response, error)
	CheckStatusSince(context.Context, string, string, time.Time) ([]*github.IssueImportResponse, *github.Response, error)
	Create(context.Context, string, string, *github.IssueImportRequest) (*github.IssueImportResponse, *github.Response, error)
}

type IssuesService interface {
	AddAssignees(context.Context, string, string, int, []string) (*github.Issue, *github.Response, error)
	AddLabelsToIssue(context.Context, string, string, int, []string) ([]*github.Label, *github.Response, error)
	Create(context.Context, string, string, *github.IssueRequest) (*github.Issue, *github.Response, error)
	CreateComment(context.Context, string, string, int, *github.IssueComment) (*github.IssueComment, *github.Response, error)
	CreateLabel(context.Context, string, string, *github.Label) (*github.Label, *github.Response, error)
	CreateMilestone(context.Context, string, string, *github.Milestone) (*github.Milestone, *github.Response, error)
	DeleteComment(context.Context, string, string, int64) (*github.Response, error)
	DeleteLabel(context.Context, string, string, string) (*github.Response, error)
	DeleteMilestone(context.Context, string, string, int) (*github.Response, error)
	Edit(context.Context, string, string, int, *github.IssueRequest) (*github.Issue, *github.Response, error)
	EditComment(context.Context, string, string, int64, *github.IssueComment) (*github.IssueComment, *github.Response, error)
	EditLabel(context.Context, string, string, string, *github.Label) (*github.Label, *github.Response, error)
	EditMilestone(context.Context, string, string, int, *github.Milestone) (*github.Milestone, *github.Response, error)
	Get(context.Context, string, string, int) (*github.Issue, *github.Response, error)
	GetComment(context.Context, string, string, int64) (*github.IssueComment, *github.Response, error)
	GetEvent(context.Context, string, string, int64) (*github.IssueEvent, *github.Response, error)
	GetLabel(context.Context, string, string, string) (*github.Label, *github.Response, error)
	GetMilestone(context.Context, string, string, int) (*github.Milestone, *github.Response, error)
	IsAssignee(context.Context, string, string, string) (bool, *github.Response, error)
	List(context.Context, bool, *github.IssueListOptions) ([]*github.Issue, *github.Response, error)
	ListAssignees(context.Context, string, string, *github.ListOptions) ([]*github.User, *github.Response, error)
	ListByOrg(context.Context, string, *github.IssueListOptions) ([]*github.Issue, *github.Response, error)
	ListByRepo(context.Context, string, string, *github.IssueListByRepoOptions) ([]*github.Issue, *github.Response, error)
	ListComments(context.Context, string, string, int, *github.IssueListCommentsOptions) ([]*github.IssueComment, *github.Response, error)
	ListIssueEvents(context.Context, string, string, int, *github.ListOptions) ([]*github.IssueEvent, *github.Response, error)
	ListIssueTimeline(context.Context, string, string, int, *github.ListOptions) ([]*github.Timeline, *github.Response, error)
	ListLabels(context.Context, string, string, *github.ListOptions) ([]*github.Label, *github.Response, error)
	ListLabelsByIssue(context.Context, string, string, int, *github.ListOptions) ([]*github.Label, *github.Response, error)
	ListLabelsForMilestone(context.Context, string, string, int, *github.ListOptions) ([]*github.Label, *github.Response, error)
	ListMilestones(context.Context, string, string, *github.MilestoneListOptions) ([]*github.Milestone, *github.Response, error)
	ListRepositoryEvents(context.Context, string, string, *github.ListOptions) ([]*github.IssueEvent, *github.Response, error)
	Lock(context.Context, string, string, int, *github.LockIssueOptions) (*github.Response, error)
	RemoveAssignees(context.Context, string, string, int, []string) (*github.Issue, *github.Response, error)
	RemoveLabelForIssue(context.Context, string, string, int, string) (*github.Response, error)
	RemoveLabelsForIssue(context.Context, string, string, int) (*github.Response, error)
	RemoveMilestone(context.Context, string, string, int) (*github.Issue, *github.Response, error)
	ReplaceLabelsForIssue(context.Context, string, string, int, []string) ([]*github.Label, *github.Response, error)
	Unlock(context.Context, string, string, int) (*github.Response, error)
}

type LicensesService interface {
	Get(context.Context, string) (*github.License, *github.Response, error)
	List(context.Context) ([]*github.License, *github.Response, error)
}

type MarketplaceService interface {
	GetPlanAccountForAccount(context.Context, int64) (*github.MarketplacePlanAccount, *github.Response, error)
	ListMarketplacePurchasesForUser(context.Context, *github.ListOptions) ([]*github.MarketplacePurchase, *github.Response, error)
	ListPlanAccountsForPlan(context.Context, int64, *github.ListOptions) ([]*github.MarketplacePlanAccount, *github.Response, error)
	ListPlans(context.Context, *github.ListOptions) ([]*github.MarketplacePlan, *github.Response, error)
}

type MigrationsService interface {
	CancelImport(context.Context, string, string) (*github.Response, error)
	CommitAuthors(context.Context, string, string) ([]*github.SourceImportAuthor, *github.Response, error)
	DeleteMigration(context.Context, string, int64) (*github.Response, error)
	DeleteUserMigration(context.Context, int64) (*github.Response, error)
	ImportProgress(context.Context, string, string) (*github.Import, *github.Response, error)
	LargeFiles(context.Context, string, string) ([]*github.LargeFile, *github.Response, error)
	ListMigrations(context.Context, string, *github.ListOptions) ([]*github.Migration, *github.Response, error)
	ListUserMigrations(context.Context, *github.ListOptions) ([]*github.UserMigration, *github.Response, error)
	MapCommitAuthor(context.Context, string, string, int64, *github.SourceImportAuthor) (*github.SourceImportAuthor, *github.Response, error)
	MigrationArchiveURL(context.Context, string, int64) (string, error)
	MigrationStatus(context.Context, string, int64) (*github.Migration, *github.Response, error)
	SetLFSPreference(context.Context, string, string, *github.Import) (*github.Import, *github.Response, error)
	StartImport(context.Context, string, string, *github.Import) (*github.Import, *github.Response, error)
	StartMigration(context.Context, string, []string, *github.MigrationOptions) (*github.Migration, *github.Response, error)
	StartUserMigration(context.Context, []string, *github.UserMigrationOptions) (*github.UserMigration, *github.Response, error)
	UnlockRepo(context.Context, string, int64, string) (*github.Response, error)
	UnlockUserRepo(context.Context, int64, string) (*github.Response, error)
	UpdateImport(context.Context, string, string, *github.Import) (*github.Import, *github.Response, error)
	UserMigrationArchiveURL(context.Context, int64) (string, error)
	UserMigrationStatus(context.Context, int64) (*github.UserMigration, *github.Response, error)
}

type OrganizationsService interface {
	BlockUser(context.Context, string, string) (*github.Response, error)
	ConcealMembership(context.Context, string, string) (*github.Response, error)
	ConvertMemberToOutsideCollaborator(context.Context, string, string) (*github.Response, error)
	CreateCustomRepoRole(context.Context, string, *github.CreateOrUpdateCustomRoleOptions) (*github.CustomRepoRoles, *github.Response, error)
	CreateHook(context.Context, string, *github.Hook) (*github.Hook, *github.Response, error)
	CreateOrgInvitation(context.Context, string, *github.CreateOrgInvitationOptions) (*github.Invitation, *github.Response, error)
	CreateProject(context.Context, string, *github.ProjectOptions) (*github.Project, *github.Response, error)
	DeleteCustomRepoRole(context.Context, string, string) (*github.Response, error)
	DeleteHook(context.Context, string, int64) (*github.Response, error)
	DeletePackage(context.Context, string, string, string) (*github.Response, error)
	Edit(context.Context, string, *github.Organization) (*github.Organization, *github.Response, error)
	EditActionsAllowed(context.Context, string, github.ActionsAllowed) (*github.ActionsAllowed, *github.Response, error)
	EditActionsPermissions(context.Context, string, github.ActionsPermissions) (*github.ActionsPermissions, *github.Response, error)
	EditHook(context.Context, string, int64, *github.Hook) (*github.Hook, *github.Response, error)
	EditOrgMembership(context.Context, string, string, *github.Membership) (*github.Membership, *github.Response, error)
	Get(context.Context, string) (*github.Organization, *github.Response, error)
	GetActionsAllowed(context.Context, string) (*github.ActionsAllowed, *github.Response, error)
	GetActionsPermissions(context.Context, string) (*github.ActionsPermissions, *github.Response, error)
	GetAuditLog(context.Context, string, *github.GetAuditLogOptions) ([]*github.AuditEntry, *github.Response, error)
	GetByID(context.Context, int64) (*github.Organization, *github.Response, error)
	GetHook(context.Context, string, int64) (*github.Hook, *github.Response, error)
	GetHookDelivery(context.Context, string, int64, int64) (*github.HookDelivery, *github.Response, error)
	GetOrgMembership(context.Context, string, string) (*github.Membership, *github.Response, error)
	GetPackage(context.Context, string, string, string) (*github.Package, *github.Response, error)
	IsBlocked(context.Context, string, string) (bool, *github.Response, error)
	IsMember(context.Context, string, string) (bool, *github.Response, error)
	IsPublicMember(context.Context, string, string) (bool, *github.Response, error)
	List(context.Context, string, *github.ListOptions) ([]*github.Organization, *github.Response, error)
	ListAll(context.Context, *github.OrganizationsListOptions) ([]*github.Organization, *github.Response, error)
	ListBlockedUsers(context.Context, string, *github.ListOptions) ([]*github.User, *github.Response, error)
	ListCustomRepoRoles(context.Context, string) (*github.OrganizationCustomRepoRoles, *github.Response, error)
	ListFailedOrgInvitations(context.Context, string, *github.ListOptions) ([]*github.Invitation, *github.Response, error)
	ListHookDeliveries(context.Context, string, int64, *github.ListCursorOptions) ([]*github.HookDelivery, *github.Response, error)
	ListHooks(context.Context, string, *github.ListOptions) ([]*github.Hook, *github.Response, error)
	ListInstallations(context.Context, string, *github.ListOptions) (*github.OrganizationInstallations, *github.Response, error)
	ListMembers(context.Context, string, *github.ListMembersOptions) ([]*github.User, *github.Response, error)
	ListOrgInvitationTeams(context.Context, string, string, *github.ListOptions) ([]*github.Team, *github.Response, error)
	ListOrgMemberships(context.Context, *github.ListOrgMembershipsOptions) ([]*github.Membership, *github.Response, error)
	ListOutsideCollaborators(context.Context, string, *github.ListOutsideCollaboratorsOptions) ([]*github.User, *github.Response, error)
	ListPackages(context.Context, string, *github.PackageListOptions) ([]*github.Package, *github.Response, error)
	ListPendingOrgInvitations(context.Context, string, *github.ListOptions) ([]*github.Invitation, *github.Response, error)
	ListProjects(context.Context, string, *github.ProjectListOptions) ([]*github.Project, *github.Response, error)
	PackageDeleteVersion(context.Context, string, string, string, int64) (*github.Response, error)
	PackageGetAllVersions(context.Context, string, string, string, *github.PackageListOptions) ([]*github.PackageVersion, *github.Response, error)
	PackageGetVersion(context.Context, string, string, string, int64) (*github.PackageVersion, *github.Response, error)
	PackageRestoreVersion(context.Context, string, string, string, int64) (*github.Response, error)
	PingHook(context.Context, string, int64) (*github.Response, error)
	PublicizeMembership(context.Context, string, string) (*github.Response, error)
	RedeliverHookDelivery(context.Context, string, int64, int64) (*github.HookDelivery, *github.Response, error)
	RemoveMember(context.Context, string, string) (*github.Response, error)
	RemoveOrgMembership(context.Context, string, string) (*github.Response, error)
	RemoveOutsideCollaborator(context.Context, string, string) (*github.Response, error)
	RestorePackage(context.Context, string, string, string) (*github.Response, error)
	UnblockUser(context.Context, string, string) (*github.Response, error)
	UpdateCustomRepoRole(context.Context, string, string, *github.CreateOrUpdateCustomRoleOptions) (*github.CustomRepoRoles, *github.Response, error)
}

type ProjectsService interface {
	AddProjectCollaborator(context.Context, int64, string, *github.ProjectCollaboratorOptions) (*github.Response, error)
	CreateProjectCard(context.Context, int64, *github.ProjectCardOptions) (*github.ProjectCard, *github.Response, error)
	CreateProjectColumn(context.Context, int64, *github.ProjectColumnOptions) (*github.ProjectColumn, *github.Response, error)
	DeleteProject(context.Context, int64) (*github.Response, error)
	DeleteProjectCard(context.Context, int64) (*github.Response, error)
	DeleteProjectColumn(context.Context, int64) (*github.Response, error)
	GetProject(context.Context, int64) (*github.Project, *github.Response, error)
	GetProjectCard(context.Context, int64) (*github.ProjectCard, *github.Response, error)
	GetProjectColumn(context.Context, int64) (*github.ProjectColumn, *github.Response, error)
	ListProjectCards(context.Context, int64, *github.ProjectCardListOptions) ([]*github.ProjectCard, *github.Response, error)
	ListProjectCollaborators(context.Context, int64, *github.ListCollaboratorOptions) ([]*github.User, *github.Response, error)
	ListProjectColumns(context.Context, int64, *github.ListOptions) ([]*github.ProjectColumn, *github.Response, error)
	MoveProjectCard(context.Context, int64, *github.ProjectCardMoveOptions) (*github.Response, error)
	MoveProjectColumn(context.Context, int64, *github.ProjectColumnMoveOptions) (*github.Response, error)
	RemoveProjectCollaborator(context.Context, int64, string) (*github.Response, error)
	ReviewProjectCollaboratorPermission(context.Context, int64, string) (*github.ProjectPermissionLevel, *github.Response, error)
	UpdateProject(context.Context, int64, *github.ProjectOptions) (*github.Project, *github.Response, error)
	UpdateProjectCard(context.Context, int64, *github.ProjectCardOptions) (*github.ProjectCard, *github.Response, error)
	UpdateProjectColumn(context.Context, int64, *github.ProjectColumnOptions) (*github.ProjectColumn, *github.Response, error)
}

type PullRequestsService interface {
	Create(context.Context, string, string, *github.NewPullRequest) (*github.PullRequest, *github.Response, error)
	CreateComment(context.Context, string, string, int, *github.PullRequestComment) (*github.PullRequestComment, *github.Response, error)
	CreateCommentInReplyTo(context.Context, string, string, int, string, int64) (*github.PullRequestComment, *github.Response, error)
	CreateReview(context.Context, string, string, int, *github.PullRequestReviewRequest) (*github.PullRequestReview, *github.Response, error)
	DeleteComment(context.Context, string, string, int64) (*github.Response, error)
	DeletePendingReview(context.Context, string, string, int, int64) (*github.PullRequestReview, *github.Response, error)
	DismissReview(context.Context, string, string, int, int64, *github.PullRequestReviewDismissalRequest) (*github.PullRequestReview, *github.Response, error)
	Edit(context.Context, string, string, int, *github.PullRequest) (*github.PullRequest, *github.Response, error)
	EditComment(context.Context, string, string, int64, *github.PullRequestComment) (*github.PullRequestComment, *github.Response, error)
	Get(context.Context, string, string, int) (*github.PullRequest, *github.Response, error)
	GetComment(context.Context, string, string, int64) (*github.PullRequestComment, *github.Response, error)
	GetRaw(context.Context, string, string, int, github.RawOptions) (string, *github.Response, error)
	GetReview(context.Context, string, string, int, int64) (*github.PullRequestReview, *github.Response, error)
	IsMerged(context.Context, string, string, int) (bool, *github.Response, error)
	List(context.Context, string, string, *github.PullRequestListOptions) ([]*github.PullRequest, *github.Response, error)
	ListComments(context.Context, string, string, int, *github.PullRequestListCommentsOptions) ([]*github.PullRequestComment, *github.Response, error)
	ListCommits(context.Context, string, string, int, *github.ListOptions) ([]*github.RepositoryCommit, *github.Response, error)
	ListFiles(context.Context, string, string, int, *github.ListOptions) ([]*github.CommitFile, *github.Response, error)
	ListPullRequestsWithCommit(context.Context, string, string, string, *github.PullRequestListOptions) ([]*github.PullRequest, *github.Response, error)
	ListReviewComments(context.Context, string, string, int, int64, *github.ListOptions) ([]*github.PullRequestComment, *github.Response, error)
	ListReviewers(context.Context, string, string, int, *github.ListOptions) (*github.Reviewers, *github.Response, error)
	ListReviews(context.Context, string, string, int, *github.ListOptions) ([]*github.PullRequestReview, *github.Response, error)
	Merge(context.Context, string, string, int, string, *github.PullRequestOptions) (*github.PullRequestMergeResult, *github.Response, error)
	RemoveReviewers(context.Context, string, string, int, github.ReviewersRequest) (*github.Response, error)
	RequestReviewers(context.Context, string, string, int, github.ReviewersRequest) (*github.PullRequest, *github.Response, error)
	SubmitReview(context.Context, string, string, int, int64, *github.PullRequestReviewRequest) (*github.PullRequestReview, *github.Response, error)
	UpdateBranch(context.Context, string, string, int, *github.PullRequestBranchUpdateOptions) (*github.PullRequestBranchUpdateResponse, *github.Response, error)
	UpdateReview(context.Context, string, string, int, int64, string) (*github.PullRequestReview, *github.Response, error)
}

type ReactionsService interface {
	CreateCommentReaction(context.Context, string, string, int64, string) (*github.Reaction, *github.Response, error)
	CreateIssueCommentReaction(context.Context, string, string, int64, string) (*github.Reaction, *github.Response, error)
	CreateIssueReaction(context.Context, string, string, int, string) (*github.Reaction, *github.Response, error)
	CreatePullRequestCommentReaction(context.Context, string, string, int64, string) (*github.Reaction, *github.Response, error)
	CreateReleaseReaction(context.Context, string, string, int64, string) (*github.Reaction, *github.Response, error)
	CreateTeamDiscussionCommentReaction(context.Context, int64, int, int, string) (*github.Reaction, *github.Response, error)
	CreateTeamDiscussionReaction(context.Context, int64, int, string) (*github.Reaction, *github.Response, error)
	DeleteCommentReaction(context.Context, string, string, int64, int64) (*github.Response, error)
	DeleteCommentReactionByID(context.Context, int64, int64, int64) (*github.Response, error)
	DeleteIssueCommentReaction(context.Context, string, string, int64, int64) (*github.Response, error)
	DeleteIssueCommentReactionByID(context.Context, int64, int64, int64) (*github.Response, error)
	DeleteIssueReaction(context.Context, string, string, int, int64) (*github.Response, error)
	DeleteIssueReactionByID(context.Context, int, int, int64) (*github.Response, error)
	DeletePullRequestCommentReaction(context.Context, string, string, int64, int64) (*github.Response, error)
	DeletePullRequestCommentReactionByID(context.Context, int64, int64, int64) (*github.Response, error)
	DeleteTeamDiscussionCommentReaction(context.Context, string, string, int, int, int64) (*github.Response, error)
	DeleteTeamDiscussionCommentReactionByOrgIDAndTeamID(context.Context, int, int, int, int, int64) (*github.Response, error)
	DeleteTeamDiscussionReaction(context.Context, string, string, int, int64) (*github.Response, error)
	DeleteTeamDiscussionReactionByOrgIDAndTeamID(context.Context, int, int, int, int64) (*github.Response, error)
	ListCommentReactions(context.Context, string, string, int64, *github.ListCommentReactionOptions) ([]*github.Reaction, *github.Response, error)
	ListIssueCommentReactions(context.Context, string, string, int64, *github.ListOptions) ([]*github.Reaction, *github.Response, error)
	ListIssueReactions(context.Context, string, string, int, *github.ListOptions) ([]*github.Reaction, *github.Response, error)
	ListPullRequestCommentReactions(context.Context, string, string, int64, *github.ListOptions) ([]*github.Reaction, *github.Response, error)
	ListTeamDiscussionCommentReactions(context.Context, int64, int, int, *github.ListOptions) ([]*github.Reaction, *github.Response, error)
	ListTeamDiscussionReactions(context.Context, int64, int, *github.ListOptions) ([]*github.Reaction, *github.Response, error)
}

type RepositoriesService interface {
	AddAdminEnforcement(context.Context, string, string, string) (*github.AdminEnforcement, *github.Response, error)
	AddAppRestrictions(context.Context, string, string, string, []string) ([]*github.App, *github.Response, error)
	AddAutolink(context.Context, string, string, *github.AutolinkOptions) (*github.Autolink, *github.Response, error)
	AddCollaborator(context.Context, string, string, string, *github.RepositoryAddCollaboratorOptions) (*github.CollaboratorInvitation, *github.Response, error)
	CompareCommits(context.Context, string, string, string, string, *github.ListOptions) (*github.CommitsComparison, *github.Response, error)
	CompareCommitsRaw(context.Context, string, string, string, string, github.RawOptions) (string, *github.Response, error)
	Create(context.Context, string, *github.Repository) (*github.Repository, *github.Response, error)
	CreateComment(context.Context, string, string, string, *github.RepositoryComment) (*github.RepositoryComment, *github.Response, error)
	CreateDeployment(context.Context, string, string, *github.DeploymentRequest) (*github.Deployment, *github.Response, error)
	CreateDeploymentStatus(context.Context, string, string, int64, *github.DeploymentStatusRequest) (*github.DeploymentStatus, *github.Response, error)
	CreateFile(context.Context, string, string, string, *github.RepositoryContentFileOptions) (*github.RepositoryContentResponse, *github.Response, error)
	CreateFork(context.Context, string, string, *github.RepositoryCreateForkOptions) (*github.Repository, *github.Response, error)
	CreateFromTemplate(context.Context, string, string, *github.TemplateRepoRequest) (*github.Repository, *github.Response, error)
	CreateHook(context.Context, string, string, *github.Hook) (*github.Hook, *github.Response, error)
	CreateKey(context.Context, string, string, *github.Key) (*github.Key, *github.Response, error)
	CreateProject(context.Context, string, string, *github.ProjectOptions) (*github.Project, *github.Response, error)
	CreateRelease(context.Context, string, string, *github.RepositoryRelease) (*github.RepositoryRelease, *github.Response, error)
	CreateStatus(context.Context, string, string, string, *github.RepoStatus) (*github.RepoStatus, *github.Response, error)
	CreateTagProtection(context.Context, string, string, string) (*github.TagProtection, *github.Response, error)
	CreateUpdateEnvironment(context.Context, string, string, string, *github.CreateUpdateEnvironment) (*github.Environment, *github.Response, error)
	Delete(context.Context, string, string) (*github.Response, error)
	DeleteAutolink(context.Context, string, string, int64) (*github.Response, error)
	DeleteComment(context.Context, string, string, int64) (*github.Response, error)
	DeleteDeployment(context.Context, string, string, int64) (*github.Response, error)
	DeleteEnvironment(context.Context, string, string, string) (*github.Response, error)
	DeleteFile(context.Context, string, string, string, *github.RepositoryContentFileOptions) (*github.RepositoryContentResponse, *github.Response, error)
	DeleteHook(context.Context, string, string, int64) (*github.Response, error)
	DeleteInvitation(context.Context, string, string, int64) (*github.Response, error)
	DeleteKey(context.Context, string, string, int64) (*github.Response, error)
	DeletePreReceiveHook(context.Context, string, string, int64) (*github.Response, error)
	DeleteRelease(context.Context, string, string, int64) (*github.Response, error)
	DeleteReleaseAsset(context.Context, string, string, int64) (*github.Response, error)
	DeleteTagProtection(context.Context, string, string, int64) (*github.Response, error)
	DisableAutomatedSecurityFixes(context.Context, string, string) (*github.Response, error)
	DisableDismissalRestrictions(context.Context, string, string, string) (*github.PullRequestReviewsEnforcement, *github.Response, error)
	DisableLFS(context.Context, string, string) (*github.Response, error)
	DisablePages(context.Context, string, string) (*github.Response, error)
	DisableVulnerabilityAlerts(context.Context, string, string) (*github.Response, error)
	Dispatch(context.Context, string, string, github.DispatchRequestOptions) (*github.Repository, *github.Response, error)
	DownloadContents(context.Context, string, string, string, *github.RepositoryContentGetOptions) (io.ReadCloser, *github.Response, error)
	DownloadContentsWithMeta(context.Context, string, string, string, *github.RepositoryContentGetOptions) (io.ReadCloser, *github.RepositoryContent, *github.Response, error)
	DownloadReleaseAsset(context.Context, string, string, int64, *http.Client) (io.ReadCloser, string, error)
	Edit(context.Context, string, string, *github.Repository) (*github.Repository, *github.Response, error)
	EditActionsAllowed(context.Context, string, string, github.ActionsAllowed) (*github.ActionsAllowed, *github.Response, error)
	EditActionsPermissions(context.Context, string, string, github.ActionsPermissionsRepository) (*github.ActionsPermissionsRepository, *github.Response, error)
	EditHook(context.Context, string, string, int64, *github.Hook) (*github.Hook, *github.Response, error)
	EditRelease(context.Context, string, string, int64, *github.RepositoryRelease) (*github.RepositoryRelease, *github.Response, error)
	EditReleaseAsset(context.Context, string, string, int64, *github.ReleaseAsset) (*github.ReleaseAsset, *github.Response, error)
	EnableAutomatedSecurityFixes(context.Context, string, string) (*github.Response, error)
	EnableLFS(context.Context, string, string) (*github.Response, error)
	EnablePages(context.Context, string, string, *github.Pages) (*github.Pages, *github.Response, error)
	EnableVulnerabilityAlerts(context.Context, string, string) (*github.Response, error)
	GenerateReleaseNotes(context.Context, string, string, *github.GenerateNotesOptions) (*github.RepositoryReleaseNotes, *github.Response, error)
	Get(context.Context, string, string) (*github.Repository, *github.Response, error)
	GetActionsAllowed(context.Context, string, string) (*github.ActionsAllowed, *github.Response, error)
	GetActionsPermissions(context.Context, string, string) (*github.ActionsPermissionsRepository, *github.Response, error)
	GetAdminEnforcement(context.Context, string, string, string) (*github.AdminEnforcement, *github.Response, error)
	GetArchiveLink(context.Context, string, string, github.ArchiveFormat, *github.RepositoryContentGetOptions, bool) (*url.URL, *github.Response, error)
	GetAutolink(context.Context, string, string, int64) (*github.Autolink, *github.Response, error)
	GetBranch(context.Context, string, string, string, bool) (*github.Branch, *github.Response, error)
	GetBranchProtection(context.Context, string, string, string) (*github.Protection, *github.Response, error)
	GetByID(context.Context, int64) (*github.Repository, *github.Response, error)
	GetCodeOfConduct(context.Context, string, string) (*github.CodeOfConduct, *github.Response, error)
	GetCodeownersErrors(context.Context, string, string) (*github.CodeownersErrors, *github.Response, error)
	GetCombinedStatus(context.Context, string, string, string, *github.ListOptions) (*github.CombinedStatus, *github.Response, error)
	GetComment(context.Context, string, string, int64) (*github.RepositoryComment, *github.Response, error)
	GetCommit(context.Context, string, string, string, *github.ListOptions) (*github.RepositoryCommit, *github.Response, error)
	GetCommitRaw(context.Context, string, string, string, github.RawOptions) (string, *github.Response, error)
	GetCommitSHA1(context.Context, string, string, string, string) (string, *github.Response, error)
	GetCommunityHealthMetrics(context.Context, string, string) (*github.CommunityHealthMetrics, *github.Response, error)
	GetContents(context.Context, string, string, string, *github.RepositoryContentGetOptions) (*github.RepositoryContent, []*github.RepositoryContent, *github.Response, error)
	GetDeployment(context.Context, string, string, int64) (*github.Deployment, *github.Response, error)
	GetDeploymentStatus(context.Context, string, string, int64, int64) (*github.DeploymentStatus, *github.Response, error)
	GetEnvironment(context.Context, string, string, string) (*github.Environment, *github.Response, error)
	GetHook(context.Context, string, string, int64) (*github.Hook, *github.Response, error)
	GetHookDelivery(context.Context, string, string, int64, int64) (*github.HookDelivery, *github.Response, error)
	GetKey(context.Context, string, string, int64) (*github.Key, *github.Response, error)
	GetLatestPagesBuild(context.Context, string, string) (*github.PagesBuild, *github.Response, error)
	GetLatestRelease(context.Context, string, string) (*github.RepositoryRelease, *github.Response, error)
	GetPageBuild(context.Context, string, string, int64) (*github.PagesBuild, *github.Response, error)
	GetPagesInfo(context.Context, string, string) (*github.Pages, *github.Response, error)
	GetPermissionLevel(context.Context, string, string, string) (*github.RepositoryPermissionLevel, *github.Response, error)
	GetPreReceiveHook(context.Context, string, string, int64) (*github.PreReceiveHook, *github.Response, error)
	GetPullRequestReviewEnforcement(context.Context, string, string, string) (*github.PullRequestReviewsEnforcement, *github.Response, error)
	GetReadme(context.Context, string, string, *github.RepositoryContentGetOptions) (*github.RepositoryContent, *github.Response, error)
	GetRelease(context.Context, string, string, int64) (*github.RepositoryRelease, *github.Response, error)
	GetReleaseAsset(context.Context, string, string, int64) (*github.ReleaseAsset, *github.Response, error)
	GetReleaseByTag(context.Context, string, string, string) (*github.RepositoryRelease, *github.Response, error)
	GetRequiredStatusChecks(context.Context, string, string, string) (*github.RequiredStatusChecks, *github.Response, error)
	GetSignaturesProtectedBranch(context.Context, string, string, string) (*github.SignaturesProtectedBranch, *github.Response, error)
	GetVulnerabilityAlerts(context.Context, string, string) (bool, *github.Response, error)
	IsCollaborator(context.Context, string, string, string) (bool, *github.Response, error)
	License(context.Context, string, string) (*github.RepositoryLicense, *github.Response, error)
	List(context.Context, string, *github.RepositoryListOptions) ([]*github.Repository, *github.Response, error)
	ListAll(context.Context, *github.RepositoryListAllOptions) ([]*github.Repository, *github.Response, error)
	ListAllTopics(context.Context, string, string) ([]string, *github.Response, error)
	ListApps(context.Context, string, string, string) ([]*github.App, *github.Response, error)
	ListAutolinks(context.Context, string, string, *github.ListOptions) ([]*github.Autolink, *github.Response, error)
	ListBranches(context.Context, string, string, *github.BranchListOptions) ([]*github.Branch, *github.Response, error)
	ListBranchesHeadCommit(context.Context, string, string, string) ([]*github.BranchCommit, *github.Response, error)
	ListByOrg(context.Context, string, *github.RepositoryListByOrgOptions) ([]*github.Repository, *github.Response, error)
	ListCodeFrequency(context.Context, string, string) ([]*github.WeeklyStats, *github.Response, error)
	ListCollaborators(context.Context, string, string, *github.ListCollaboratorsOptions) ([]*github.User, *github.Response, error)
	ListComments(context.Context, string, string, *github.ListOptions) ([]*github.RepositoryComment, *github.Response, error)
	ListCommitActivity(context.Context, string, string) ([]*github.WeeklyCommitActivity, *github.Response, error)
	ListCommitComments(context.Context, string, string, string, *github.ListOptions) ([]*github.RepositoryComment, *github.Response, error)
	ListCommits(context.Context, string, string, *github.CommitsListOptions) ([]*github.RepositoryCommit, *github.Response, error)
	ListContributors(context.Context, string, string, *github.ListContributorsOptions) ([]*github.Contributor, *github.Response, error)
	ListContributorsStats(context.Context, string, string) ([]*github.ContributorStats, *github.Response, error)
	ListDeploymentStatuses(context.Context, string, string, int64, *github.ListOptions) ([]*github.DeploymentStatus, *github.Response, error)
	ListDeployments(context.Context, string, string, *github.DeploymentsListOptions) ([]*github.Deployment, *github.Response, error)
	ListEnvironments(context.Context, string, string, *github.EnvironmentListOptions) (*github.EnvResponse, *github.Response, error)
	ListForks(context.Context, string, string, *github.RepositoryListForksOptions) ([]*github.Repository, *github.Response, error)
	ListHookDeliveries(context.Context, string, string, int64, *github.ListCursorOptions) ([]*github.HookDelivery, *github.Response, error)
	ListHooks(context.Context, string, string, *github.ListOptions) ([]*github.Hook, *github.Response, error)
	ListInvitations(context.Context, string, string, *github.ListOptions) ([]*github.RepositoryInvitation, *github.Response, error)
	ListKeys(context.Context, string, string, *github.ListOptions) ([]*github.Key, *github.Response, error)
	ListLanguages(context.Context, string, string) (map[string]int, *github.Response, error)
	ListPagesBuilds(context.Context, string, string, *github.ListOptions) ([]*github.PagesBuild, *github.Response, error)
	ListParticipation(context.Context, string, string) (*github.RepositoryParticipation, *github.Response, error)
	ListPreReceiveHooks(context.Context, string, string, *github.ListOptions) ([]*github.PreReceiveHook, *github.Response, error)
	ListProjects(context.Context, string, string, *github.ProjectListOptions) ([]*github.Project, *github.Response, error)
	ListPunchCard(context.Context, string, string) ([]*github.PunchCard, *github.Response, error)
	ListReleaseAssets(context.Context, string, string, int64, *github.ListOptions) ([]*github.ReleaseAsset, *github.Response, error)
	ListReleases(context.Context, string, string, *github.ListOptions) ([]*github.RepositoryRelease, *github.Response, error)
	ListRequiredStatusChecksContexts(context.Context, string, string, string) ([]string, *github.Response, error)
	ListStatuses(context.Context, string, string, string, *github.ListOptions) ([]*github.RepoStatus, *github.Response, error)
	ListTagProtection(context.Context, string, string) ([]*github.TagProtection, *github.Response, error)
	ListTags(context.Context, string, string, *github.ListOptions) ([]*github.RepositoryTag, *github.Response, error)
	ListTeams(context.Context, string, string, *github.ListOptions) ([]*github.Team, *github.Response, error)
	ListTrafficClones(context.Context, string, string, *github.TrafficBreakdownOptions) (*github.TrafficClones, *github.Response, error)
	ListTrafficPaths(context.Context, string, string) ([]*github.TrafficPath, *github.Response, error)
	ListTrafficReferrers(context.Context, string, string) ([]*github.TrafficReferrer, *github.Response, error)
	ListTrafficViews(context.Context, string, string, *github.TrafficBreakdownOptions) (*github.TrafficViews, *github.Response, error)
	Merge(context.Context, string, string, *github.RepositoryMergeRequest) (*github.RepositoryCommit, *github.Response, error)
	MergeUpstream(context.Context, string, string, *github.RepoMergeUpstreamRequest) (*github.RepoMergeUpstreamResult, *github.Response, error)
	OptionalSignaturesOnProtectedBranch(context.Context, string, string, string) (*github.Response, error)
	PingHook(context.Context, string, string, int64) (*github.Response, error)
	RedeliverHookDelivery(context.Context, string, string, int64, int64) (*github.HookDelivery, *github.Response, error)
	RemoveAdminEnforcement(context.Context, string, string, string) (*github.Response, error)
	RemoveAppRestrictions(context.Context, string, string, string, []string) ([]*github.App, *github.Response, error)
	RemoveBranchProtection(context.Context, string, string, string) (*github.Response, error)
	RemoveCollaborator(context.Context, string, string, string) (*github.Response, error)
	RemovePullRequestReviewEnforcement(context.Context, string, string, string) (*github.Response, error)
	RemoveRequiredStatusChecks(context.Context, string, string, string) (*github.Response, error)
	RenameBranch(context.Context, string, string, string, string) (*github.Branch, *github.Response, error)
	ReplaceAllTopics(context.Context, string, string, []string) ([]string, *github.Response, error)
	ReplaceAppRestrictions(context.Context, string, string, string, []string) ([]*github.App, *github.Response, error)
	RequestPageBuild(context.Context, string, string) (*github.PagesBuild, *github.Response, error)
	RequireSignaturesOnProtectedBranch(context.Context, string, string, string) (*github.SignaturesProtectedBranch, *github.Response, error)
	Subscribe(context.Context, string, string, string, string, []uint8) (*github.Response, error)
	TestHook(context.Context, string, string, int64) (*github.Response, error)
	Transfer(context.Context, string, string, github.TransferRequest) (*github.Repository, *github.Response, error)
	Unsubscribe(context.Context, string, string, string, string, []uint8) (*github.Response, error)
	UpdateBranchProtection(context.Context, string, string, string, *github.ProtectionRequest) (*github.Protection, *github.Response, error)
	UpdateComment(context.Context, string, string, int64, *github.RepositoryComment) (*github.RepositoryComment, *github.Response, error)
	UpdateFile(context.Context, string, string, string, *github.RepositoryContentFileOptions) (*github.RepositoryContentResponse, *github.Response, error)
	UpdateInvitation(context.Context, string, string, int64, string) (*github.RepositoryInvitation, *github.Response, error)
	UpdatePages(context.Context, string, string, *github.PagesUpdate) (*github.Response, error)
	UpdatePreReceiveHook(context.Context, string, string, int64, *github.PreReceiveHook) (*github.PreReceiveHook, *github.Response, error)
	UpdatePullRequestReviewEnforcement(context.Context, string, string, string, *github.PullRequestReviewsEnforcementUpdate) (*github.PullRequestReviewsEnforcement, *github.Response, error)
	UpdateRequiredStatusChecks(context.Context, string, string, string, *github.RequiredStatusChecksRequest) (*github.RequiredStatusChecks, *github.Response, error)
	UploadReleaseAsset(context.Context, string, string, int64, *github.UploadOptions, *os.File) (*github.ReleaseAsset, *github.Response, error)
}

type SCIMService interface {
	DeleteSCIMUserFromOrg(context.Context, string, string) (*github.Response, error)
	GetSCIMProvisioningInfoForUser(context.Context, string, string) (*github.SCIMUserAttributes, *github.Response, error)
	ListSCIMProvisionedIdentities(context.Context, string, *github.ListSCIMProvisionedIdentitiesOptions) (*github.SCIMProvisionedIdentities, *github.Response, error)
	ProvisionAndInviteSCIMUser(context.Context, string, *github.SCIMUserAttributes) (*github.Response, error)
	UpdateAttributeForSCIMUser(context.Context, string, string, *github.UpdateAttributeForSCIMUserOptions) (*github.Response, error)
	UpdateProvisionedOrgMembership(context.Context, string, string, *github.SCIMUserAttributes) (*github.Response, error)
}

type SearchService interface {
	Code(context.Context, string, *github.SearchOptions) (*github.CodeSearchResult, *github.Response, error)
	Commits(context.Context, string, *github.SearchOptions) (*github.CommitsSearchResult, *github.Response, error)
	Issues(context.Context, string, *github.SearchOptions) (*github.IssuesSearchResult, *github.Response, error)
	Labels(context.Context, int64, string, *github.SearchOptions) (*github.LabelsSearchResult, *github.Response, error)
	Repositories(context.Context, string, *github.SearchOptions) (*github.RepositoriesSearchResult, *github.Response, error)
	Topics(context.Context, string, *github.SearchOptions) (*github.TopicsSearchResult, *github.Response, error)
	Users(context.Context, string, *github.SearchOptions) (*github.UsersSearchResult, *github.Response, error)
}

type SecretScanningService interface {
	GetAlert(context.Context, string, string, int64) (*github.SecretScanningAlert, *github.Response, error)
	ListAlertsForEnterprise(context.Context, string, *github.SecretScanningAlertListOptions) ([]*github.SecretScanningAlert, *github.Response, error)
	ListAlertsForOrg(context.Context, string, *github.SecretScanningAlertListOptions) ([]*github.SecretScanningAlert, *github.Response, error)
	ListAlertsForRepo(context.Context, string, string, *github.SecretScanningAlertListOptions) ([]*github.SecretScanningAlert, *github.Response, error)
	ListLocationsForAlert(context.Context, string, string, int64, *github.ListOptions) ([]*github.SecretScanningAlertLocation, *github.Response, error)
	UpdateAlert(context.Context, string, string, int64, *github.SecretScanningAlertUpdateOptions) (*github.SecretScanningAlert, *github.Response, error)
}

type TeamsService interface {
	AddTeamMembershipByID(context.Context, int64, int64, string, *github.TeamAddTeamMembershipOptions) (*github.Membership, *github.Response, error)
	AddTeamMembershipBySlug(context.Context, string, string, string, *github.TeamAddTeamMembershipOptions) (*github.Membership, *github.Response, error)
	AddTeamProjectByID(context.Context, int64, int64, int64, *github.TeamProjectOptions) (*github.Response, error)
	AddTeamProjectBySlug(context.Context, string, string, int64, *github.TeamProjectOptions) (*github.Response, error)
	AddTeamRepoByID(context.Context, int64, int64, string, string, *github.TeamAddTeamRepoOptions) (*github.Response, error)
	AddTeamRepoBySlug(context.Context, string, string, string, string, *github.TeamAddTeamRepoOptions) (*github.Response, error)
	CreateCommentByID(context.Context, int64, int64, int, github.DiscussionComment) (*github.DiscussionComment, *github.Response, error)
	CreateCommentBySlug(context.Context, string, string, int, github.DiscussionComment) (*github.DiscussionComment, *github.Response, error)
	CreateDiscussionByID(context.Context, int64, int64, github.TeamDiscussion) (*github.TeamDiscussion, *github.Response, error)
	CreateDiscussionBySlug(context.Context, string, string, github.TeamDiscussion) (*github.TeamDiscussion, *github.Response, error)
	CreateOrUpdateIDPGroupConnectionsByID(context.Context, int64, int64, github.IDPGroupList) (*github.IDPGroupList, *github.Response, error)
	CreateOrUpdateIDPGroupConnectionsBySlug(context.Context, string, string, github.IDPGroupList) (*github.IDPGroupList, *github.Response, error)
	CreateTeam(context.Context, string, github.NewTeam) (*github.Team, *github.Response, error)
	DeleteCommentByID(context.Context, int64, int64, int, int) (*github.Response, error)
	DeleteCommentBySlug(context.Context, string, string, int, int) (*github.Response, error)
	DeleteDiscussionByID(context.Context, int64, int64, int) (*github.Response, error)
	DeleteDiscussionBySlug(context.Context, string, string, int) (*github.Response, error)
	DeleteTeamByID(context.Context, int64, int64) (*github.Response, error)
	DeleteTeamBySlug(context.Context, string, string) (*github.Response, error)
	EditCommentByID(context.Context, int64, int64, int, int, github.DiscussionComment) (*github.DiscussionComment, *github.Response, error)
	EditCommentBySlug(context.Context, string, string, int, int, github.DiscussionComment) (*github.DiscussionComment, *github.Response, error)
	EditDiscussionByID(context.Context, int64, int64, int, github.TeamDiscussion) (*github.TeamDiscussion, *github.Response, error)
	EditDiscussionBySlug(context.Context, string, string, int, github.TeamDiscussion) (*github.TeamDiscussion, *github.Response, error)
	EditTeamByID(context.Context, int64, int64, github.NewTeam, bool) (*github.Team, *github.Response, error)
	EditTeamBySlug(context.Context, string, string, github.NewTeam, bool) (*github.Team, *github.Response, error)
	GetCommentByID(context.Context, int64, int64, int, int) (*github.DiscussionComment, *github.Response, error)
	GetCommentBySlug(context.Context, string, string, int, int) (*github.DiscussionComment, *github.Response, error)
	GetDiscussionByID(context.Context, int64, int64, int) (*github.TeamDiscussion, *github.Response, error)
	GetDiscussionBySlug(context.Context, string, string, int) (*github.TeamDiscussion, *github.Response, error)
	GetExternalGroup(context.Context, string, int64) (*github.ExternalGroup, *github.Response, error)
	GetTeamByID(context.Context, int64, int64) (*github.Team, *github.Response, error)
	GetTeamBySlug(context.Context, string, string) (*github.Team, *github.Response, error)
	GetTeamMembershipByID(context.Context, int64, int64, string) (*github.Membership, *github.Response, error)
	GetTeamMembershipBySlug(context.Context, string, string, string) (*github.Membership, *github.Response, error)
	IsTeamRepoByID(context.Context, int64, int64, string, string) (*github.Repository, *github.Response, error)
	IsTeamRepoBySlug(context.Context, string, string, string, string) (*github.Repository, *github.Response, error)
	ListChildTeamsByParentID(context.Context, int64, int64, *github.ListOptions) ([]*github.Team, *github.Response, error)
	ListChildTeamsByParentSlug(context.Context, string, string, *github.ListOptions) ([]*github.Team, *github.Response, error)
	ListCommentsByID(context.Context, int64, int64, int, *github.DiscussionCommentListOptions) ([]*github.DiscussionComment, *github.Response, error)
	ListCommentsBySlug(context.Context, string, string, int, *github.DiscussionCommentListOptions) ([]*github.DiscussionComment, *github.Response, error)
	ListDiscussionsByID(context.Context, int64, int64, *github.DiscussionListOptions) ([]*github.TeamDiscussion, *github.Response, error)
	ListDiscussionsBySlug(context.Context, string, string, *github.DiscussionListOptions) ([]*github.TeamDiscussion, *github.Response, error)
	ListExternalGroups(context.Context, string, *github.ListExternalGroupsOptions) (*github.ExternalGroupList, *github.Response, error)
	ListIDPGroupsForTeamByID(context.Context, int64, int64) (*github.IDPGroupList, *github.Response, error)
	ListIDPGroupsForTeamBySlug(context.Context, string, string) (*github.IDPGroupList, *github.Response, error)
	ListIDPGroupsInOrganization(context.Context, string, *github.ListCursorOptions) (*github.IDPGroupList, *github.Response, error)
	ListPendingTeamInvitationsByID(context.Context, int64, int64, *github.ListOptions) ([]*github.Invitation, *github.Response, error)
	ListPendingTeamInvitationsBySlug(context.Context, string, string, *github.ListOptions) ([]*github.Invitation, *github.Response, error)
	ListTeamMembersByID(context.Context, int64, int64, *github.TeamListTeamMembersOptions) ([]*github.User, *github.Response, error)
	ListTeamMembersBySlug(context.Context, string, string, *github.TeamListTeamMembersOptions) ([]*github.User, *github.Response, error)
	ListTeamProjectsByID(context.Context, int64, int64) ([]*github.Project, *github.Response, error)
	ListTeamProjectsBySlug(context.Context, string, string) ([]*github.Project, *github.Response, error)
	ListTeamReposByID(context.Context, int64, int64, *github.ListOptions) ([]*github.Repository, *github.Response, error)
	ListTeamReposBySlug(context.Context, string, string, *github.ListOptions) ([]*github.Repository, *github.Response, error)
	ListTeams(context.Context, string, *github.ListOptions) ([]*github.Team, *github.Response, error)
	ListUserTeams(context.Context, *github.ListOptions) ([]*github.Team, *github.Response, error)
	RemoveConnectedExternalGroup(context.Context, string, string) (*github.Response, error)
	RemoveTeamMembershipByID(context.Context, int64, int64, string) (*github.Response, error)
	RemoveTeamMembershipBySlug(context.Context, string, string, string) (*github.Response, error)
	RemoveTeamProjectByID(context.Context, int64, int64, int64) (*github.Response, error)
	RemoveTeamProjectBySlug(context.Context, string, string, int64) (*github.Response, error)
	RemoveTeamRepoByID(context.Context, int64, int64, string, string) (*github.Response, error)
	RemoveTeamRepoBySlug(context.Context, string, string, string, string) (*github.Response, error)
	ReviewTeamProjectsByID(context.Context, int64, int64, int64) (*github.Project, *github.Response, error)
	ReviewTeamProjectsBySlug(context.Context, string, string, int64) (*github.Project, *github.Response, error)
	UpdateConnectedExternalGroup(context.Context, string, string, *github.ExternalGroup) (*github.ExternalGroup, *github.Response, error)
}

type UsersService interface {
	AcceptInvitation(context.Context, int64) (*github.Response, error)
	AddEmails(context.Context, []string) ([]*github.UserEmail, *github.Response, error)
	BlockUser(context.Context, string) (*github.Response, error)
	CreateGPGKey(context.Context, string) (*github.GPGKey, *github.Response, error)
	CreateKey(context.Context, *github.Key) (*github.Key, *github.Response, error)
	CreateProject(context.Context, *github.CreateUserProjectOptions) (*github.Project, *github.Response, error)
	CreateSSHSigningKey(context.Context, *github.Key) (*github.SSHSigningKey, *github.Response, error)
	DeclineInvitation(context.Context, int64) (*github.Response, error)
	DeleteEmails(context.Context, []string) (*github.Response, error)
	DeleteGPGKey(context.Context, int64) (*github.Response, error)
	DeleteKey(context.Context, int64) (*github.Response, error)
	DeletePackage(context.Context, string, string, string) (*github.Response, error)
	DeleteSSHSigningKey(context.Context, int64) (*github.Response, error)
	DemoteSiteAdmin(context.Context, string) (*github.Response, error)
	Edit(context.Context, *github.User) (*github.User, *github.Response, error)
	Follow(context.Context, string) (*github.Response, error)
	Get(context.Context, string) (*github.User, *github.Response, error)
	GetByID(context.Context, int64) (*github.User, *github.Response, error)
	GetGPGKey(context.Context, int64) (*github.GPGKey, *github.Response, error)
	GetHovercard(context.Context, string, *github.HovercardOptions) (*github.Hovercard, *github.Response, error)
	GetKey(context.Context, int64) (*github.Key, *github.Response, error)
	GetPackage(context.Context, string, string, string) (*github.Package, *github.Response, error)
	GetSSHSigningKey(context.Context, int64) (*github.SSHSigningKey, *github.Response, error)
	IsBlocked(context.Context, string) (bool, *github.Response, error)
	IsFollowing(context.Context, string, string) (bool, *github.Response, error)
	ListAll(context.Context, *github.UserListOptions) ([]*github.User, *github.Response, error)
	ListBlockedUsers(context.Context, *github.ListOptions) ([]*github.User, *github.Response, error)
	ListEmails(context.Context, *github.ListOptions) ([]*github.UserEmail, *github.Response, error)
	ListFollowers(context.Context, string, *github.ListOptions) ([]*github.User, *github.Response, error)
	ListFollowing(context.Context, string, *github.ListOptions) ([]*github.User, *github.Response, error)
	ListGPGKeys(context.Context, string, *github.ListOptions) ([]*github.GPGKey, *github.Response, error)
	ListInvitations(context.Context, *github.ListOptions) ([]*github.RepositoryInvitation, *github.Response, error)
	ListKeys(context.Context, string, *github.ListOptions) ([]*github.Key, *github.Response, error)
	ListPackages(context.Context, string, *github.PackageListOptions) ([]*github.Package, *github.Response, error)
	ListProjects(context.Context, string, *github.ProjectListOptions) ([]*github.Project, *github.Response, error)
	ListSSHSigningKeys(context.Context, string, *github.ListOptions) ([]*github.SSHSigningKey, *github.Response, error)
	PackageDeleteVersion(context.Context, string, string, string, int64) (*github.Response, error)
	PackageGetAllVersions(context.Context, string, string, string, *github.PackageListOptions) ([]*github.PackageVersion, *github.Response, error)
	PackageGetVersion(context.Context, string, string, string, int64) (*github.PackageVersion, *github.Response, error)
	PackageRestoreVersion(context.Context, string, string, string, int64) (*github.Response, error)
	PromoteSiteAdmin(context.Context, string) (*github.Response, error)
	RestorePackage(context.Context, string, string, string) (*github.Response, error)
	Suspend(context.Context, string, *github.UserSuspendOptions) (*github.Response, error)
	UnblockUser(context.Context, string) (*github.Response, error)
	Unfollow(context.Context, string) (*github.Response, error)
	Unsuspend(context.Context, string) (*github.Response, error)
}
